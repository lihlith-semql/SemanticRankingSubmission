{"index": 0, "beams": [{"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.06582706835328657, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.movie_id), movie.id),movie.vote_average)", "score": -0.4291489874783763, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average)", "score": -0.4571396570539014, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.movie_id), movie.status),movie.vote_average)", "score": -0.46318419223495305, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,movie.status), movie.id),movie.vote_average)", "score": -0.4702750795539594, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.movie_id), movie.vote_average),movie.vote_average)", "score": -0.4832916159448605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,movie.status), movie.status),movie.vote_average)", "score": -0.5043102843105361, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.vote_average)", "score": -0.5085710018083215, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,movie.status), movie.vote_average),movie.vote_average)", "score": -0.5244177080204436, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,oscar_winner.movie_id), movie.id),movie.vote_average)", "score": -0.5639575197431161, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.movie_id), movie.id),movie.vote_average)", "score": -0.5654777780497344, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),movie.status,movie.id),movie.id,production_country.movie_id), movie.id),movie.vote_average)", "score": -0.5691411140886578, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,movie.vote_average), movie.id),movie.vote_average)", "score": -0.5750552394444547, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,movie.popularity), movie.id),movie.vote_average)", "score": -0.5755157525463362, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,production_country.movie_id), movie.id),movie.vote_average)", "score": -0.5842888302018379, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 1, "beams": [{"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))", "score": -0.16839624457497848, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.31785012297768844, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,el), movie.runtime),movie.runtime))", "score": -0.3368548702492262, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.42680354365998624, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.44087651794031557, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.46562271371663, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_place,=,el), movie.runtime),movie.runtime))", "score": -0.46909981482167495, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.47969568799695933, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,el), movie.runtime),movie.runtime))", "score": -0.48395150416035904, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.48418493667628093, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.48809983077094304, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.49850832471780704, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,=,el),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.runtime),movie.runtime))", "score": -0.5157443291363483, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,=,el),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.runtime),movie.runtime))", "score": -0.5400744681522418, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),company.name,=,el), movie.runtime),movie.runtime))", "score": -0.5687570523514296, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 2, "beams": [{"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))", "score": -0.04616866492870031, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,86), movie.original_language),movie.original_language))", "score": -0.30442591802420793, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,86), movie.original_language),movie.original_language))", "score": -0.4166706432515639, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.4312103722937096, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.4576640200045517, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.4941927048943625, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.5028180911613325, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.5206463526052046, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.5292717388721745, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(movie),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.5577871143903872, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.id,oscar_winner.movie_id), movie.original_language),movie.original_language))", "score": -0.5579463472514143, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,86),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.5658004007114041, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,86), movie.original_language),movie.original_language))", "score": -0.5691671003514784, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.title))", "score": -0.5746048972869175, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}, {"orig_question": "Show the original movie language where the movie runtime equals 86 minutes", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,86), movie.original_language),movie.original_language))", "score": -0.5859734644109267, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,86), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 3, "beams": [{"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.28468741456958585, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(production_company),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3341021368774328, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),company.name,=,Slovakia),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3393569273378439, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),person.birth_place,=,Released),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.35636834374434107, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id), company.name),company.name))", "score": -0.3677910375953507, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(production_country),person.id,production_country.iso_3166_1),country.name,=,Slovakia),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.37032952339815467, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),genre.name,=,Released),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3777428649745858, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(production_company),country.iso_3166_1,production_country.iso_3166_1),company.name,=,Released),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3887716496456909, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3891195353851955, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),country.name,=,Slovakia),merge(getData(production_company),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,movie.id),country.iso_3166_1,production_company.company_id), company.name),company.name))", "score": -0.3925385206718935, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Slovakia),merge(getData(production_company),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,movie.id),country.iso_3166_1,production_company.company_id), company.name),company.name))", "score": -0.4011005987557215, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),country.name,=,Slovakia),merge(getData(production_company),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_company.company_id), company.name),company.name))", "score": -0.40312916395661114, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(production_company),country.iso_3166_1,production_country.iso_3166_1),person.birth_place,=,Slovakia),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.40578316081568844, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Slovakia),merge(getData(production_company),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id),country.iso_3166_1,production_company.company_id), company.name),company.name))", "score": -0.4116911322390936, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),country.name,=,Slovakia),merge(getData(production_company),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),production_company.movie_id,movie.id),country.iso_3166_1,production_company.company_id), company.name),company.name))", "score": -0.41509321650162173, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 4, "beams": [{"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,=,1980-07-12), movie.title),movie.title))", "score": -0.11658103195267508, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,=,1980-07-12), movie.title),movie.title))", "score": -0.1671514852044805, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,=,1980-07-12), movie.title),movie.status))", "score": -0.26449034329106996, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.2655690845584128, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,=,1980-07-12), movie.title),movie.title))", "score": -0.2907138883330045, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,=,1980-07-12), movie.title),movie.title))", "score": -0.29551661384102634, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.status))", "score": -0.31112809946508885, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,=,1980-07-12), movie.title),movie.status))", "score": -0.3150607965428754, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,=,1980-07-12), movie.title),movie.title))", "score": -0.31685237840250197, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,=,1980-07-12), movie.title),movie.title))", "score": -0.3292112168995971, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,=,1980-07-12), movie.title),movie.release_date))", "score": -0.3296120267734921, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),movie.status,=,1980-07-12), movie.title),movie.title))", "score": -0.33418662102567553, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,=,1980-07-12), movie.title),movie.title))", "score": -0.3412843415848099, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,=,1980-07-12), movie.status),movie.title))", "score": -0.3711804298181554, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,=,1980-07-12), movie.title),oscar.category))", "score": -0.3760515367788257, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 5, "beams": [{"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))", "score": -0.036964659913792275, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,100), movie.budget),movie.budget))", "score": -0.3106687100225827, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,100), movie.budget),movie.budget))", "score": -0.45596051528991666, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.title),movie.budget))", "score": -0.48726541582436766, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>=,100), movie.budget),movie.budget))", "score": -0.4956339927011868, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<=,100), movie.budget),movie.budget))", "score": -0.5567974181467434, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.release_date),movie.budget))", "score": -0.5667046088346979, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,=,100), movie.budget),movie.budget))", "score": -0.568726453333511, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,null,100), movie.budget),movie.budget))", "score": -0.7283194990450284, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,100), movie.title),movie.budget))", "score": -0.7609694659331581, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,>,100), movie.budget),movie.budget))", "score": -0.7933045892132213, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.title))", "score": -0.8391989271476632, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,100), movie.release_date),movie.budget))", "score": -0.8404086589434883, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.release_date))", "score": -0.8591753046348458, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}, {"orig_question": "How many movies are there with the budgets of the movies with a runtime larger than 100?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,100), movie.budget),movie.budget))", "score": -0.8737032083881786, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,100), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 6, "beams": [{"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))", "score": -0.025608136333175935, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))", "score": -0.4172382323919272, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1968-05-20), person.birth_place),person.birth_place))", "score": -0.4520131312456215, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))", "score": -0.45674020306963037, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))", "score": -0.45762305440665657, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))", "score": -0.5329917376644472, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.death_place))", "score": -0.5577562702965224, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))", "score": -0.5733765690932278, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_day))", "score": -0.6359423054527724, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.name))", "score": -0.6491372240852797, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1968-05-20), person.birth_place),person.birth_place))", "score": -0.6530337244184921, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),country.name))", "score": -0.6614021314453566, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.release_date,=,1968-05-20), person.birth_place),person.birth_place))", "score": -0.6690210364904488, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.name),person.birth_place))", "score": -0.6701649134192849, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}, {"orig_question": "Where were persons born that were born on 1968-05-20?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),crew.person_id))", "score": -0.6709643257927382, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1968-05-20), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 7, "beams": [{"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.revenue,<=,255273813),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.11165174437336532, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,255273813),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.17309526889749466, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.revenue,<=,255273813),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.id),oscar.number)", "score": -0.23776610467959985, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,255273813),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.24808207216869665, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.revenue,<=,255273813),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.number)", "score": -0.28758641408264923, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,255273813),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), movie.id),oscar.number)", "score": -0.29645561984774715, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.revenue,<=,255273813),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.number),oscar.number)", "score": -0.305228116425549, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.revenue,<=,255273813),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.title),oscar.number)", "score": -0.31936963972134974, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,255273813),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.33213300859099654, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.revenue,>=,255273813),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.33745252969007483, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.revenue,<=,255273813),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.year),oscar.number)", "score": -0.3409235620152821, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,255273813),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), movie.title),oscar.number)", "score": -0.3607473756310946, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,255273813),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.number)", "score": -0.36797269486781503, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,255273813),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.36849693264522543, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers for movies with a revenue less than or equal 255273813?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.revenue,<,255273813),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.37660769152335705, "correct_code": "sum(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<=,255273813),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 8, "beams": [{"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.0552903935741821, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,41.8459),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.1639197810739268, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.22566724400047322, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,>,41.8459),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.2602972954386902, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),person.death_place))", "score": -0.26471907457910504, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(movie),movie.popularity,>,41.8459),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.29869420337445723, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,41.8459),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(person),person.birth_day,!=,41.8459),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.31311197227871684, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,!=,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.3382826517344816, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,41.8459),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(person),person.gender,!=,41.8459),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.35914719224965813, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,41.8459),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(person),person.death_day,!=,41.8459),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.36168774730621406, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>=,41.8459),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.3673863839860065, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,41.8459),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(person),movie.revenue,!=,41.8459),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.3860601345774737, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,>=,41.8459),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.39754267528830434, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.4191621444507018, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places do oscar nominees have who worked in movies with a popularity greater than 41.8459?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.person_id), person.death_place),person.death_place))", "score": -0.4201649546549446, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,41.8459),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 9, "beams": [{"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.07244323106434017, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.16018756159645955, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.23856400924659293, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.2664441851199989, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.3135075078445066, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.vote_average)", "score": -0.3263083397787123, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.title),movie.vote_count)", "score": -0.3562580922804148, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.runtime),movie.vote_count)", "score": -0.3565972343377903, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.movie_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.3987493834632209, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_count),movie.runtime)", "score": -0.401251838376626, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.4153519693008451, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(production_company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.430259525244229, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.budget),movie.vote_count)", "score": -0.43215862188955245, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.vote_average),movie.vote_count)", "score": -0.4499632169500787, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies produced by the company Paramount Pictures?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Paramount Pictures),getData(movie),production_company.movie_id,movie.id), movie.id),movie.budget)", "score": -0.4520946938390523, "correct_code": "avg(distinct(merge(filter(getData(company),company.name,=,Paramount Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 10, "beams": [{"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),cast.movie_id,movie.id), genre.name),genre.name))", "score": -0.2507030662168927, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),has_genre.movie_id,movie.id), genre.name),genre.name))", "score": -0.2816961337093328, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),crew.movie_id,movie.id), genre.name),genre.name))", "score": -0.28421858296196806, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),cast.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.29832364705366987, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),cast.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.306635838218605, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_place,=,2006-03-07),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),cast.movie_id,movie.id), genre.name),genre.name))", "score": -0.3081452880752585, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),cast.movie_id,movie.id), genre.name),genre.name))", "score": -0.3156441383736204, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.31941394496425923, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,cast.person_id),person.death_place,=,2006-03-07),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),cast.movie_id,movie.id), genre.name),genre.name))", "score": -0.3235534659555154, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_place,=,2006-03-07),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),has_genre.movie_id,movie.id), genre.name),genre.name))", "score": -0.32505465115727183, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(crew),person.id,cast.person_id),merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),cast.movie_id,movie.id), genre.name),genre.name))", "score": -0.327771125067389, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),has_genre.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.32931671454610995, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3314480412821706, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),crew.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.3318391319308198, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),has_genre.movie_id,movie.id), genre.name),genre.name))", "score": -0.3336077933426755, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 11, "beams": [{"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)", "score": -0.041621568771751764, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,5.1), movie.id),movie.runtime)", "score": -0.39007561292145776, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.runtime),movie.runtime)", "score": -0.409500346798267, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<=,5.1), movie.id),movie.runtime)", "score": -0.5588148205471537, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,5.1), movie.id),movie.runtime)", "score": -0.6399763895154315, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,<,5.1),movie.runtime)", "score": -0.6475563428429697, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_average,<,5.1),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,cast.movie_id), movie.runtime),movie.runtime)", "score": -0.719075327393568, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_average,<,5.1),merge(getData(movie),getData(movie),movie.runtime,movie.id),movie.id,cast.movie_id), movie.runtime),movie.runtime)", "score": -0.7340862742368738, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_average,<,5.1),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.runtime),movie.runtime)", "score": -0.7407358123031312, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_average,<,5.1),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,movie.id), movie.runtime),movie.runtime)", "score": -0.7503251683052056, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,5.1), movie.runtime),movie.runtime)", "score": -0.7579543909479731, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_average,<,5.1),merge(getData(movie),getData(movie),movie.runtime,movie.id),movie.id,movie.id), movie.runtime),movie.runtime)", "score": -0.7653361673228166, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>,5.1), movie.id),movie.runtime)", "score": -0.7734838782110522, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.title),movie.runtime)", "score": -0.7873917274377676, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.release_date),movie.runtime)", "score": -0.810551763661247, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 12, "beams": [{"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.10934528145040431, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.12000401349296239, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,is),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.1358181603978367, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,is), country.name),country.name))", "score": -0.25625771129959807, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,!=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.284370408799873, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(production_country),movie.id,production_country.movie_id),movie.original_language,=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.31444503063733686, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,spoken_language.movie_id),movie.original_language,=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3247931024349352, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.36727204502424654, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3684655246623622, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),language.name,=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.38249098311500235, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.40841966624731674, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),country.name,=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.41101875673094673, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,!=,is), country.name),country.name))", "score": -0.4113685918106854, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,=,is),getData(country),production_country.iso_3166_1,country.name), country.name),country.name))", "score": -0.41552977374230227, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,is),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.4278985743843304, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 13, "beams": [{"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,insomnia),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.039059303085581656, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.14188858519932207, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),keyword.name,=,insomnia),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.3389237770615953, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,insomnia),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.36740287920232473, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,insomnia), movie.title),movie.title))", "score": -0.3935245575372358, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),keyword.name,=,insomnia),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.39861646362042125, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),keyword.name,=,insomnia),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.4029458107641986, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(has_keyword),keyword.name,=,insomnia),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.4152369377399556, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,insomnia),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.4264418336967471, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,insomnia),merge(getData(has_keyword),getData(movie),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.43027063089419865, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,insomnia),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.budget))", "score": -0.4340777824191653, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,insomnia), movie.title),movie.title))", "score": -0.4351541316695534, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,insomnia),merge(getData(has_keyword),getData(movie),production_company.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.4401936169910392, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),has_keyword.keyword_id,=,insomnia),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.4439107067803903, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movie titles have the keyword insomnia assigned?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,insomnia),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),oscar.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.444877393193654, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,insomnia),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 14, "beams": [{"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),language.name,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.2992125709998868, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.304273529469256, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),language.name,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.3218963231548367, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.3269572816242059, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),movie.revenue,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.36836718970332377, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),movie.revenue,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.373428148172693, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),person.gender,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.37411737190222766, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.gender,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.3791783303715969, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),language.name,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.3832205378792492, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.38828149634861847, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),movie.revenue,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.39105094185827366, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),movie.revenue,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.39611190032764293, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.gender,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.39680111936745727, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.gender,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.4018620778368265, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with highest revenue excluding movies with type TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),language.name,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.4049320220749887, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 15, "beams": [{"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))", "score": -0.23595720625741692, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.popularity),movie.popularity))", "score": -0.2652272545500934, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))", "score": -0.3040233302779071, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue,=,Ti?ng Vi?t),movie.revenue),movie.popularity))", "score": -0.3222699785820838, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.popularity),movie.popularity))", "score": -0.33329337857058355, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(movie),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))", "score": -0.3421387368798637, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Ti?ng Vi?t),movie.revenue),movie.popularity))", "score": -0.3459739392153792, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))", "score": -0.3624719289310729, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),person.gender,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))", "score": -0.36476475542780934, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(movie),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.popularity),movie.popularity))", "score": -0.3714087851725401, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue,!=,Ti?ng Vi?t),movie.revenue),movie.popularity))", "score": -0.38586816276652397, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))", "score": -0.3878439531087889, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.popularity),movie.popularity))", "score": -0.3917419772237493, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),person.gender,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.popularity),movie.popularity))", "score": -0.39403480372048577, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),movie.revenue,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))", "score": -0.4096061538266135, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 16, "beams": [{"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.popularity))", "score": -0.11032119196897838, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.release_date))", "score": -0.20421061468368862, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.status))", "score": -0.36580063951259945, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.popularity))", "score": -0.39672986780351494, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.title))", "score": -0.4651260579848895, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.release_date))", "score": -0.49061929051822517, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.release_date),movie.popularity))", "score": -0.4988596848124871, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.runtime))", "score": -0.5242823566222796, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.id))", "score": -0.5402783955360064, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.revenue))", "score": -0.551325341584743, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2007-07-07), movie.popularity),movie.popularity))", "score": -0.5769646450789878, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.release_date),movie.release_date))", "score": -0.5927491075271973, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.status))", "score": -0.652209315347136, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2007-07-07), movie.popularity),movie.release_date))", "score": -0.670854067793698, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.id),movie.popularity))", "score": -0.7391607574099908, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 17, "beams": [{"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "score": -0.06300480235222494, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.original_language),movie.original_language))", "score": -0.16036633346084272, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.3), movie.original_language),movie.original_language))", "score": -0.3884627440929762, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,5.3), movie.original_language),movie.original_language))", "score": -0.5536836584163173, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "score": -0.5603303551063685, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))", "score": -0.603230324730248, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.original_language),movie.original_language))", "score": -0.6586562070697255, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,5.3), movie.original_language),movie.original_language))", "score": -0.8047386954058311, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,5.3), movie.original_language),movie.original_language))", "score": -0.8060344973564497, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<=,5.3), movie.original_language),movie.original_language))", "score": -0.8072684357393882, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,null,5.3), movie.original_language),movie.original_language))", "score": -0.8336316863060347, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,5.3), movie.original_language),movie.original_language))", "score": -0.856943301296269, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,5.3), movie.original_language),movie.original_language))", "score": -0.8692905226707808, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),language.name))", "score": -0.8890250492477207, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}, {"orig_question": "What are original languages of movies that have a vote average of 5.3 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.3), movie.original_language),movie.original_language))", "score": -0.8971365216821141, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 18, "beams": [{"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))", "score": -0.04887120005514589, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.title),movie.release_date))", "score": -0.4064385010751721, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.budget),movie.release_date))", "score": -0.4265383793863293, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),person.birth_day))", "score": -0.45415429630156723, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.budget))", "score": -0.5117067531573412, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), person.death_day),movie.release_date))", "score": -0.5233353092226025, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,6.2), movie.release_date),movie.release_date))", "score": -0.5373343787978229, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),person.death_day))", "score": -0.5833508209216234, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.runtime),movie.release_date))", "score": -0.5974509729894635, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.2), movie.release_date),movie.release_date))", "score": -0.6015226803610858, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), company.name),movie.release_date))", "score": -0.6416228427442547, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),crew.movie_id))", "score": -0.6569186882006761, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,6.2), movie.release_date),movie.release_date))", "score": -0.6582298613975581, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),genre.name))", "score": -0.7074427441584703, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}, {"orig_question": "On which different dates were the movies with a vote average of at least 6.2 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), person.birth_place),movie.release_date))", "score": -0.7085905684980389, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.2), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 19, "beams": [{"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))", "score": -0.048930170789390104, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Tango & Cash), movie.status),movie.status))", "score": -0.22730535160008003, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Tango & Cash), movie.status),movie.status))", "score": -0.4909777481407218, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Tango & Cash), movie.status),movie.status))", "score": -0.554550870165258, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.title),movie.status))", "score": -0.586529716692894, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.category,=,Tango & Cash), movie.status),movie.status))", "score": -0.6162981827110343, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.popularity))", "score": -0.6313432539645873, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.runtime),movie.status))", "score": -0.648383542738884, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.popularity),movie.status))", "score": -0.6616223899945908, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.release_date),movie.status))", "score": -0.6968179194554978, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Tango & Cash),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,oscar_winner.movie_id), movie.status),movie.status))", "score": -0.7079501109428983, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Tango & Cash),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,movie.id), movie.status),movie.status))", "score": -0.7087636267287644, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.release_date))", "score": -0.7172693694774352, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.title))", "score": -0.7322767461482727, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}, {"orig_question": "Which is the status of the movie Tango & Cash?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Tango & Cash), movie.status),movie.status))", "score": -0.7523721892684989, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Tango & Cash), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 20, "beams": [{"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.28289086452016327, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.3167483422931457, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.3494895173835523, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1982-05-09),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),movie.vote_count),movie.original_language))", "score": -0.35520670986149766, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(cast),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.35722868037860983, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,crew.person_id),person.birth_place,=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.3659069713981001, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.3661957501866646, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,cast.person_id),person.birth_place,=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.37520668947318475, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.38334699515653464, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,>=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.3843492128293212, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.39108615815159226, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,crew.person_id),person.birth_place,=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.39976445858513365, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,=,1982-05-09),movie.vote_count),movie.original_language))", "score": -0.4035185008788508, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1982-05-09),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),movie.vote_count),movie.original_language))", "score": -0.4160390813909418, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}, {"orig_question": "In which language is the movie with the highest vote count starring a person born after 1982-05-09?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1982-05-09),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id),movie.vote_count),movie.original_language))", "score": -0.4278202829944983, "correct_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1982-05-09),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 21, "beams": [{"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Los Angeles),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.10972524966629611, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Los Angeles),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.1529237034242796, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Los Angeles),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.22550065977459208, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Los Angeles),getData(movie),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.2572554615941036, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Los Angeles),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.category),oscar.category))", "score": -0.2615280315026564, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Los Angeles),getData(movie),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.30045391535208715, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),country.name,=,Los Angeles),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3134832213385483, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.category),oscar.category))", "score": -0.31745236386415693, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Los Angeles),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.status),oscar.category))", "score": -0.3378596835776569, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),oscar.category,=,Los Angeles),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3389715810380516, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),keyword.name,=,Los Angeles),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3458622943646439, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),company.name,=,Los Angeles),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3493354545974273, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),oscar.sub_category,=,Los Angeles),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.36417316880319334, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Los Angeles),getData(movie),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3730308287854016, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "How many oscar winners movies are there with oscar winners who died in Los Angeles?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Los Angeles),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),movie.status))", "score": -0.37762329782880744, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Los Angeles),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 22, "beams": [{"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.2245527688746602, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2.3),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.227892603992128, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.23461688575426842, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2.3),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.23795672087173625, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.29917581719321773, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2.3),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.30251565231068556, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), movie.runtime),person.birth_day))", "score": -0.33415114376823923, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2.3),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), movie.runtime),person.birth_day))", "score": -0.337490978885707, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.34311137122239455, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), movie.runtime),person.birth_day))", "score": -0.34421526064784747, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2.3),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.34645120633986237, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2.3),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), movie.runtime),person.birth_day))", "score": -0.3475550957653153, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.name),person.birth_day))", "score": -0.34886693936610474, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2.3),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.name),person.birth_day))", "score": -0.3522067744835725, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}, {"orig_question": "When are the birthdays from the persons who where involved in a movie with average vote higher than 2.3?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_day),person.birth_day))", "score": -0.3531755224356012, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,2.3),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 23, "beams": [{"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,<,6.47367), company.name),company.name))", "score": -0.06331660790645345, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))", "score": -0.1652531783514577, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,<,6.47367),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.22127065234865523, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,<,6.47367),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))", "score": -0.24754242331136414, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,<=,6.47367), company.name),company.name))", "score": -0.32246255750386044, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,<,6.47367), company.name),company.name))", "score": -0.3365307840220657, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,<,6.47367), company.name),company.name))", "score": -0.3849186564244488, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(movie),movie.popularity,<,6.47367),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,<,6.47367), company.name),company.name))", "score": -0.3882126463446707, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<,6.47367), company.name),company.name))", "score": -0.38822568255694373, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<=,6.47367), company.name),company.name))", "score": -0.39220519719081076, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,<,6.47367), movie.title),company.name))", "score": -0.39882622235169196, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,<,6.47367), company.name),company.name))", "score": -0.4062085725947784, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,<,6.47367), company.name),company.name))", "score": -0.4138801604229821, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,6.47367), company.name),company.name))", "score": -0.41906253384851405, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}, {"orig_question": "How many distinct companies names produced movies with a popularity smaller than 6.47367 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,<,6.47367), company.name),production_company.company_id))", "score": -0.4201442578904806, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,6.47367), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 24, "beams": [{"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.03685754480377415, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,es), country.name),country.name))", "score": -0.2078221238696508, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,es), country.name),country.name))", "score": -0.21784974542773197, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,es), country.name),country.name))", "score": -0.33211850691532857, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.33449879691124257, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.35011288759924647, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),person.birth_place))", "score": -0.36007489788008934, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),production_country.iso_3166_1))", "score": -0.37644728406283434, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,!=,es), country.name),country.name))", "score": -0.3917467226020764, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,!=,es), country.name),country.name))", "score": -0.400408540325581, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),movie.status))", "score": -0.40422033873393165, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.41034587022844987, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),language.name,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.41536872394127783, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), movie.status),country.name))", "score": -0.43195434087504175, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Which are the procuction countries of the movies that their original language is es?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,es),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), person.birth_place),country.name))", "score": -0.4319808862842782, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 25, "beams": [{"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))", "score": -0.05156041156297839, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.21731583581765546, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Espa\u00f1ol),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.24096625236062344, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.27437999302999333, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),language.name,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))", "score": -0.28569720130824144, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),country.name,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))", "score": -0.3019288009094648, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,Espa\u00f1ol), movie.title),movie.title))", "score": -0.34685330667748554, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,has_genre.genre_id), movie.title),movie.title))", "score": -0.3637699586274594, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),spoken_language.movie_id,spoken_language.iso_639_1), movie.title),movie.title))", "score": -0.3743742352121451, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),person.gender,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))", "score": -0.375691706200465, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,!=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))", "score": -0.3838171309685283, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.38393560936371385, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),language.name,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))", "score": -0.38675904750256757, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Espa\u00f1ol), movie.title),movie.title))", "score": -0.3873521694005869, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),movie.original_language,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))", "score": -0.3919256238733477, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 26, "beams": [{"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.runtime),movie.runtime))", "score": -0.015988848590495763, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1996-05-10), movie.runtime),movie.runtime))", "score": -0.6270638966925617, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.title),movie.runtime))", "score": -0.6647018894545909, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,1996-05-10),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,crew.movie_id), movie.runtime),movie.runtime))", "score": -0.6665339006789222, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.release_date),movie.runtime))", "score": -0.6884560093276377, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,1996-05-10),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,oscar_nominee.movie_id), movie.runtime),movie.runtime))", "score": -0.6902272821337703, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,>,1996-05-10), movie.runtime),movie.runtime))", "score": -0.6926275002297189, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,1996-05-10),getData(movie),movie.id,oscar_nominee.movie_id), movie.runtime),movie.runtime))", "score": -0.7101213637567126, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,1996-05-10),getData(movie),movie.id,crew.movie_id), movie.runtime),movie.runtime))", "score": -0.72559483419326, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,1996-05-10),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,movie.release_date), movie.runtime),movie.runtime))", "score": -0.7335066034219797, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,1996-05-10),merge(getData(movie),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,crew.movie_id), movie.runtime),movie.runtime))", "score": -0.7420472787685009, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime))", "score": -0.7480671510093089, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.runtime),movie.title))", "score": -0.7613890474422078, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,1996-05-10), movie.runtime),movie.runtime))", "score": -0.7934698725111957, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,1996-05-10), movie.runtime),movie.runtime))", "score": -0.796158205204847, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 27, "beams": [{"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,2013-06-23), person.birth_place),person.birth_place))", "score": -0.041485236200969666, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))", "score": -0.41459249722538516, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,<,2013-06-23), person.birth_place),person.birth_place))", "score": -0.44799523515509, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,2013-06-23), person.birth_place),person.name))", "score": -0.4485819611581974, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.birth_day,<,2013-06-23), person.birth_place),person.birth_place))", "score": -0.4531016291580255, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,<,2013-06-23), person.birth_place),person.birth_place))", "score": -0.4613669623012338, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,2013-06-23), person.name),person.birth_place))", "score": -0.4772550954367034, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))", "score": -0.4810162268573446, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))", "score": -0.4861226208602801, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,2013-06-23), person.birth_place),person.birth_place))", "score": -0.49039939808426425, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))", "score": -0.49438795898739785, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,person.id),person.birth_day,<,2013-06-23), person.birth_place),person.birth_place))", "score": -0.5130547299692323, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.release_date,<,2013-06-23), person.birth_place),person.birth_place))", "score": -0.524953656073194, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,2013-06-23), person.birth_place),person.birth_day))", "score": -0.5570770773920231, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}, {"orig_question": "What are the persons birth places when their death day was before 2013-06-23?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,2013-06-23), person.birth_place),person.death_place))", "score": -0.5614993844064884, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2013-06-23), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 28, "beams": [{"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.041141525866407354, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "score": -0.2675978954310415, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)), movie.budget),movie.budget))", "score": -0.2768262603451834, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.32166316462775446, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.33679496475585147, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),person.id,movie.id),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.34145378178232094, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,movie.id),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.3420797350790567, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "score": -0.34237084231244785, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,>=,special achievement award (sound effects editing)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.3528485554478674, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special achievement award (sound effects editing)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.36603115887453314, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special achievement award (sound effects editing)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "score": -0.37552034890520075, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),movie.id,movie.id),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.38829394251895505, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),oscar.sub_category,=,special achievement award (sound effects editing)),getData(movie),person.id,movie.id),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.3916237375852224, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(cast),person.id,movie.id),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.4027766430054198, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets used by movies that won an oscar in the sub category special achievement award (sound effects editing) with an oscar winner born in Castle Rock, Colorado?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),getData(production_country),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.432436791501131, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (sound effects editing)),merge(filter(merge(merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),getData(crew),person.id,crew.person_id),person.birth_place,=,Castle Rock, Colorado),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 29, "beams": [{"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,movie.id), country.name),country.name))", "score": -0.13314507499835218, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1934-03-28),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,movie.id), country.name),country.name))", "score": -0.17294538787879227, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),crew.movie_id,movie.id), country.name),country.name))", "score": -0.20882851110460107, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,movie.id), person.birth_place),country.name))", "score": -0.22648600212552633, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1934-03-28),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),crew.movie_id,movie.id), country.name),country.name))", "score": -0.24862882398504116, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1934-03-28),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,movie.id), person.birth_place),country.name))", "score": -0.26628631500596645, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,movie.id), country.name),person.birth_place))", "score": -0.27187162652151764, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,production_country.movie_id),crew.movie_id,movie.id), country.name),country.name))", "score": -0.2735234579436092, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(crew),person.id,crew.person_id),merge(getData(movie),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,movie.id), country.name),country.name))", "score": -0.2779085327701873, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1934-03-28),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,movie.id), country.name),country.name))", "score": -0.2840622805599242, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(production_country),person.id,crew.person_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,movie.id), country.name),country.name))", "score": -0.2889062395387081, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(crew),person.id,crew.person_id),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),crew.movie_id,movie.id), country.name),country.name))", "score": -0.2934381868146286, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,movie.id), country.name),country.name))", "score": -0.30170695871341985, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),crew.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.302663773689939, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many distinct country names where film with a crew member born before in 1934-03-28 or before produced ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1934-03-28),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),crew.movie_id,movie.id), person.birth_place),country.name))", "score": -0.30961771924915615, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1934-03-28),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 30, "beams": [{"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.release_date,>,2013-05-09), movie.id),movie.popularity)", "score": -0.1498520670368316, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,>,2013-05-09), movie.id),movie.popularity)", "score": -0.22886097743451309, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.release_date,>,2013-05-09), movie.id),movie.popularity)", "score": -0.2621834005034097, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.popularity,>,2013-05-09), movie.id),movie.popularity)", "score": -0.298038954290787, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.release_date,>,2013-05-09), movie.id),movie.popularity)", "score": -0.3244456540772317, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,>,2013-05-09), movie.id),movie.popularity)", "score": -0.3378070796386448, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.release_date,>,2013-05-09), movie.popularity),movie.popularity)", "score": -0.34171718256053407, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.release_date,>,2013-05-09), movie.id),movie.popularity)", "score": -0.34459934165090966, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),person.birth_day,>,2013-05-09), movie.id),movie.popularity)", "score": -0.35417585710279287, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.movie_id),movie.release_date,>,2013-05-09), movie.id),movie.popularity)", "score": -0.36381821539357234, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.release_date,>,2013-05-09), movie.id),movie.popularity)", "score": -0.3834701426744625, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar.id),movie.release_date,>,2013-05-09), movie.id),movie.popularity)", "score": -0.40242564110947815, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.popularity,>,2013-05-09), movie.id),movie.popularity)", "score": -0.41037029684887955, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.movie_id),movie.release_date,>,2013-05-09), movie.id),movie.popularity)", "score": -0.41053867240544456, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies released after 2013-05-09?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,>,2013-05-09), movie.popularity),movie.popularity)", "score": -0.42669332036119795, "correct_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),filter(getData(movie),movie.release_date,>,2013-05-09),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 31, "beams": [{"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)", "score": -0.10004003538015713, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.budget),movie.budget)", "score": -0.1432077571474204, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.id),movie.budget)", "score": -0.14841996115977782, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.budget),movie.budget)", "score": -0.2490867222907624, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)", "score": -0.25406000514463206, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.budget)", "score": -0.33133381575540855, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)", "score": -0.34798480859665987, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,<,Alhambra, Kalifornien), movie.id),movie.budget)", "score": -0.35101721945987674, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)", "score": -0.3523516417258871, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.budget),movie.budget)", "score": -0.3786205441973664, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_day,=,Alhambra, Kalifornien), movie.id),movie.budget)", "score": -0.3854611046981559, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.release_date),movie.budget)", "score": -0.39426256950432786, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.budget),movie.budget)", "score": -0.39513829301832404, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)", "score": -0.40902535854713706, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,!=,Alhambra, Kalifornien), movie.id),movie.budget)", "score": -0.41209615383784276, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 32, "beams": [{"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fame),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2095480937706744, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Fame),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2174444681322929, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fame),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2713861865704691, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),has_genre.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2763304451661093, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Fame),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2905480398599998, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),has_genre.genre_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.30137922939162226, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Fame),getData(genre),has_genre.movie_id,genre.id), genre.name),genre.name))", "score": -0.3052468292513055, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),has_genre.movie_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3246757157003056, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.title,=,Fame),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3274749026129575, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),has_genre.movie_id,genre.id), genre.name),genre.name))", "score": -0.3295271709956931, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),has_genre.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.33026537264240774, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.release_date,=,Fame),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.33709902742358405, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.original_language,=,Fame),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3380240493406673, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),has_genre.genre_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3497245163194148, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),movie.release_date,=,Fame),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3638666772480527, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 33, "beams": [{"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2012-04-19), movie.runtime),movie.runtime))", "score": -0.08039396406456945, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2012-04-19), movie.runtime),movie.runtime))", "score": -0.11908950806900975, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,2012-04-19), movie.runtime),movie.runtime))", "score": -0.47752817125365254, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2012-04-19), movie.runtime),movie.runtime))", "score": -0.7206806704525661, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2012-04-19), movie.title),movie.runtime))", "score": -0.7853128866881889, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,2012-04-19), movie.runtime),movie.runtime))", "score": -0.816900659341627, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2012-04-19), movie.title),movie.runtime))", "score": -0.8240084306926292, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2012-04-19), movie.runtime),movie.runtime))", "score": -0.8344772622112941, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,!=,2012-04-19), movie.runtime),movie.runtime))", "score": -0.8437839038560924, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,2012-04-19), movie.runtime),movie.runtime))", "score": -0.8555962033460673, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,null,2012-04-19), movie.runtime),movie.runtime))", "score": -0.8784886166577053, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,<,2012-04-19), movie.runtime),movie.runtime))", "score": -0.8824794478605327, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2012-04-19), movie.runtime),movie.release_date))", "score": -0.886525635713042, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,2012-04-19), movie.runtime),movie.runtime))", "score": -0.8912801630685863, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that released not before 2012-04-19.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2012-04-19), movie.vote_count),movie.runtime))", "score": -0.8988600926131767, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2012-04-19), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 34, "beams": [{"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))", "score": -0.015280672800145112, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,24.1536), movie.vote_count),movie.vote_count))", "score": -0.4329639752249932, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,24.1536), movie.vote_count),movie.vote_count))", "score": -0.5455172736983513, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_average))", "score": -0.606502241207636, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,24.1536), movie.vote_count),movie.vote_count))", "score": -0.658258903058595, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_average),movie.vote_count))", "score": -0.7162292005814379, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,24.1536), movie.vote_count),movie.vote_count))", "score": -0.7351530869345879, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.revenue))", "score": -0.7487065854802495, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,24.1536), movie.vote_count),movie.vote_count))", "score": -0.7840762019477552, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,24.1536), movie.vote_count),movie.vote_count))", "score": -0.7974461992125725, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.original_language))", "score": -0.814283675266779, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,24.1536), movie.vote_count),movie.vote_count))", "score": -0.8213438272796338, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.revenue),movie.vote_count))", "score": -0.8317150475777453, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,24.1536), movie.vote_count),movie.vote_count))", "score": -0.835862445863313, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts of movies with a popularity of 24.1536?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,24.1536), movie.vote_count),movie.vote_count))", "score": -0.8621818304382032, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,24.1536), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 35, "beams": [{"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Def-Con 4), movie.original_language),movie.original_language))", "score": -0.045847385885281255, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))", "score": -0.2743963932116458, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,Def-Con 4), movie.original_language),movie.original_language))", "score": -0.3328915571291873, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Def-Con 4),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.4927359663845357, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Def-Con 4),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.5374526828745363, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Def-Con 4),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.5946510578757481, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.release_date,=,Def-Con 4), movie.original_language),movie.original_language))", "score": -0.621812966197552, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),genre.name,=,Def-Con 4), movie.original_language),movie.original_language))", "score": -0.6344437038023898, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Def-Con 4),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.6393677743657487, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Def-Con 4),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1), movie.original_language),movie.original_language))", "score": -0.663529594576814, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.release_date,=,Def-Con 4), movie.popularity),movie.original_language))", "score": -0.6758316689952022, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.budget,=,Def-Con 4), movie.original_language),movie.original_language))", "score": -0.675837658546819, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.release_date,=,Def-Con 4), movie.original_language),movie.original_language))", "score": -0.6760957541737728, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),company.name,=,Def-Con 4), movie.original_language),movie.original_language))", "score": -0.677233282240195, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie with the title Def-Con 4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Def-Con 4), movie.original_language),movie.original_language))", "score": -0.6917802130301425, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Def-Con 4), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 36, "beams": [{"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),person.birth_place))", "score": -0.26683930031259945, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),person.death_place))", "score": -0.30510481468413186, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),person.birth_day))", "score": -0.3306393053146705, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),movie.release_date))", "score": -0.3404456575570131, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.oscar_id), oscar.category),person.birth_place))", "score": -0.34202085642405405, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),person.birth_place))", "score": -0.34859941599843364, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),oscar.category))", "score": -0.3600722989477361, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.oscar_id), oscar.category),person.death_place))", "score": -0.38028637079558647, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),person.death_place))", "score": -0.38686493036996605, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),person.death_day))", "score": -0.3950031536063215, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),person.name))", "score": -0.3952158417746357, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),person.gender))", "score": -0.3983885274454605, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.movie_id), oscar.category),person.birth_place))", "score": -0.39853811712149995, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (short subject)),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.category),person.birth_place))", "score": -0.40163140671615427, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}, {"orig_question": "Did someone win an oscar in the category of documentary (short subject)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),person.birth_place))", "score": -0.4023763603226378, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (short subject)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 37, "beams": [{"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.21666666253500488, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.24442009002330758, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.25679881141268257, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.2845522389009853, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.person_id),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.31361636547827204, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.3139292978868695, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.3268597704796584, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.3546131979679611, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.35478931007989484, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.35510224248849226, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.36699191935733605, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.3947453468456388, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),genre.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,!=,Leehom Wang), movie.id),movie.budget)", "score": -0.44680782205143577, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,Leehom Wang),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.budget)", "score": -0.49479276107969317, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}, {"orig_question": "Whats the total budget of movies with a oscar nominee other than Leehom Wang?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,Leehom Wang),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget)", "score": -0.49858015740828665, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,!=,Leehom Wang), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 38, "beams": [{"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.03856912466289941, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.name),person.birth_day))", "score": -0.3371484785020584, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.4382891153462399, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien),getData(person),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.48050972427282507, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_place),person.birth_day))", "score": -0.49134483026864473, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_place))", "score": -0.505151659497642, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien),getData(person),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.5113948692230721, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(getData(movie),getData(crew),movie.id,crew.movie_id),cast.movie_id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.5120016326948398, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(getData(movie),getData(person),movie.id,crew.movie_id),cast.movie_id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.5164704931177473, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.movie_id,movie.id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.5194941358713844, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien),getData(person),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.5390300021080721, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(getData(movie),getData(crew),movie.id,crew.movie_id),cast.movie_id,movie.id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.5398451303042727, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.movie_id,person.id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.5451172340158585, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.movie_id,person.id),person.death_place,!=,Livigno, Italien),getData(person),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))", "score": -0.5455712819407608, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}, {"orig_question": "What are the persons birthdays from people which did not died in Livigno, Italien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien),getData(person),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Livigno, Italien), person.name),person.birth_day))", "score": -0.61604653312374, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Livigno, Italien), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 39, "beams": [{"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.budget,=,150000), movie.budget),movie.budget))", "score": -0.2250967081558021, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<,150000),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(getData(movie),movie.budget,!=,150000),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.25816368820510877, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<,150000),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),filter(getData(movie),movie.budget,!=,150000),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.26082063901566327, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<,150000),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.292285260067715, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<,150000),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar_nominee.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.29447102713996987, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.budget,<,150000), movie.budget),movie.budget))", "score": -0.29636271911656054, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.budget,<,150000),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.budget),movie.budget))", "score": -0.2988851605948989, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.budget,<,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.budget))", "score": -0.3159728979923315, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.budget,<,150000),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.budget),movie.title))", "score": -0.31995671987090546, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<,150000),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(getData(movie),movie.budget,!=,150000),oscar_nominee.movie_id,movie.id), movie.budget),movie.title))", "score": -0.32855263183949945, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<,150000),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar_nominee.movie_id,movie.id), movie.title),movie.budget))", "score": -0.32917862982153695, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),movie.budget,<,150000),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.budget))", "score": -0.3296800355988728, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<,150000),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),filter(getData(movie),movie.budget,!=,150000),oscar_nominee.movie_id,movie.id), movie.budget),movie.title))", "score": -0.33120958265005396, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<,150000),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar_nominee.movie_id,movie.id), movie.title),movie.budget))", "score": -0.3313643968937919, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with a budget of less that 150000 that were nominated for an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,<,150000),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.budget))", "score": -0.3413438179550586, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.budget,<,150000), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 40, "beams": [{"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.1344192338796446, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_count,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.13581770557932624, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.15275648538204484, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.budget,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.2695424728405688, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.name,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.3157741737577075, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_average,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.32768499964693326, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.3383085937889151, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.3387349772097049, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.revenue,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.36452719237643644, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,The Young Unknowns), keyword.name),person.death_place))", "score": -0.36524045350122164, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_count,!=,The Young Unknowns), keyword.name),person.death_place))", "score": -0.3666389252009033, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.homepage,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.3784326984391495, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.title,!=,The Young Unknowns), keyword.name),person.death_place))", "score": -0.38357770500362187, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),language.name,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.38462132290462786, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are linked to movies other than the young unknowns?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),has_keyword.keyword_id,!=,The Young Unknowns), keyword.name),keyword.name))", "score": -0.39038351964789914, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,The Young Unknowns), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 41, "beams": [{"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,!=,10),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.27802730014996546, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.2840081834681663, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,10),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.name),person.name))", "score": -0.2865538449148237, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,!=,10),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.29535649062263936, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.vote_average,!=,10),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.29963157739052754, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),oscar.sub_category,!=,10),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.name),person.name))", "score": -0.3123567978387428, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.vote_average,!=,10),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.3169607678632015, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,!=,10),getData(person),oscar_nominee.oscar_id,person.id), person.name),person.name))", "score": -0.3175117268693934, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,!=,10),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.3213278642446464, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,!=,10),getData(person),oscar_nominee.oscar_id,person.id), person.name),person.name))", "score": -0.33484091734206733, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,!=,10),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.3386570350585664, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),movie.vote_average,!=,10),getData(person),oscar_nominee.oscar_id,person.id), person.name),person.name))", "score": -0.33911598445120156, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.oscar_id),movie.vote_average,!=,10),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.34293205731251564, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,10),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.oscar_id), person.name),person.name))", "score": -0.34734201470517295, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of the persons in movies nominated for an oscar where the movie vote average is not 10?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,10),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.movie_id), person.name),person.name))", "score": -0.3620302426385981, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,10),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 42, "beams": [{"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)", "score": -0.23694625594116636, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,6.00342), movie.id),movie.vote_count)", "score": -0.29277153629853464, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,6.00342), movie.id),movie.vote_count)", "score": -0.37037767081730055, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.popularity,<=,6.00342),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.vote_count)", "score": -0.4050537291284929, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.popularity,<=,6.00342),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.runtime)", "score": -0.422589454115359, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.popularity,<=,6.00342),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,oscar_winner.movie_id), movie.id),movie.vote_count)", "score": -0.4284131818163346, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.popularity,<=,6.00342),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,oscar_winner.movie_id), movie.id),movie.runtime)", "score": -0.4459489068032006, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_average)", "score": -0.47210975932254273, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.popularity,<=,6.00342),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.vote_count)", "score": -0.4753614998802837, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.popularity,<,6.00342),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.vote_count)", "score": -0.48895513852908123, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.popularity,<=,6.00342),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.runtime)", "score": -0.4928972248671497, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.popularity,<=,6.00342),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.vote_average)", "score": -0.4973638444479872, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.popularity,<=,6.00342),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,oscar_winner.movie_id), movie.id),movie.vote_count)", "score": -0.4987209525681253, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,>,6.00342), movie.id),movie.vote_count)", "score": -0.5002240131090695, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}, {"orig_question": "How much is the average of all votes from the movies with a popularity up to 6.00342?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.popularity,<,6.00342),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.runtime)", "score": -0.5064908635159473, "correct_code": "avg(distinct(filter(getData(movie),movie.popularity,<=,6.00342), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 43, "beams": [{"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), movie.original_language),movie.original_language))", "score": -0.12088230560846668, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))", "score": -0.18525448167929426, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), language.name),movie.original_language))", "score": -0.1858547597667683, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), movie.original_language),movie.original_language))", "score": -0.2829115186109842, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), movie.original_language),movie.original_language))", "score": -0.2955327132962142, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.runtime,!=,81), movie.original_language),movie.original_language))", "score": -0.31091011955022146, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), keyword.name),movie.original_language))", "score": -0.339164882359548, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), language.name),movie.original_language))", "score": -0.34788397276928584, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), language.name),movie.original_language))", "score": -0.3605051674545159, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), country.name),movie.original_language))", "score": -0.3648575779161312, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),movie.id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), movie.original_language),movie.original_language))", "score": -0.37134135171397953, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.runtime,!=,81), language.name),movie.original_language))", "score": -0.37588257370852307, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.runtime,!=,81), movie.original_language),movie.original_language))", "score": -0.3775494693568305, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(spoken_language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), movie.original_language),movie.original_language))", "score": -0.3799333767986639, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}, {"orig_question": " What are the original languages of the movies with a runtime of not 81?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,!=,81), movie.original_language),movie.original_language))", "score": -0.3853485785378018, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,81), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 44, "beams": [{"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.original_language))", "score": -0.2487582229405234, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.original_language),movie.original_language))", "score": -0.2770288922220061, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))", "score": -0.3386497684150527, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.original_language),movie.title))", "score": -0.3669204376965354, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.budget),movie.original_language))", "score": -0.40556911009844043, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.budget),movie.title))", "score": -0.4954606555729697, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.vote_count),movie.original_language))", "score": -0.4998265840440581, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.budget))", "score": -0.5349695869117568, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.vote_count))", "score": -0.5513512678771804, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.original_language),movie.budget))", "score": -0.5632402561932395, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.original_language),movie.vote_count))", "score": -0.5796219371586631, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.vote_count),movie.title))", "score": -0.5897181295185874, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.release_date),movie.original_language))", "score": -0.6088794209390471, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,tr),movie.original_language), movie.original_language))", "score": -0.6174014007119695, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.revenue),movie.original_language))", "score": -0.6313085295587371, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 45, "beams": [{"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "score": -0.011167346845468273, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.title),movie.runtime))", "score": -0.5810010124660039, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,2998), movie.runtime),movie.runtime))", "score": -0.6221073144079128, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,2998),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.runtime),movie.runtime))", "score": -0.6530016871752629, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.release_date),movie.runtime))", "score": -0.6609658290362859, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,2998),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,cast.movie_id), movie.runtime),movie.runtime))", "score": -0.6954508356215914, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,2998),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.vote_count), movie.runtime),movie.runtime))", "score": -0.7136477402340365, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,2998),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,movie.vote_count), movie.runtime),movie.runtime))", "score": -0.7560968886803651, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2998), movie.runtime),movie.runtime))", "score": -0.7654760354162136, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,2998), movie.runtime),movie.runtime))", "score": -0.7973844884509163, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.vote_count))", "score": -0.8036886005393171, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.vote_count),movie.runtime))", "score": -0.8162410546756291, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,2998), movie.runtime),movie.runtime))", "score": -0.8177193873525539, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.id),movie.runtime))", "score": -0.8278017331576848, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,2998), movie.runtime),movie.runtime))", "score": -0.8436390637034492, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 46, "beams": [{"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.04022356405112258, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.15499143156226905, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.name), genre.name),genre.name))", "score": -0.337421208997871, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3534064728893531, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.35656631567254393, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3848716773456212, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),person.death_place))", "score": -0.3912428014996003, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,spoken_language.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.39423785446872806, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(has_genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.40924300242007, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.41915849344392625, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,production_company.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.42223404651840046, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.428842099220597, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,movie.id), genre.name),genre.name))", "score": -0.4318424853881561, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(spoken_language),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4321217377107015, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),company.name))", "score": -0.43728466198339433, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 47, "beams": [{"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.14166472338009028, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.revenue,<,127869379), movie.release_date),person.birth_day))", "score": -0.1958797789194258, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,127869379),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(person),person.gender,<,f),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.22014107702930918, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.25902152315722554, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(person),person.gender,<,f),oscar_nominee.person_id,person.id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.2748954977655562, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,127869379),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.28044105487835663, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,127869379),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.person_id), person.birth_day),person.birth_day))", "score": -0.2835445783534953, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,127869379),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.person_id), person.birth_day),person.birth_day))", "score": -0.2841565802825625, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.revenue,<,127869379), person.birth_place),person.birth_day))", "score": -0.29591588781852934, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(person),person.gender,<,f),oscar_nominee.person_id,person.id),movie.revenue,<,127869379), movie.release_date),person.birth_day))", "score": -0.30015039258985793, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,127869379),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(person),person.birth_day,<,f),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.3004256025964158, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,127869379),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(person),person.gender,<=,f),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.33668177644019387, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<,127869379),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.34043101037864176, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.revenue,<,127869379), movie.popularity),person.birth_day))", "score": -0.34528991041431767, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(person),person.gender,<,f),oscar_nominee.movie_id,person.id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.34954781881257385, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 48, "beams": [{"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.14904661725449841, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.3110601979430189, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.3286834080619221, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.3353274156559442, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.3453301706424727, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.3761619413575216, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(movie),oscar_winner.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.3937851514764248, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.40042915907044696, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.40459788699572014, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),oscar_winner.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.4104319140569754, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(movie),production_country.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.42222111843468035, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.4288651177221868, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.4388678696629928, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.44302005383360665, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.4646874746977119, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 49, "beams": [{"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.sub_category),oscar.sub_category))", "score": -0.19370011744692353, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.sub_category),movie.title))", "score": -0.21907362572211855, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), movie.title),oscar.sub_category))", "score": -0.2328797282647302, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), movie.title),movie.title))", "score": -0.2582532365399252, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.sub_category),oscar.sub_category))", "score": -0.2674949747868717, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.sub_category),movie.title))", "score": -0.3205446416732809, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), movie.title),oscar.sub_category))", "score": -0.3226847545394274, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.sub_category),company.name))", "score": -0.3321600461246884, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),movie.title))", "score": -0.3420718514031199, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.sub_category),movie.runtime))", "score": -0.3440349524247805, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.status),movie.title))", "score": -0.34734333020742186, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), movie.runtime),oscar.sub_category))", "score": -0.34795708094088507, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), movie.title),company.name))", "score": -0.37133965694249504, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), movie.runtime),movie.title))", "score": -0.3733305892160801, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "Find the sub categories of Oscar that have won the movies with the status of released. ", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released),movie.status,=,Released), oscar.sub_category),oscar.sub_category))", "score": -0.41255834110251116, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 50, "beams": [{"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))", "score": -0.05914984972332604, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1942-11-12), person.birth_place),person.birth_place))", "score": -0.2857429902360309, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1942-11-12),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.birth_place),person.birth_place))", "score": -0.3284136692134861, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))", "score": -0.39917905058054637, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1942-11-12),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.birth_place),person.birth_place))", "score": -0.447826189132114, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1942-11-12),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.birth_place),person.birth_place))", "score": -0.44822288285057565, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1942-11-12),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.birth_place),person.birth_place))", "score": -0.4500887189971055, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1942-11-12),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.4548862080776044, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1942-11-12),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.birth_place),person.death_place))", "score": -0.47456266041350226, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.death_place))", "score": -0.4889951777004171, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1942-11-12),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id), person.birth_place),person.birth_place))", "score": -0.49801987987309376, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1942-11-12),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.birth_place),person.birth_place))", "score": -0.49959953104443056, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1942-11-12),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,cast.person_id), person.birth_place),person.birth_place))", "score": -0.49995071284399156, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))", "score": -0.5374980141040064, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of persons who died after 1942-11-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1942-11-12),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.birth_place),person.birth_place))", "score": -0.5695012478106274, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1942-11-12), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 51, "beams": [{"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "score": -0.02740877732867375, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.popularity),movie.revenue))", "score": -0.3773642848827876, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "score": -0.5827021262230119, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,69), movie.revenue),movie.revenue))", "score": -0.6079614528571256, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), person.gender),movie.revenue))", "score": -0.6100455890991725, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,69), movie.revenue),movie.revenue))", "score": -0.6203831800376065, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.vote_average),movie.revenue))", "score": -0.6766327391960658, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,69), movie.revenue),movie.revenue))", "score": -0.6823360690032132, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),person.gender))", "score": -0.7141829608590342, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.popularity))", "score": -0.7357370136887766, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.original_language),movie.revenue))", "score": -0.73733905662084, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,69), movie.revenue),movie.revenue))", "score": -0.75324553711107, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), cast.person_id),movie.revenue))", "score": -0.759182728419546, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.id),movie.revenue))", "score": -0.7664043079712428, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What are the distinct revenues of movies with a runtime of 69 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,69), movie.revenue),movie.revenue))", "score": -0.7673101791297086, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 52, "beams": [{"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_day,=,1988-02-28), person.birth_day),person.death_day))", "score": -0.33419124027042635, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_day,=,1988-02-28), person.birth_day),person.death_place))", "score": -0.3638513271011529, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "score": -0.37119971836970433, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.birth_day,=,1988-02-28), person.birth_day),person.death_day))", "score": -0.3760732685535378, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_day,=,1988-02-28), person.birth_day),person.death_day))", "score": -0.382426481644509, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),person.id,crew.person_id),person.birth_day,=,1988-02-28), person.birth_day),person.death_place))", "score": -0.39639982057074785, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,=,1988-02-28), person.birth_day),person.death_place))", "score": -0.3990780361717905, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),person.id,crew.person_id),person.birth_day,=,1988-02-28), person.birth_day),person.death_day))", "score": -0.3997466686025717, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_day,=,1988-02-28), person.death_day),person.death_place))", "score": -0.4008598052004309, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,=,1988-02-28), person.birth_day),person.death_day))", "score": -0.4024248842036144, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.birth_day,=,1988-02-28), person.birth_day),person.death_place))", "score": -0.4057333553842644, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_day,=,1988-02-28), person.birth_day),person.death_place))", "score": -0.4120865684752356, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "score": -0.4130817466528158, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_day,=,1988-02-28), person.death_day),person.death_day))", "score": -0.419434959743787, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}, {"orig_question": "In which days did person born in 1988-02-28 died ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),crew.movie_id,movie.id),person.birth_day,=,1988-02-28), person.birth_day),person.death_day))", "score": -0.4789342195657695, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1988-02-28), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 53, "beams": [{"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))", "score": -0.10770275139657315, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))", "score": -0.1579589962348109, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,<,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))", "score": -0.3535154580458766, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_day),person.death_place))", "score": -0.4265424224868184, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Schl\u00fcchtern, Hessen), person.death_day),person.death_place))", "score": -0.47679866732505616, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_day))", "score": -0.5050854699074989, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Schl\u00fcchtern, Hessen), person.death_place),person.death_day))", "score": -0.5553417147457367, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.birth_place),person.death_place))", "score": -0.6479480180278188, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,<,Schl\u00fcchtern, Hessen), person.death_day),person.death_place))", "score": -0.6723551291361218, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.gender),person.death_place))", "score": -0.6788053426280385, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,>,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))", "score": -0.679654461084283, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Schl\u00fcchtern, Hessen), person.birth_place),person.death_place))", "score": -0.6982042628660565, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.gender))", "score": -0.7188171462476021, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Schl\u00fcchtern, Hessen), person.gender),person.death_place))", "score": -0.7290615874662763, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}, {"orig_question": "What are people death places excluding people who were born in Schl\u00fcchtern, Hessen ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))", "score": -0.7406936436746037, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Schl\u00fcchtern, Hessen), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 54, "beams": [{"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(company),company.name,=,MVL Incredible Productions),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),movie.runtime),movie.runtime))", "score": -0.10104335132170363, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,MVL Incredible Productions),movie.popularity),movie.runtime))", "score": -0.24628455186190712, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,MVL Incredible Productions),movie.popularity),movie.runtime))", "score": -0.2619497557849148, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,MVL Incredible Productions),movie.runtime),movie.runtime))", "score": -0.30853825019220965, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.runtime),movie.runtime))", "score": -0.3240153344999082, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(company),company.name,=,MVL Incredible Productions),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),movie.vote_average),movie.runtime))", "score": -0.3369686407831119, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(company),company.name,=,MVL Incredible Productions),getData(production_company),company.id,production_company.company_id),filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),movie.title,=,MVL Incredible Productions),production_company.movie_id,movie.id),movie.runtime),movie.runtime))", "score": -0.3561612451117168, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,MVL Incredible Productions),movie.runtime),movie.runtime))", "score": -0.36078944731842644, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(company),company.name,=,MVL Incredible Productions),getData(production_company),company.id,production_company.company_id),filter(getData(company),movie.title,=,MVL Incredible Productions),production_company.movie_id,movie.id),movie.runtime),movie.runtime))", "score": -0.3656257441433133, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,MVL Incredible Productions),movie.status),movie.runtime))", "score": -0.3788771078016272, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))", "score": -0.3870198886914707, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,MVL Incredible Productions),movie.release_date),movie.runtime))", "score": -0.38931828416838565, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,MVL Incredible Productions),movie.release_date),movie.runtime))", "score": -0.39614318650984914, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),person.birth_day),movie.runtime))", "score": -0.40101826796849366, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the most popular movie produced by MVL Incredible Productions?", "inferred_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.release_date),movie.runtime))", "score": -0.4067066408300032, "correct_code": "done(extractValues(max(merge(filter(getData(company),company.name,=,MVL Incredible Productions),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.popularity),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 55, "beams": [{"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "score": -0.04740196425851865, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.4563535569531594, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_count),movie.vote_count)", "score": -0.55970221754378, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,production_country.movie_id),movie.status,=,Rumored), movie.id),movie.vote_count)", "score": -0.5599530831611789, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,oscar_winner.movie_id),movie.status,=,Rumored), movie.id),movie.vote_count)", "score": -0.5836299115762056, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,production_country.movie_id), movie.id),movie.vote_count)", "score": -0.5847526553569448, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,production_country.movie_id),movie.status,=,Rumored), movie.id),movie.vote_count)", "score": -0.5961430358491661, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,production_country.movie_id),movie.status,=,Rumored), movie.id),movie.vote_count)", "score": -0.6036057422197186, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,production_country.movie_id), movie.id),movie.vote_count)", "score": -0.6047433810253308, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,production_country.movie_id),movie.status,=,Rumored), movie.id),movie.vote_count)", "score": -0.60483321760755, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,production_country.movie_id), movie.id),movie.vote_count)", "score": -0.6256418125705258, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.revenue)", "score": -0.6273187683683797, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.id), movie.id),movie.vote_count)", "score": -0.6275645468698717, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,oscar_winner.movie_id), movie.id),movie.vote_count)", "score": -0.6403998490064323, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies with a movie status of \"Rumoured\"?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.popularity), movie.id),movie.vote_count)", "score": -0.6450680973238103, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 56, "beams": [{"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)", "score": -0.03417257435035865, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(filter(getData(movie),movie.release_date,<,1983-07-29),movie.budget)", "score": -0.5126971303538091, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.revenue)", "score": -0.6496266402167111, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<=,1983-07-29), movie.id),movie.budget)", "score": -0.6640840608150168, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,1983-07-29), movie.id),movie.budget)", "score": -0.7106346694665875, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.release_date),movie.budget)", "score": -0.7865955008342759, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,1983-07-29), movie.id),movie.budget)", "score": -0.7971121754065152, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.vote_count)", "score": -0.7988067120621171, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1983-07-29), movie.id),movie.budget)", "score": -0.8347307131111372, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.budget),movie.budget)", "score": -0.8423644296349809, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,!=,1983-07-29), movie.id),movie.budget)", "score": -0.8718864552989426, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(filter(getData(movie),movie.release_date,<,1983-07-29),movie.revenue)", "score": -0.8809435332309365, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),person.birth_day,<,1983-07-29), movie.id),movie.budget)", "score": -0.8952413341556408, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.release_date)", "score": -0.9085194236029174, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies released before 1983-07-29?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.runtime)", "score": -0.9129823793056587, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,<,1983-07-29), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 57, "beams": [{"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))", "score": -0.010714878895669244, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.popularity),movie.revenue))", "score": -0.5714133038272848, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.budget),movie.revenue))", "score": -0.6759190811862936, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>=,142), movie.revenue),movie.revenue))", "score": -0.708643984326045, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.id),movie.revenue))", "score": -0.73198613068962, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.vote_count))", "score": -0.7397112595936051, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), person.gender),movie.revenue))", "score": -0.789947236989974, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.release_date),movie.revenue))", "score": -0.8149160399188986, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.budget))", "score": -0.8192895400425186, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.original_language),movie.revenue))", "score": -0.8201648845424643, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.vote_count),movie.revenue))", "score": -0.8428150667896261, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,142), movie.revenue),movie.revenue))", "score": -0.8606429193023359, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,142), movie.revenue),movie.revenue))", "score": -0.8903453464590712, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,142), movie.revenue),movie.revenue))", "score": -0.8936681861960096, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,>,142), movie.revenue),movie.revenue))", "score": -0.8975555989745772, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 58, "beams": [{"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))", "score": -0.012008169909677235, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,ar), movie.revenue),movie.revenue))", "score": -0.5724050663520757, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.popularity),movie.revenue))", "score": -0.5819200559162709, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id), movie.revenue),movie.revenue))", "score": -0.7111269781777809, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ar),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id), movie.revenue),movie.revenue))", "score": -0.7302777432509764, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,ar), movie.revenue),movie.revenue))", "score": -0.7335194014121953, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))", "score": -0.7630568520035013, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),person.gender))", "score": -0.7803411502500239, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.budget),movie.revenue))", "score": -0.7817452831768605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), person.gender),movie.revenue))", "score": -0.7822425051235768, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.popularity))", "score": -0.7943017501493159, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.vote_count),movie.revenue))", "score": -0.8034220023655507, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,ar), movie.revenue),movie.revenue))", "score": -0.8140662378391426, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.vote_count))", "score": -0.835991384472436, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies with the original language ar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.original_language))", "score": -0.8486295361180964, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ar), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 59, "beams": [{"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.vote_count,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.18161664076646888, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))", "score": -0.2262066169519654, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.vote_count,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.birth_place))", "score": -0.24786080033396538, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.runtime,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.257139543903037, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.title,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.26698539212982964, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.name))", "score": -0.27186450376173543, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.runtime,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.birth_place))", "score": -0.3233837034705335, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.vote_count,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.birth_place),person.name))", "score": -0.33131666966071177, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.budget,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.33206596389701243, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.title,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.birth_place))", "score": -0.33322955169732615, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.vote_count,!=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.34732652184032725, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.birth_place))", "score": -0.34977025055235444, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.36208704968675964, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),person.death_day,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.36312577615752983, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}, {"orig_question": "What is the person's name who was cast for the movie with the homepage http://nimbusfilm.dk/film/festen/?lang=en?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),company.name,=,http://nimbusfilm.dk/film/festen/?lang=en),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.363955683467791, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.homepage,=,http://nimbusfilm.dk/film/festen/?lang=en),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 60, "beams": [{"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.06740991172046051, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.24560127180666314, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.414121558485931, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),country.name,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.5288193128690182, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),oscar.sub_category,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.5345359943494259, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.death_day),person.birth_day))", "score": -0.5675623249881028, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.6166541514103301, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.6206712625607906, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.death_day))", "score": -0.6785340491369425, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.679162263233593, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_day),person.birth_place))", "score": -0.6810597959592997, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.original_language,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.683946301756805, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),keyword.name,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.702225556193298, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Serge Houde), person.birth_day),person.birth_day))", "score": -0.7183139823064266, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth days of those whose name is different from Serge Houde?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Serge Houde), person.birth_place),person.birth_day))", "score": -0.7198951673381089, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Serge Houde), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 61, "beams": [{"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.06781192086054944, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.birth_place),person.death_place))", "score": -0.2354295398981776, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.3912958554865327, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.birth_place))", "score": -0.48305429713218473, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.489496342925122, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), company.name),person.death_place))", "score": -0.5387285198958125, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Milton, Ontario), person.birth_place),person.death_place))", "score": -0.5589134745241608, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.name),person.death_place))", "score": -0.626336380460998, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), keyword.name),person.death_place))", "score": -0.6348689045698848, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.birth_place),person.birth_place))", "score": -0.6506719161698129, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Milton, Ontario), person.birth_place),person.death_place))", "score": -0.6571139619627502, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_day),person.death_place))", "score": -0.6593041863234248, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),company.name))", "score": -0.6684599687287118, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),country.name,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.6721049897314515, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.6988084070326295, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 62, "beams": [{"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.1542950246899006, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,!=,Tulsa, Oklahoma),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.2414951831790792, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,Tulsa, Oklahoma),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.24478254108523004, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,!=,Tulsa, Oklahoma),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.24821660234195403, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_winner.movie_id,movie.id),movie.revenue,!=,235483004), genre.name),genre.name))", "score": -0.2658665684332899, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),movie.original_language,!=,235483004),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.26889626481517404, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.2731052856142088, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_winner.movie_id,movie.id),person.gender,!=,235483004), genre.name),genre.name))", "score": -0.2752336303125025, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.name,!=,235483004),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.2779082259256083, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id),movie.revenue,!=,235483004), genre.name),genre.name))", "score": -0.3079406186800547, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_winner.movie_id,movie.id),movie.popularity,!=,235483004), genre.name),genre.name))", "score": -0.32839578904427064, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,!=,Tulsa, Oklahoma),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.33119353718099875, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_winner.person_id,has_genre.genre_id),movie.revenue,!=,235483004), genre.name),genre.name))", "score": -0.3324242719925261, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),oscar_winner.movie_id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_winner.person_id,has_genre.movie_id),movie.revenue,!=,235483004), genre.name),genre.name))", "score": -0.34203766475585345, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}, {"orig_question": "How many genres are there for movies that generate a revenue of less than 235483004 and for which a person won an oscar who was not born in Tulsa, Oklahoma ?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),oscar_winner.movie_id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_winner.person_id,has_genre.movie_id),movie.revenue,!=,235483004),genre.name,!=,235483004), genre.name),None))", "score": -0.3960895960995166, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.birth_place,!=,Tulsa, Oklahoma),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.revenue,<,235483004), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 63, "beams": [{"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)", "score": -0.028575071905416607, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.budget),movie.budget)", "score": -0.5829954987100515, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<=,3462), movie.id),movie.budget)", "score": -0.6020599056427404, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(filter(getData(movie),movie.vote_count,<,3462),movie.budget)", "score": -0.6598057447519309, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,3462), movie.id),movie.budget)", "score": -0.7960169275408157, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.budget),movie.budget))", "score": -0.7970032109587919, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>,3462), movie.id),movie.budget)", "score": -0.8177070373969787, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_count,<,3462),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.budget),movie.budget)", "score": -0.8245507119982806, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<,3462), movie.id),movie.budget)", "score": -0.8313407621019313, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_count,<,3462),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.vote_count), movie.budget),movie.budget)", "score": -0.8538580082537451, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,<,3462), movie.id),movie.budget)", "score": -0.8692534888421936, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_count,<,3462),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.id),movie.budget)", "score": -0.9056107427662131, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.revenue,<,3462), movie.id),movie.budget)", "score": -0.9074617523614482, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,=,3462), movie.id),movie.budget)", "score": -0.9419886360979406, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.revenue)", "score": -0.9616853260409977, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 64, "beams": [{"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.1623503077109236, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.23918331701487444, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.3100988811031741, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.3781984466436974, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_day,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.4191134460174723, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.4344225831598222, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),person.id,cast.movie_id),person.death_day,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.4391761087104428, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_place,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.4457266517037667, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.46958336408346346, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),genre.name,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.47449381068695595, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_place,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.4866416510775416, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.48840058660654506, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),person.id,cast.movie_id),person.death_place,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.5067043229151933, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),movie.revenue,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.5077561569073532, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.5536524986265636, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 65, "beams": [{"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.runtime),movie.vote_average))", "score": -0.184284980828821, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.runtime),movie.vote_average))", "score": -0.2155944901063845, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.vote_average))", "score": -0.24043266797659604, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Italiano),getData(movie),spoken_language.movie_id,movie.id),movie.runtime),movie.vote_average))", "score": -0.282553898534904, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.runtime),movie.runtime))", "score": -0.2826535179292359, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))", "score": -0.29952310732634113, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),oscar.year),movie.vote_average))", "score": -0.30432667944353253, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.vote_average),movie.vote_average))", "score": -0.3134471726436631, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,Italiano),movie.runtime),movie.vote_average))", "score": -0.31753532376027177, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.runtime),movie.runtime))", "score": -0.32219812906285317, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.runtime))", "score": -0.3388012050770109, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue),movie.vote_average))", "score": -0.34038248657511416, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.runtime),movie.vote_count))", "score": -0.3424591731021355, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Italiano),getData(movie),spoken_language.movie_id,movie.id),movie.vote_average),movie.vote_average))", "score": -0.3618740267716867, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}, {"orig_question": "Find the voting average of the movie with the highest runtime between all the movies whose language is Italiano.", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.runtime))", "score": -0.36953249086527723, "correct_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Italiano),movie.runtime),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 66, "beams": [{"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.number),oscar.year))", "score": -0.1591555209323055, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.category),oscar.year))", "score": -0.19907850067185112, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.sub_category),oscar.year))", "score": -0.24066597769172596, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.year),oscar.year))", "score": -0.24965551496355626, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.number),oscar.year))", "score": -0.2739800213505944, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.number),oscar.year))", "score": -0.2995050313162644, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.number),oscar.number))", "score": -0.30500770371187447, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.number),oscar.category))", "score": -0.3290077838785784, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.category),oscar.year))", "score": -0.3314582085335125, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.category),oscar.year))", "score": -0.33942801105580994, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.category),oscar.number))", "score": -0.34493068345142003, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,person.id),movie.popularity,>=,1.03114), oscar.number),oscar.year))", "score": -0.3487390550845755, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.id),oscar.year))", "score": -0.35675466970248615, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.number),oscar.year))", "score": -0.3621328451477098, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.number),person.name))", "score": -0.3656643536696624, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 67, "beams": [{"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,War), company.name),company.name))", "score": -0.06622225630703825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,=,War), company.name),company.name))", "score": -0.12548808985005114, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,War), company.name),company.name))", "score": -0.21730125320200355, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),company.name,=,War), company.name),company.name))", "score": -0.24438962060869607, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.sub_category,=,War), company.name),company.name))", "score": -0.31336317055941065, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,=,War), company.name),company.name))", "score": -0.3244792644636986, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,War), company.name),production_company.company_id))", "score": -0.3414984784734054, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.category,=,War), company.name),company.name))", "score": -0.374379991039716, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),company.name,=,War),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3972868294703232, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,=,War), company.name),production_company.company_id))", "score": -0.4007643120164183, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,War), company.name),company.name))", "score": -0.4054189281955254, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,=,War), company.name),company.name))", "score": -0.4147064725180243, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),production_company.company_id,=,War), company.name),company.name))", "score": -0.4219709834830905, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),movie.title,=,War), company.name),company.name))", "score": -0.42605392600549336, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Is there a production company that made the movie called War?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,War),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.42952884609423236, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,War),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 68, "beams": [{"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,=,m), movie.id),movie.budget)", "score": -0.17104157136567819, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.gender,=,m),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget)", "score": -0.18167447626766475, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,=,m),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget)", "score": -0.18931128375323183, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.gender,=,m),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.budget),movie.budget)", "score": -0.24523298666544172, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget)", "score": -0.25171734672545354, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.gender,=,m),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.budget)", "score": -0.2554085232545115, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.gender,=,m),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)", "score": -0.26332434436085067, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,=,m),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)", "score": -0.2702889267564102, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.budget),movie.budget)", "score": -0.30276696311534335, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.budget)", "score": -0.3129424997044132, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget)", "score": -0.3310510876104974, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)", "score": -0.33269498972863193, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,=,m), movie.budget),movie.budget)", "score": -0.3485950265871035, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.gender,=,m),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.budget)", "score": -0.358660574306797, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget in movies where there is a male person that won an oscar ?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,=,m), movie.id),movie.budget)", "score": -0.3777359463558478, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,=,m), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 69, "beams": [{"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))", "score": -0.01849016507549095, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6.1), movie.revenue),movie.revenue))", "score": -0.4242211119963031, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.1), movie.revenue),movie.revenue))", "score": -0.4975404577089648, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.popularity),movie.revenue))", "score": -0.5988143916001718, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.1), movie.revenue),movie.revenue))", "score": -0.6550571756197314, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), person.gender),movie.revenue))", "score": -0.6635152335038583, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.budget),movie.revenue))", "score": -0.6883118982186716, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,6.1), movie.revenue),movie.revenue))", "score": -0.712523742182384, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.vote_count))", "score": -0.7800319863708864, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),person.gender))", "score": -0.7997824622543703, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), cast.person_id),movie.revenue))", "score": -0.8075158829560678, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.popularity))", "score": -0.8123309089096438, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), cast.movie_id),movie.revenue))", "score": -0.8198421831002634, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.original_language),movie.revenue))", "score": -0.8254220123162668, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}, {"orig_question": "What are the different revenues of movies that have a vote average of over 6.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>,6.1), movie.revenue),movie.revenue))", "score": -0.8427657471729617, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.1), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 70, "beams": [{"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.052705645121711636, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,2),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "score": -0.23856437335233294, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,2),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.death_place,!=,2),crew.person_id,person.id), person.death_place),person.death_place))", "score": -0.2528320512581125, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.30117862103418636, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.death_place))", "score": -0.31433213767312473, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,2),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_place,!=,2),crew.person_id,person.id), person.death_place),person.death_place))", "score": -0.3205332208207689, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,2),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.death_place,!=,2),crew.movie_id,person.id), person.death_place),person.death_place))", "score": -0.32196352860496685, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),oscar_nominee.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.32411378373222194, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.3324167559133223, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.33941670352139514, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.movie_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.34155851230117207, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,2),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,movie.id), person.death_place),person.death_place))", "score": -0.3569710683552719, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,2),getData(crew),movie.id,crew.movie_id),getData(person),crew.movie_id,person.id), person.death_place),person.death_place))", "score": -0.3666466806334035, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.id),person.death_place))", "score": -0.3707429575189987, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of the crew when the movie vote average is not 2.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.death_day),person.death_place))", "score": -0.3740627977455432, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,!=,2), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 71, "beams": [{"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,!=,1986-05-30), country.name),country.name))", "score": -0.07992032370294663, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,=,1986-05-30), country.name),country.name))", "score": -0.15777912095906368, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,>=,1986-05-30), country.name),country.name))", "score": -0.22284250377634035, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.runtime,!=,1986-05-30), country.name),country.name))", "score": -0.23814067140785827, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))", "score": -0.25900226567291074, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,!=,1986-05-30), country.name),country.name))", "score": -0.2783370839250213, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.death_day,!=,1986-05-30), country.name),country.name))", "score": -0.3035830439897145, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.runtime,=,1986-05-30), country.name),country.name))", "score": -0.3159994686639753, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.title,!=,1986-05-30), country.name),country.name))", "score": -0.3447713829604291, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,>,1986-05-30), country.name),country.name))", "score": -0.351596209004166, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,=,1986-05-30), country.name),country.name))", "score": -0.3561958811811384, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,>=,1986-05-30), country.name),country.name))", "score": -0.36256152230898997, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,=,1986-05-30), country.name),country.name))", "score": -0.36595162250671764, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,!=,1986-05-30), country.name),country.name))", "score": -0.3703703353336204, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}, {"orig_question": "How many production countries are there for movies which have not been released on 1986-05-30?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,!=,1986-05-30), country.name),country.name))", "score": -0.37798734381573046, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,!=,1986-05-30), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 72, "beams": [{"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.20691769479890354, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.gender,=,f),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.2520242862637543, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.2605073961193624, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.birth_place),person.birth_place))", "score": -0.2979662903709182, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.gender,!=,f),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.3147868151674827, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.3180540605740491, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,f),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.31944640501133137, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,oscar_winner.person_id),person.gender,=,f),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.3566187296873627, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,cast.person_id),person.gender,=,f),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.3664347143287643, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.gender,=,f),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.37033221568700075, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,!=,f),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.3822089339150598, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,cast.person_id),person.gender,=,f),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.3900329875454952, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id), person.birth_place),person.birth_place))", "score": -0.394325025009056, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.39506992048668305, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,f),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.4085167678848119, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 73, "beams": [{"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.05999650366303851, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.runtime,>,92),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.1476375202603321, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.17530538329866663, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.runtime,!=,92),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.25821359309976655, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,>,92), genre.name),genre.name))", "score": -0.2671203552835599, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),person.death_place))", "score": -0.3437790207495494, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.runtime,>,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.38355840382686607, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,production_company.movie_id), genre.name),genre.name))", "score": -0.39483324617030374, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),company.name))", "score": -0.4098622576338333, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,has_genre.movie_id),movie.runtime,>,92),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.42029525953411584, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.runtime,>,92),getData(genre),has_genre.genre_id,genre.id), genre.name),person.death_place))", "score": -0.4381483544143303, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.44884086046164967, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,92),merge(getData(production_company),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.44976398757559005, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),has_genre.genre_id))", "score": -0.4503496064185826, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.runtime,>,92),getData(genre),has_genre.genre_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.45317162732146044, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 74, "beams": [{"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Angela Grovey), person.death_place),person.death_place))", "score": -0.1767377003779984, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Angela Grovey), person.death_place),person.death_place))", "score": -0.23958972541004186, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Angela Grovey), person.death_place),person.birth_place))", "score": -0.26389601526170736, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Angela Grovey), person.death_place),person.birth_place))", "score": -0.3267480402937508, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Angela Grovey), person.birth_place),person.death_place))", "score": -0.341431890403328, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Angela Grovey), person.birth_place),person.death_place))", "score": -0.40428391543537145, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Angela Grovey), person.birth_place),person.birth_place))", "score": -0.42859020528703695, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Angela Grovey), person.birth_place),person.birth_place))", "score": -0.4914422303190804, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Angela Grovey), person.death_place),person.death_place))", "score": -0.5344764932742692, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Angela Grovey), person.death_place),company.name))", "score": -0.6081791937103844, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Angela Grovey), person.death_place),person.birth_place))", "score": -0.6216348081579781, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Angela Grovey), person.death_place),company.name))", "score": -0.6710312187424279, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Angela Grovey), company.name),person.death_place))", "score": -0.6719479754319764, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Angela Grovey), person.death_place),person.name))", "score": -0.6882803559055901, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}, {"orig_question": "At which place was Angela Grovey born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Angela Grovey), person.birth_place),person.death_place))", "score": -0.6991706832995987, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Angela Grovey), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 75, "beams": [{"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))", "score": -0.08505300979342795, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),movie.budget),movie.release_date))", "score": -0.1761171869250665, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,War),movie.budget),movie.release_date))", "score": -0.18640941782665618, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,War),movie.budget),movie.release_date))", "score": -0.19528869023149165, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))", "score": -0.2655243493054075, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.title))", "score": -0.30982550716400575, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.budget))", "score": -0.3640101099091004, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(genre),genre.name,=,War),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.budget),movie.release_date))", "score": -0.398022769942093, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),movie.budget),movie.title))", "score": -0.40162246240981386, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,War),movie.budget),movie.title))", "score": -0.42202275110551246, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,War),movie.budget),movie.title))", "score": -0.42508212361729675, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),movie.budget),movie.budget))", "score": -0.42809978922819414, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.title))", "score": -0.4327630638118832, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),has_genre.movie_id,has_genre.genre_id),movie.budget),movie.release_date))", "score": -0.44055910309092616, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.name,has_genre.genre_id),movie.budget),movie.release_date))", "score": -0.44226183692451304, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 76, "beams": [{"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.1979389278227682, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,sound),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.20598028400570215, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.25248930670207254, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,sound),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.2605306628850065, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,sound),merge(getData(oscar_winner),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.26072487644489745, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,sound),merge(getData(oscar_winner),getData(genre),has_genre.movie_id,genre.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.2641855613985738, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,sound),merge(getData(oscar_winner),getData(genre),has_genre.genre_id,movie.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.26841247923544925, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,sound),merge(getData(oscar_winner),getData(genre),has_genre.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.2718731641891256, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.status,=,sound),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.2734121702382032, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_winner.movie_id,movie.id), genre.name),genre.name))", "score": -0.28111372007408536, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,sound),merge(getData(oscar_winner),getData(genre),spoken_language.movie_id,genre.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.3076738173078611, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,sound),merge(getData(oscar_winner),getData(genre),production_country.movie_id,genre.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.3091313339364986, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3093937891473864, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,sound),merge(getData(oscar_winner),getData(genre),spoken_language.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.3153614200984129, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}, {"orig_question": "What are the genres of movies, which won an oscar in the sound category?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,sound),merge(getData(oscar_winner),getData(genre),production_country.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), genre.name),genre.name))", "score": -0.3168189367270504, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.category,=,sound), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 77, "beams": [{"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.release_date),movie.release_date))", "score": -0.15127965678766486, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,14.4037), movie.release_date),movie.release_date))", "score": -0.1632092880208802, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.title),movie.release_date))", "score": -0.32724956293895957, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,14.4037), movie.title),movie.release_date))", "score": -0.3391791941721749, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,14.4037), movie.release_date),movie.release_date))", "score": -0.40981802215173957, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.budget),movie.release_date))", "score": -0.5518722148735833, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,14.4037), movie.budget),movie.release_date))", "score": -0.5638018461067986, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.release_date),movie.budget))", "score": -0.5853517806281161, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,14.4037), movie.title),movie.release_date))", "score": -0.5857879283030343, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,14.4037), movie.release_date),movie.budget))", "score": -0.5972814118613314, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,crew.movie_id),movie.popularity,=,14.4037), movie.release_date),movie.release_date))", "score": -0.6202834362988398, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,production_country.movie_id),movie.popularity,=,14.4037), movie.release_date),movie.release_date))", "score": -0.623741888461085, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,14.4037), movie.release_date),movie.title))", "score": -0.6384112989653659, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,14.4037), movie.release_date),movie.title))", "score": -0.6503409301985812, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}, {"orig_question": "When were those movies with a popularity different from 14.4037 released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,14.4037),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,crew.movie_id), movie.popularity),movie.release_date))", "score": -0.7378231840762155, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,14.4037), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 78, "beams": [{"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.0677573001213024, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.13565524860295144, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,<,2006-06-21),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.id),oscar.year)", "score": -0.27398935943962766, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar_winner.oscar_id),oscar.year)", "score": -0.3036972707141809, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.year)", "score": -0.31956827695143836, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar_winner.movie_id),oscar.year)", "score": -0.3291403655269506, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,<,2006-06-21),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.year),oscar.year)", "score": -0.35593750349855524, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,<,2006-06-21),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), person.birth_day),oscar.year)", "score": -0.36572241787018644, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.number)", "score": -0.3660933471274153, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.year)", "score": -0.37837394537857616, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<=,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.39225157486685, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), movie.status),oscar.year)", "score": -0.40011917950731446, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.42395480170014965, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),movie.vote_average)", "score": -0.4289026085930689, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years of oscars with nominated people that died before 2006-06-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,<,2006-06-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.43399129560906435, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2006-06-21),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 79, "beams": [{"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))", "score": -0.017927149287061184, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,1.56371), movie.original_language),movie.original_language))", "score": -0.3408237145977182, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,1.56371), movie.original_language),movie.original_language))", "score": -0.6578626163300214, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,1.56371), movie.original_language),movie.original_language))", "score": -0.6673146830635233, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,1.56371), movie.original_language),movie.original_language))", "score": -0.6789827095108194, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))", "score": -0.6846851427638426, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))", "score": -0.7090563216443115, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,1.56371), movie.original_language),movie.original_language))", "score": -0.8108908064659772, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,>=,1.56371), movie.original_language),movie.original_language))", "score": -0.8427521713074384, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1.56371), movie.original_language),movie.original_language))", "score": -0.8565606005486188, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>=,1.56371), movie.original_language),movie.original_language))", "score": -0.864016664772862, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,1.56371), movie.original_language),movie.original_language))", "score": -0.8685033448036847, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.title))", "score": -0.8886746159168979, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.title),movie.original_language))", "score": -0.8922082777480682, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a movie popularity higher than or equal 1.56371?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),language.name))", "score": -0.903967618045499, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,1.56371), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 80, "beams": [{"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.16240869394791496, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.2147671653380238, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.24420454347850915, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.2527100939815966, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.26269907113452684, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.27089207713363356, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.2846684914472221, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.30506856537170546, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3140843079889853, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3150575425246357, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3232505485237424, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3345059435121908, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.33702695362176077, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3444949114495508, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3526879174486575, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 81, "beams": [{"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,strafzettel),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.0730662327280855, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.09824626384755532, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.2210588861811232, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.25308168099310907, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel),getData(movie),has_keyword.movie_id,movie.id),merge(getData(production_company),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.2669902817761523, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.2863367604905648, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel),getData(movie),has_keyword.movie_id,movie.id),merge(getData(movie),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.2913883131596592, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.30586619987967056, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.3255125054522116, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_genre),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.3492365526736281, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.37209446907464283, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), company.name),movie.title))", "score": -0.4082085453772539, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,strafzettel),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.original_language))", "score": -0.4089881762463644, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,strafzettel),getData(has_keyword),keyword.id,spoken_language.iso_639_1),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.4328861329243876, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,strafzettel),getData(has_keyword),keyword.name,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.44723519571385856, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 82, "beams": [{"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.012324337087193271, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.5836843279503228, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.6205282238624932, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,=,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.6661836739476712, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.667632126420358, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Spider-Man 2), movie.runtime),movie.release_date))", "score": -0.7756700707213895, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.8018178967140557, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.release_date,=,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.8226521128053719, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),crew.movie_id,=,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.8310710426267178, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Spider-Man 2), movie.runtime),movie.title))", "score": -0.842869122101547, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.8442394967969449, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Spider-Man 2), movie.title),movie.runtime))", "score": -0.8735510022343078, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(oscar),movie.release_date,=,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.8738592975969368, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Spider-Man 2), movie.release_date),movie.runtime))", "score": -0.881618729323236, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of Spider-Man 2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,Spider-Man 2), movie.runtime),movie.runtime))", "score": -0.8933707653159217, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Spider-Man 2), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 83, "beams": [{"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.02626917962687371, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Bangkok, Thailand),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.24913256971847356, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.26892459357508036, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(production_country),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.30490733722648844, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.37237617126482364, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),genre.name,!=,Bangkok, Thailand),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.37924126494335875, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),person.id,crew.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.37924613353067627, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.384995748671439, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),person.id,oscar_nominee.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.40716325641078055, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.4109373740301818, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(crew),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.4283910167364991, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.4290944606672142, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),person.id,spoken_language.iso_639_1),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.429137884570331, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(oscar_winner),person.id,cast.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.4293694569387569, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies where an oscar winners death place isn't Bangkok, Thailand? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,!=,Bangkok, Thailand),getData(spoken_language),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.43483654505158537, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,!=,Bangkok, Thailand),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 84, "beams": [{"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-08-15), person.name),person.name))", "score": -0.04820954282331513, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "score": -0.2531980615531211, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1957-08-15), person.name),person.name))", "score": -0.4278203439389472, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,<=,1957-08-15), person.name),person.name))", "score": -0.5800408614669199, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-08-15), person.name),person.name))", "score": -0.6206327577747288, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.release_date,<=,1957-08-15), person.name),person.name))", "score": -0.6221915839196299, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-08-15), oscar.sub_category),person.name))", "score": -0.6364327098199283, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-08-15), person.name),person.death_place))", "score": -0.667924174988002, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1957-08-15), person.name),person.name))", "score": -0.7024583708916907, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.7069718730126624, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>=,1957-08-15), person.name),person.name))", "score": -0.7221523222814136, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-08-15), person.birth_place),person.name))", "score": -0.7255784298249637, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-08-15), person.name),person.birth_place))", "score": -0.7652871701357071, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-08-15), movie.vote_average),person.name))", "score": -0.8087807918855106, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Which are the names of the persons with a birthday after 1957-08-15?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "score": -0.8163274669714156, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 85, "beams": [{"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,m),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.1472770648792277, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,directing),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.19214648222448147, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,m),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(cast),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.23453772993608263, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,directing),merge(getData(cast),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.24230898266754597, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,m),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.2545384447189936, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,m),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.2598831890215892, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,directing),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.2600697782718912, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,directing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.26294423116760857, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,m),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.2806858591423975, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,directing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(filter(getData(movie),oscar.number,=,directing),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.29557565676814174, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,directing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,has_genre.genre_id), person.death_place),person.death_place))", "score": -0.31065366751115747, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,m),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.3126758476297466, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,directing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.person_id), person.death_place),person.death_place))", "score": -0.3216065108600198, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,directing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.3233459341349914, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "How many death places are there for m that were nominated in the oscar category directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,m),merge(getData(oscar_nominee),getData(person),cast.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.33043663587995514, "correct_code": "count(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.sub_category,=,directing),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),oscar.id,oscar_winner.oscar_id),person.gender,=,m), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 86, "beams": [{"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))", "score": -0.008457846717647044, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,38085778), movie.budget),movie.budget))", "score": -0.5916242385392252, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,38085778), movie.budget),movie.budget))", "score": -0.6830290937905374, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,38085778), movie.budget),movie.budget))", "score": -0.7027721478480089, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,38085778), movie.budget),movie.budget))", "score": -0.7602020884041849, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.title))", "score": -0.7678212480495858, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.release_date),movie.budget))", "score": -0.778896385407279, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,38085778), movie.budget),movie.budget))", "score": -0.8092314674395311, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.release_date))", "score": -0.8124308543156076, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,38085778), movie.budget),movie.budget))", "score": -0.8286061072831217, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.title),movie.budget))", "score": -0.8372763931511145, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.original_language))", "score": -0.8526881890247751, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.revenue),movie.budget))", "score": -0.8543245136497717, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.revenue,=,38085778), movie.budget),movie.budget))", "score": -0.8608108303124027, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}, {"orig_question": "What were the different budgets for movies with a revenue of exactly 38085778?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,38085778), movie.budget),movie.budget))", "score": -0.8699432684916246, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,38085778), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 87, "beams": [{"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.08744575623759783, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,movie.id), movie.title),movie.status))", "score": -0.1443548562743715, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,movie.id), movie.title),movie.release_date))", "score": -0.16552788579852604, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.2803758446284499, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.31414157776000345, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,production_country.iso_3166_1), movie.title),movie.status))", "score": -0.3372849446652236, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,movie.id), movie.status),movie.title))", "score": -0.3431297915169988, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,movie.id), movie.title),movie.original_language))", "score": -0.34470123782358125, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,production_country.iso_3166_1), movie.title),movie.release_date))", "score": -0.3584579741893781, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,movie.id), movie.title),movie.status))", "score": -0.361617705212696, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Jordan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.36803692578918995, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,movie.id), movie.title),movie.popularity))", "score": -0.37014552647317067, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,country.iso_3166_1), movie.title),movie.title))", "score": -0.3821144747143374, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,movie.id), movie.title),movie.release_date))", "score": -0.38603885858786346, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the country Jordan?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan),getData(movie),production_country.movie_id,movie.id), movie.status),movie.status))", "score": -0.4000388915537725, "correct_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Jordan), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 88, "beams": [{"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.death_place))", "score": -0.19499847393980982, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.birth_place),person.death_place))", "score": -0.20562624218166176, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.death_day),person.death_day))", "score": -0.22198675558457473, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.birth_place),person.death_day))", "score": -0.23261452382642667, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.death_place),person.death_place))", "score": -0.2640471502339543, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.death_place),person.death_day))", "score": -0.29103543187871916, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.3022986511597063, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.birth_day),person.death_place))", "score": -0.32857769332470815, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),getData(cast),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.33667457069859424, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_place))", "score": -0.3417266998954988, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.birth_day),person.death_day))", "score": -0.355565974969473, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),getData(cast),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_place))", "score": -0.37610261943438683, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.name),person.death_place))", "score": -0.3935121590176889, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.id),person.death_place))", "score": -0.39390824912934, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}, {"orig_question": "How many people have received an oscar who were born in Astoria, New York?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Astoria, New York,),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), oscar.sub_category),person.death_place))", "score": -0.4001277073812479, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,=,Astoria, New York,),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 89, "beams": [{"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.0900121552622295, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.251694764730928, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))", "score": -0.3650401344275451, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.4051688064467529, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.4558902123478112, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_day,>=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.46315305757958747, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.4772368635564427, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,>=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.48743382668180857, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.birth_day,>=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.5138744634806458, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.5183979505103151, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.5279582583821466, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_day,>=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.535221144592734, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1964-12-29), person.birth_place),person.birth_place))", "score": -0.5363707950091339, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1964-12-29), person.birth_place),person.birth_day))", "score": -0.5956238650469459, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birth place of persons born after 1964-12-29?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1964-12-29), person.birth_place),person.death_place))", "score": -0.6146745824007667, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1964-12-29), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 90, "beams": [{"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),company.id,production_company.company_id),getData(person),production_company.company_id,person.id),movie.title,=,Darling Companion), person.death_place),person.death_place))", "score": -0.2245547409496548, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Mad Chance),getData(person),production_company.company_id,person.id), person.death_place),person.death_place))", "score": -0.25404152587945517, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(person),production_company.company_id,person.id),movie.title,=,Darling Companion), person.death_place),person.death_place))", "score": -0.27264495277397544, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.company_id),getData(person),production_company.company_id,person.id),movie.title,=,Darling Companion), person.death_place),person.death_place))", "score": -0.2742899884416919, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),movie.title,=,Darling Companion),getData(person),production_company.company_id,person.id), person.death_place),person.death_place))", "score": -0.28006956987445164, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(person),production_company.company_id,person.id),movie.id,production_company.movie_id),movie.title,=,Darling Companion), person.death_place),person.death_place))", "score": -0.3018333871775997, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(person),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Darling Companion), person.death_place),person.death_place))", "score": -0.30654117917852414, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),company.id,production_company.company_id),company.name,=,Mad Chance),getData(person),production_company.company_id,person.id), person.death_place),person.death_place))", "score": -0.3095980859259871, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),movie.id,production_company.company_id),getData(person),production_company.company_id,person.id),movie.title,=,Darling Companion), person.death_place),person.death_place))", "score": -0.32238020026601255, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),company.id,production_company.company_id),getData(person),production_company.company_id,person.id),company.name,=,Mad Chance), person.death_place),person.death_place))", "score": -0.33341218349944546, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),company.id,production_company.movie_id),getData(person),production_company.company_id,person.id),movie.title,=,Darling Companion), person.death_place),person.death_place))", "score": -0.3341624058504382, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),company.id,production_company.company_id),movie.title,=,Darling Companion),getData(person),production_company.company_id,person.id), person.death_place),person.death_place))", "score": -0.3356261721457719, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),company.id,production_company.company_id),getData(person),production_company.company_id,company.id),movie.title,=,Darling Companion), person.death_place),person.death_place))", "score": -0.33917291151229184, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Darling Companion),merge(getData(production_company),getData(person),production_company.company_id,person.id),movie.id,production_company.movie_id), person.death_place),person.death_place))", "score": -0.3668398176546143, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}, {"orig_question": "Are there any death places from persons when the production company name was Mad Chance and the movie title was Darling Companion?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Darling Companion),merge(getData(production_company),getData(person),oscar_nominee.person_id,person.id),movie.id,production_company.movie_id), person.death_place),person.death_place))", "score": -0.3692626616120985, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(company),merge(filter(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.title,=,Darling Companion),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),company.id,production_company.company_id),company.name,!=,Mad Chance), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 91, "beams": [{"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.027188409520475663, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),production_company.company_id))", "score": -0.22790124796331543, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),country.name))", "score": -0.30294605906484007, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),genre.name))", "score": -0.3299682755952444, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.id))", "score": -0.33765567016913495, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.357882493963678, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),keyword.name))", "score": -0.37813394602362455, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,=,0.215464), company.name),company.name))", "score": -0.37843399410851053, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),oscar.number))", "score": -0.3805562057561683, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),person.birth_place))", "score": -0.4044669565450611, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),person.death_place))", "score": -0.40515958262344315, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,=,0.215464),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.41674322479085063, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),oscar.category))", "score": -0.417380855124427, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.215464),merge(getData(production_company),getData(production_company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.41803942476515604, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}, {"orig_question": "Is there any production company who was involved in a movie with a popularity of 0.215464?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,0.215464),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.41946235001652676, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,0.215464), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 92, "beams": [{"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.death_place,>=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,crew.person_id), country.name),country.name))", "score": -0.3152461028602766, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.birth_place,>=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,crew.person_id), country.name),country.name))", "score": -0.32345008740083026, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.death_place,>=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,crew.person_id), person.birth_place),country.name))", "score": -0.3274718763852565, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.death_place,=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,crew.person_id), country.name),country.name))", "score": -0.3281756619906524, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.birth_place,>=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,crew.person_id), person.birth_place),country.name))", "score": -0.3356758609258102, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,crew.person_id), country.name),country.name))", "score": -0.33637964653120606, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.death_place,=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,crew.person_id), person.birth_place),country.name))", "score": -0.3404014355156323, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,>=,David Kyle),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,crew.person_id), country.name),country.name))", "score": -0.34053956300082494, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,crew.person_id), person.birth_place),country.name))", "score": -0.348605420056186, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.death_place,>=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,crew.person_id), country.name),country.name))", "score": -0.3503208152348326, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.birth_place,>=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,crew.person_id), country.name),country.name))", "score": -0.3585248318939138, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,>=,David Kyle),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,crew.person_id), country.name),country.name))", "score": -0.3591443891408012, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.death_place,>=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,crew.person_id), person.birth_place),country.name))", "score": -0.36254662087834, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.death_place,=,David Kyle),merge(getData(crew),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,crew.person_id), country.name),country.name))", "score": -0.3632504064837359, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there country names where movies that have at least a crew member named differently than \"David Kyle\" were produced ? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,>=,David Kyle),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3879048236900916, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,!=,David Kyle),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 93, "beams": [{"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),movie.release_date))", "score": -0.01391369781413232, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,42), movie.release_date),movie.release_date))", "score": -0.4928929570778564, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,42), movie.release_date),movie.release_date))", "score": -0.5556839469536499, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,42), movie.release_date),movie.release_date))", "score": -0.5636266831024841, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.budget),movie.release_date))", "score": -0.7160676656239957, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),movie.budget))", "score": -0.7201325950627506, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),movie.popularity))", "score": -0.732582336426276, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),person.birth_day))", "score": -0.7906962690358341, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.popularity),movie.release_date))", "score": -0.8024618564122648, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,42), movie.release_date),movie.release_date))", "score": -0.8111941392598965, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),crew.movie_id))", "score": -0.8256902155881107, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),movie.release_date))", "score": -0.8316623305800022, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), person.birth_day),movie.release_date))", "score": -0.8455571470731229, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(oscar),movie.runtime,>=,42), movie.release_date),movie.release_date))", "score": -0.8580265649252397, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.title),movie.release_date))", "score": -0.8731189904683561, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 94, "beams": [{"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.popularity),movie.popularity))", "score": -0.13217226467168075, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.popularity,>,10.521),movie.popularity), movie.popularity))", "score": -0.2763763334223768, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,>,10.521), movie.popularity),movie.popularity))", "score": -0.5086433054420922, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.release_date),movie.popularity))", "score": -0.5107737132821057, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.popularity))", "score": -0.5523945638451551, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.popularity,>,10.521),movie.popularity), movie.id))", "score": -0.5615999515721342, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,10.521), movie.popularity),movie.popularity))", "score": -0.6042893291923974, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.original_language),movie.popularity))", "score": -0.611431623390672, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.status,>,10.521),movie.popularity), movie.popularity))", "score": -0.6518036530906102, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.title),movie.popularity))", "score": -0.6833114275250409, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.release_date,>,10.521),movie.popularity), movie.popularity))", "score": -0.6928495274478337, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.popularity),movie.status))", "score": -0.7207408450085495, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.revenue),movie.popularity))", "score": -0.7469627508435224, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,!=,10.521), movie.popularity),movie.popularity))", "score": -0.7536899330334563, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}, {"orig_question": "Are there movies with a popularity more than 10.521 that are released?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.popularity,>,10.521),movie.popularity), movie.status))", "score": -0.7612316425511381, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,10.521), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 95, "beams": [{"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>,155), genre.name),genre.name))", "score": -0.10173298929761093, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,155),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.15681985749865107, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,155), genre.name),genre.name))", "score": -0.19298796143699987, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,=,155), genre.name),genre.name))", "score": -0.25693431945859896, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,!=,155), genre.name),genre.name))", "score": -0.2950541650625674, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,>,155),movie.release_date,=,155), genre.name),genre.name))", "score": -0.302958330799937, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,155),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3157950005683546, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),movie.runtime,>,155),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3456944457415948, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,>,155),movie.title,=,155), genre.name),genre.name))", "score": -0.3517194744886357, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),movie.runtime,>,155),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.35537380924223483, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,oscar_nominee.movie_id),movie.runtime,>,155),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3649285553539589, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,155),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.36549823142612065, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,155),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3902892250032554, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>,155), genre.name),genre.name))", "score": -0.39858539234767826, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}, {"orig_question": "Are there any genres of movies with a runtime of 155 and oscar nomiees whose id is over 48?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,>,155), genre.name),genre.name))", "score": -0.4043827821368398, "correct_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(oscar),oscar.number,>,48),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,155), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 96, "beams": [{"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.06348267324640879, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.19274430739840348, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,=,????????? ????), movie.id),movie.runtime)", "score": -0.25843774790994944, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.2650612920249384, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),cast.movie_id,movie.id),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.3064491123376612, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),person.gender,=,????????? ????), movie.id),movie.runtime)", "score": -0.30999169605128446, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.runtime),movie.runtime)", "score": -0.3379582580395858, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(merge(filter(getData(language),language.name,=,????????? ????),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.3459251400905855, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,????????? ????), movie.runtime),movie.runtime)", "score": -0.3479815220227459, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue,=,????????? ????), movie.id),movie.runtime)", "score": -0.3699946513595946, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),has_genre.movie_id,movie.id),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.37715827136133934, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,????????? ????), movie.id),movie.runtime)", "score": -0.394175080137255, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,=,????????? ????), movie.id),movie.runtime)", "score": -0.3948112722768678, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(merge(filter(getData(language),language.name,=,????????? ????),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.runtime),movie.runtime)", "score": -0.41420078517268016, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),keyword.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.420139638061024, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 97, "beams": [{"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), person.death_day),movie.revenue))", "score": -0.24244429967532585, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.2463383942545732, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), person.death_day),movie.revenue))", "score": -0.2989846745859046, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.runtime),movie.revenue))", "score": -0.30151308051426035, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.302878769165152, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.31800277381614783, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.3224630598166051, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.budget),movie.revenue))", "score": -0.32571547639341597, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), person.death_day),movie.revenue))", "score": -0.34818709419577487, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.release_date),movie.revenue))", "score": -0.35161635317009926, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.runtime),movie.revenue))", "score": -0.35805345542483913, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.runtime),movie.revenue))", "score": -0.36087968947524124, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), person.death_day),movie.revenue))", "score": -0.36422581597477055, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.revenue),movie.revenue))", "score": -0.3681199105540179, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),country.name,=,Fritz Rasp),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), person.death_day),movie.revenue))", "score": -0.3703421050861079, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 98, "beams": [{"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.07378894434805261, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.3593070346766131, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.39255755645195695, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),has_genre.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.4012427562774726, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(has_genre),movie.id,spoken_language.movie_id),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.4087844726042976, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.41986556231951483, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(movie),has_genre.movie_id,movie.id),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.42095968587953336, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),has_genre.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.4344932780528164, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(movie),crew.movie_id,movie.id),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.45424415579633126, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),getData(movie),has_genre.movie_id,movie.id),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.4664745056577166, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(crew),movie.id,spoken_language.movie_id),movie.popularity,=,6.06387), movie.release_date),movie.release_date))", "score": -0.4829708176134579, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,6.06387),merge(getData(movie),getData(movie),has_genre.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.popularity),movie.release_date))", "score": -0.5268932903259322, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,6.06387),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.popularity),movie.release_date))", "score": -0.5276688705312943, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,6.06387),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.popularity),movie.release_date))", "score": -0.5375274598456978, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}, {"orig_question": "When was the movie release date of the movies with a popularity equal to 6.06387?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,6.06387),merge(getData(movie),getData(movie),has_genre.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.release_date),movie.release_date))", "score": -0.5637090877172499, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.06387), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 99, "beams": [{"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar.category,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.38880541429751014, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.category,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.392449188148537, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar.category,=,Bob Papenbrook), oscar.category),oscar.number))", "score": -0.41313532737617553, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.category,=,Bob Papenbrook), oscar.category),oscar.number))", "score": -0.4167791012272024, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,Bob Papenbrook),oscar.category,=,Bob Papenbrook), oscar.category),oscar.number))", "score": -0.41996597831431115, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.oscar_id,person.id),oscar.category,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.42707733780673046, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.oscar_id,oscar.id),oscar.category,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.43072111165775734, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar.category,=,Bob Papenbrook), person.death_day),oscar.number))", "score": -0.4417696636212544, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.category,=,Bob Papenbrook), person.death_day),oscar.number))", "score": -0.4454134374722813, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.oscar_id,person.id),oscar.category,=,Bob Papenbrook), oscar.category),oscar.number))", "score": -0.4514072508853958, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.oscar_id,oscar.id),oscar.category,=,Bob Papenbrook), oscar.category),oscar.number))", "score": -0.4550510247364227, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,Bob Papenbrook),oscar.category,=,Bob Papenbrook), person.death_day),oscar.number))", "score": -0.4570410137293508, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,Bob Papenbrook),oscar.category,=,Bob Papenbrook), oscar.number),oscar.number))", "score": -0.46135423607052045, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar.category,=,Bob Papenbrook), company.name),oscar.number))", "score": -0.4688172427130537, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),oscar.sub_category,=,Bob Papenbrook),getData(oscar),oscar_winner.oscar_id,person.id), oscar.number),oscar.number))", "score": -0.548532787563497, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 100, "beams": [{"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.08951020230465516, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.18003273911209078, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_average),movie.vote_count))", "score": -0.22429110870873128, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),person.name,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.26505035744206, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.29057173055772323, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.revenue),movie.vote_count))", "score": -0.29847413320011734, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_average),movie.vote_count))", "score": -0.3148136455161669, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (adapted screenplay)), movie.vote_count),movie.vote_count))", "score": -0.3192481531167744, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.3539808414155475, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.runtime),movie.vote_count))", "score": -0.3606306519414661, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.3776950572731764, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (adapted screenplay)),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.3778291195030747, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (adapted screenplay)), movie.vote_count),movie.vote_count))", "score": -0.37848728396321424, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.3798732826486122, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the different vote counts that movies, which were nominated for an oscar in the writing (adapted screenplay) subcategory received?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),movie.runtime,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.38346602126692814, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 101, "beams": [{"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.1236265439838462, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.14461722116175224, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.44842792566123535, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.4694186028391414, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.5382026534825854, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.5591933306604915, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.561098645284801, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.5820893224627071, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.5849019244305964, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.5869686108380847, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.6079592880159908, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.6285083323709841, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_average),movie.vote_count))", "score": -0.7253331836145662, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_count))", "score": -0.7463238607924723, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.7502817314416461, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 102, "beams": [{"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),movie.id,crew.movie_id),person.birth_day,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.2816400514917149, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.movie_id),person.birth_day,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.28952145083217473, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),movie.id,crew.movie_id),person.death_day,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.29390505835184133, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.movie_id),person.death_day,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3017864576923012, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),movie.id,crew.movie_id),movie.runtime,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.30193793309827804, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.movie_id),movie.runtime,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3098193324387379, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),movie.id,crew.person_id),person.birth_day,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3121547968345391, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.birth_day,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.320036196174999, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),movie.id,crew.person_id),person.death_day,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3244198036946656, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.33230120303512545, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),movie.id,crew.person_id),movie.runtime,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.33245267844110227, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),movie.runtime,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3403340777815621, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),movie.id,crew.movie_id),person.birth_day,!=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3807719353764348, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),person.name,=,The Bourne Supremacy),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.name))", "score": -0.4507233013726228, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),person.name,=,The Bourne Supremacy),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.name))", "score": -0.4785990644495509, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 103, "beams": [{"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.09990214121530862, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.14748090203737108, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.25048010569382545, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.25600265502783537, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Little Fockers),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.2798909414495093, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,Little Fockers),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.2980588665158879, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.death_place))", "score": -0.29949866645398593, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),oscar.sub_category,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.3069205421446891, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),oscar.year,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.32791884687907624, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.death_place))", "score": -0.34707742727604834, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.3474193467221803, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.3493798710567094, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.36544448338757785, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.37422265278298605, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,Little Fockers),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.39017753636863767, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 104, "beams": [{"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,=,f),movie.runtime),movie.budget))", "score": -0.17386661158121355, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.birth_day,=,f),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.19548720389161536, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.birth_place,=,f),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.23639399849520784, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),movie.release_date,=,f),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.2550140613852645, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),oscar.category,=,f),movie.runtime),movie.budget))", "score": -0.26530587097129055, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,=,f),movie.runtime),movie.budget))", "score": -0.2670507464588477, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,=,f),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.27417301657384274, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_place,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))", "score": -0.3191008345443634, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,=,f),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.33380755653279237, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.release_date,=,f),movie.runtime),movie.budget))", "score": -0.33440023974722155, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),genre.name,=,f),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.3543359694157688, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))", "score": -0.3671390143540842, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),genre.name,=,f),movie.runtime),movie.budget))", "score": -0.37007085097020886, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_place,=,f),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.37037732429644116, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),company.name,=,f),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.3748460344601578, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 105, "beams": [{"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.03551165341091675, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.budget),movie.budget)", "score": -0.42743827789269473, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,<,5.3), movie.id),movie.budget)", "score": -0.4956482869134708, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.id), movie.id),movie.budget)", "score": -0.5473572403865996, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5645228137984905, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.budget)", "score": -0.5660204339605328, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.id), movie.id),movie.budget)", "score": -0.5690097766541931, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5731346864617154, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id), movie.id),movie.budget)", "score": -0.5739648656906892, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.budget)", "score": -0.5876729702281263, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.budget)", "score": -0.5926280592646224, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.id),movie.budget)", "score": -0.5932712096559638, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id), movie.id),movie.budget)", "score": -0.5956174019582827, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.iso_639_1), movie.id),movie.budget)", "score": -0.6040342516056907, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,<,5.3),merge(getData(movie),getData(movie),movie.revenue,movie.id),movie.id,movie.id), movie.id),movie.budget)", "score": -0.6131178072089989, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 106, "beams": [{"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.03397560261764327, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.2377045556490036, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.budget)", "score": -0.33085781828140726, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.35833968531666166, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.37799147705778074, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(country),country.name,=,Japan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.3838548495569486, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.name,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.39201268980853926, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,country.name),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.3929376961461852, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.40039683311373, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan), movie.id),movie.revenue)", "score": -0.40530975873226593, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.42841203475752315, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.4300570053908481, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.popularity)", "score": -0.4329380460156019, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(language),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.4358650249397405, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.budget)", "score": -0.4432717161182877, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 107, "beams": [{"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.23262834183649805, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.release_date),person.birth_place))", "score": -0.3106251291471707, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.status),person.birth_place))", "score": -0.31623536316887507, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.oscar_id,movie.id), person.birth_place),person.birth_place))", "score": -0.32119562014285846, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.3411864840111193, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), oscar.category),person.birth_place))", "score": -0.34223738894150074, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), person.birth_place),person.birth_place))", "score": -0.34467257145370817, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),country.name,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.37886214256222694, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),company.name))", "score": -0.3875191810843107, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.3883709389611117, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.person_id,movie.id), person.birth_place),person.birth_place))", "score": -0.40030961720762587, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.40141103566528774, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.4040608274770011, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),movie.release_date))", "score": -0.4106300609238608, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.41120852446497336, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 108, "beams": [{"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.27627875375730937, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.29382020118047353, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.3215997061379274, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.33914115356109154, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.34630268145153975, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.361462223303164, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),language.name,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.36987563171857263, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.3790036707263282, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_count,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.38394159086947505, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.original_language,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.3874170791417368, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,26500000),movie.revenue),movie.runtime))", "score": -0.3900463571821769, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.revenue,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.39162363383215776, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.40678322829171504, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,26500000),movie.revenue),movie.runtime))", "score": -0.40758780460534105, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the maxiumum rating that has a budget not equal to 26500000 Dollars?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),language.name,!=,26500000),movie.vote_average),movie.runtime))", "score": -0.41519663670712365, "correct_code": "done(extractValues(max(filter(getData(movie),movie.budget,!=,26500000),movie.vote_average),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 109, "beams": [{"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)", "score": -0.0773767875174335, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,!=,40.138), movie.id),movie.vote_average)", "score": -0.24471353267802437, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,<,40.138), movie.id),movie.vote_average)", "score": -0.3954066977784487, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,=,40.138), movie.id),movie.vote_average)", "score": -0.436140036546155, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,40.138), movie.id),movie.vote_average)", "score": -0.6148950882114581, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(filter(getData(movie),movie.popularity,>,40.138),movie.vote_average)", "score": -0.6353422711001029, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,null,40.138), movie.id),movie.vote_average)", "score": -0.7219022994253533, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.popularity),movie.vote_average)", "score": -0.735158587443816, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,<=,40.138), movie.id),movie.vote_average)", "score": -0.7575679706982481, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,>,40.138), movie.id),movie.vote_average)", "score": -0.7856625382676713, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(filter(getData(movie),movie.popularity,!=,40.138),movie.vote_average)", "score": -0.8144972640567543, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.popularity)", "score": -0.8809493778292603, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.vote_average),movie.vote_average)", "score": -0.8952360462485539, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,!=,40.138), movie.popularity),movie.vote_average)", "score": -0.9024953326044068, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with a popularity bigger than 40.138 ?", "inferred_code": "sum(filter(getData(movie),movie.popularity,=,40.138),movie.vote_average)", "score": -0.9032329771431674, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>,40.138), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 110, "beams": [{"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,cn), movie.title),movie.title))", "score": -0.2571120238647835, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,cn), movie.title),movie.title))", "score": -0.28267004311282384, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,cn), movie.title),movie.title))", "score": -0.29072520471364227, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,!=,cn), movie.title),movie.title))", "score": -0.29417101000990675, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,cn), movie.title),movie.title))", "score": -0.2955785900809819, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,cn), movie.title),movie.title))", "score": -0.29583957297168884, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,!=,cn), movie.title),movie.title))", "score": -0.3197290292579471, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),country.name,!=,cn), movie.title),movie.title))", "score": -0.3309192482936344, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,!=,cn), movie.title),movie.title))", "score": -0.3326375762261052, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,cn), movie.title),movie.title))", "score": -0.3397493125650144, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(country),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,cn), movie.title),movie.title))", "score": -0.3540011018445801, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),country.name,!=,cn), movie.title),movie.title))", "score": -0.35647726754167475, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),country.name,!=,cn), movie.title),movie.title))", "score": -0.36938585995339607, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),keyword.name,!=,cn), movie.title),movie.title))", "score": -0.38804161206521653, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}, {"orig_question": "Are there movies that are not in catalan?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(country),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,!=,cn), movie.title),movie.title))", "score": -0.39106013343326657, "correct_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,cn),movie.release_date), movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 111, "beams": [{"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>=,2003-05-03),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.11564999575191696, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,>,2003-05-03), genre.name),genre.name))", "score": -0.12171630125598612, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.13390277187442384, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,2003-05-03),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.20540323401807742, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,>=,2003-05-03), genre.name),genre.name))", "score": -0.23142565784507368, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.31809427335555923, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>=,2003-05-03),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.31908655939471614, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>,2003-05-03), genre.name),genre.name))", "score": -0.33169726698701313, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.name), genre.name),genre.name))", "score": -0.3958622684886243, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2003-05-03),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4084719209068226, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,>,2003-05-03), genre.name),genre.name))", "score": -0.4300850657898953, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>=,2003-05-03), genre.name),genre.name))", "score": -0.4414066235761007, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,!=,2003-05-03), genre.name),genre.name))", "score": -0.4559826839204535, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,<=,2003-05-03),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4659227598568395, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many different genres have been used in movies released on or after 2003-05-03?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.46802061043309834, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,>=,2003-05-03),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 112, "beams": [{"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), keyword.name),keyword.name))", "score": -0.07405346423348656, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_count,>,477), keyword.name),keyword.name))", "score": -0.1726959940847862, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,477), keyword.name),keyword.name))", "score": -0.20584564197263602, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_average,>,477), keyword.name),keyword.name))", "score": -0.2888339714222746, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,>,477), keyword.name),keyword.name))", "score": -0.32389595643930624, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3313076174058889, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), person.death_place),keyword.name))", "score": -0.3596014102424406, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,>,477), keyword.name),keyword.name))", "score": -0.37158230325324243, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), company.name),keyword.name))", "score": -0.3740409255890927, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), keyword.name),person.death_place))", "score": -0.37449269399887003, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,production_company.movie_id),movie.vote_count,>,477), keyword.name),keyword.name))", "score": -0.4003320435828102, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,!=,477), keyword.name),keyword.name))", "score": -0.42271756178076986, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(has_keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), keyword.name),keyword.name))", "score": -0.42441938937348944, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(company),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), keyword.name),keyword.name))", "score": -0.4321965469253128, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), oscar.number),keyword.name))", "score": -0.4323724859892395, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 113, "beams": [{"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,!=,American Wedding), movie.id),movie.budget)", "score": -0.27559566345126957, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.30405852871230216, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.35039987813131895, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.3529635147899881, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.35457653560852065, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,!=,American Wedding), movie.id),movie.budget)", "score": -0.38091723898075164, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.38988150416149037, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,movie.id),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.39442442526096205, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.40091788502753745, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.40176087661835547, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.40348152168620655, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.41522389802839227, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.42039772613796356, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.4362228167182263, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies not including American Wedding?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),language.name,!=,American Wedding), movie.id),movie.budget)", "score": -0.4378743671269004, "correct_code": "avg(filter(getData(movie),movie.title,!=,American Wedding),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 114, "beams": [{"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.16258841382015354, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.23281273300732225, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.25071653890655515, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(company),production_company.company_id,company.id),production_company.company_id), company.name))", "score": -0.3744601258308814, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.4211949867400336, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(company),production_company.company_id,company.id),genre.name), company.name))", "score": -0.429370562996754, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,>,10.3042),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.4439100325855012, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(has_genre),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.44621671075100305, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,!=,10.3042),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.4538037306346602, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(company),production_company.company_id,company.id),movie.budget), company.name))", "score": -0.46926639925792984, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.48215178724704016, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(company),production_company.company_id,company.id),company.name), company.id))", "score": -0.4842635221459728, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(production_company),production_company.company_id,company.id),company.name), company.name))", "score": -0.4934086792213668, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_average,>,10.3042),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.4951834297157741, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produced movies with a popularity of more than 10.0342?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,10.3042),getData(company),production_company.company_id,company.name),company.name), company.name))", "score": -0.5006872425959954, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,10.3042),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 115, "beams": [{"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.2570428210534755, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.25943438876412495, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),crew.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.276653273139378, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),crew.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.2784177429694546, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),crew.movie_id,oscar_winner.person_id), oscar.category),oscar.category))", "score": -0.2868689729690035, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),crew.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.28793079590051623, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),crew.movie_id,oscar_winner.person_id), oscar.category),oscar.category))", "score": -0.2886334427990801, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),crew.movie_id,oscar.id), oscar.category),oscar.category))", "score": -0.2896952657305928, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),crew.movie_id,oscar_winner.person_id), oscar.category),oscar.category))", "score": -0.29814649573014174, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),crew.movie_id,oscar_winner.person_id), oscar.category),oscar.category))", "score": -0.2999109655602183, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),crew.movie_id,oscar_nominee.person_id), oscar.category),oscar.category))", "score": -0.32468262303802325, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),crew.movie_id,oscar_nominee.person_id), oscar.category),oscar.category))", "score": -0.32644709286809986, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),crew.movie_id,oscar_nominee.person_id), oscar.category),oscar.category))", "score": -0.33596021525489633, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),crew.movie_id,oscar_nominee.person_id), oscar.category),oscar.category))", "score": -0.3377246850849729, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),crew.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.34778720641988414, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 116, "beams": [{"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),movie.budget,>,1450),movie.release_date,<,1982-04-27), movie.budget),movie.title))", "score": -0.4205685880699675, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,1982-04-27),getData(person),oscar_winner.person_id,person.id), movie.budget),movie.title))", "score": -0.42353440669863057, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,1450),getData(person),oscar_winner.person_id,person.id), movie.title),movie.title))", "score": -0.42777398145042406, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,1450),getData(person),oscar_winner.person_id,person.id), movie.release_date),movie.title))", "score": -0.4328352234488639, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.movie_id),movie.release_date,>,1982-04-27),getData(person),oscar_winner.person_id,person.id), movie.budget),movie.title))", "score": -0.43315511955292857, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.movie_id),movie.release_date,>,1982-04-27),getData(person),oscar_winner.person_id,person.id), movie.title),movie.title))", "score": -0.43739469430472205, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.movie_id),movie.release_date,>,1450),getData(person),oscar_winner.person_id,person.id), movie.release_date),movie.title))", "score": -0.4424559363031619, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),movie.budget,>,1450),person.death_day,<,1982-04-27), movie.budget),movie.title))", "score": -0.44713305034647166, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),movie.budget,>,1450),person.death_place,<,1982-04-27), movie.budget),movie.title))", "score": -0.45159699597149205, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),movie.budget,>,1450),movie.release_date,<,1450), movie.release_date),movie.title))", "score": -0.4545574831970515, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,1982-04-27),getData(person),oscar_winner.person_id,person.id), movie.budget),movie.budget))", "score": -0.4600824778886448, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,1982-04-27),getData(person),oscar_winner.person_id,person.id), movie.title),movie.budget))", "score": -0.46432205264043824, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.release_date,>,1450),getData(person),oscar_winner.person_id,person.id), movie.release_date),movie.budget))", "score": -0.46938329463887807, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.movie_id),movie.release_date,>,1982-04-27),getData(person),oscar_winner.person_id,person.id), movie.budget),movie.budget))", "score": -0.4697031907429428, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}, {"orig_question": "Are there any coutries where the movie budget was more than 1450 and the oscar winner persons death day was before 1982-04-27?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),movie.budget,>,1450),person.death_day,<,1982-04-27), movie.release_date),movie.title))", "score": -0.48112198917758675, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,<,1982-04-27),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>,1450), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 117, "beams": [{"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.09930910304395701, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime)", "score": -0.1857732706013119, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime))", "score": -0.5451273845756077, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.status,movie.id), movie.runtime),movie.runtime)", "score": -0.5710603855901321, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,movie.id), movie.runtime),movie.runtime)", "score": -0.588765999135662, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.status),movie.runtime)", "score": -0.6273570812417096, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.status,movie.status), movie.runtime),movie.runtime)", "score": -0.6473857396950011, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.status,movie.id), movie.id),movie.runtime)", "score": -0.656626931512637, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,movie.status), movie.runtime),movie.runtime)", "score": -0.665091353240531, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.runtime)", "score": -0.6697261948104979, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,movie.id), movie.id),movie.runtime)", "score": -0.674332545058167, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.status,movie.id), movie.status),movie.runtime)", "score": -0.6893516362247852, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.runtime)", "score": -0.7016321552859545, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),movie.runtime,movie.id),movie.id,movie.status), movie.id),movie.runtime)", "score": -0.7096880799491027, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),movie.runtime,movie.id),movie.id,movie.status), movie.runtime),movie.runtime)", "score": -0.7165897151841332, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 118, "beams": [{"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,film editing), movie.status),movie.title))", "score": -0.12526254338344173, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,film editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.15972958580343383, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,film editing), movie.title),movie.title))", "score": -0.21200032372455732, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,film editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.status))", "score": -0.29413210937234713, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,film editing), oscar.category),movie.title))", "score": -0.3110549878854387, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,film editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.31478677576561176, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,film editing), movie.runtime),movie.title))", "score": -0.3210259433146408, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,film editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.title))", "score": -0.3371929751111369, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,film editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.oscar_id,movie.id), movie.title),movie.title))", "score": -0.34689126417724053, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,film editing), movie.status),movie.title))", "score": -0.380646742517408, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,film editing), movie.status),movie.title))", "score": -0.38949700665488457, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,film editing),getData(production_country),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.41119836531717546, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,film editing), oscar.sub_category),movie.title))", "score": -0.4156710836267446, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,film editing), movie.status),movie.title))", "score": -0.41614376701250544, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}, {"orig_question": "Which movies won the oscar in the sub category film editing?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,film editing), oscar.year),movie.title))", "score": -0.4266523771785214, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,film editing), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 119, "beams": [{"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,es),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),language.name))", "score": -0.1706215014881139, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,es),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.23325291960759176, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,es),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.23562244293300083, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,es),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),movie.original_language))", "score": -0.2539109259599832, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,es),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.266312836962132, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,es),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.iso_639_1), language.name),language.name))", "score": -0.28670681773087703, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,es),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.movie_id), language.name),language.name))", "score": -0.2893703463045547, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,es),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.29747253541621, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,es),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.29984205874161907, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,es),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.31332399816838985, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,es),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.330060130995308, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,es),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),language.name))", "score": -0.3384640815859364, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.name,=,es), language.name),language.name))", "score": -0.35475401254531347, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,es),getData(movie),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.36710763621615294, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "To which languages have spanish movies been translated to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,es),getData(language),spoken_language.movie_id,language.iso_639_1), language.name),language.name))", "score": -0.36896471286495036, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,es),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 120, "beams": [{"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "score": -0.009088201222766656, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.popularity,<,6.24827), movie.original_language),movie.original_language))", "score": -0.554040154657684, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,6.24827), movie.original_language),movie.original_language))", "score": -0.5683505919369054, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,<,6.24827),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.5818075394578728, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,<,6.24827),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.5822341798268829, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,6.24827), movie.original_language),movie.original_language))", "score": -0.6786674324030173, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,<,6.24827),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.popularity),movie.original_language))", "score": -0.693802559004522, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,6.24827), movie.original_language),movie.original_language))", "score": -0.7307192471416784, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,<,6.24827), movie.original_language),movie.original_language))", "score": -0.7537531915659201, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.title))", "score": -0.7862616253623855, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,6.24827), movie.original_language),movie.original_language))", "score": -0.7914592090601218, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,6.24827), movie.original_language),movie.original_language))", "score": -0.828278997221787, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,6.24827), movie.original_language),movie.original_language))", "score": -0.8368908229822409, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.popularity,<,6.24827), language.name),movie.original_language))", "score": -0.8378501271990454, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a popularity smaller than 6.24827 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,6.24827), movie.original_language),movie.original_language))", "score": -0.8481759491915, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,6.24827), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 121, "beams": [{"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.04699663329416191, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.22008006441144712, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(movie),spoken_language.movie_id,movie.id),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.2839848183735169, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),keyword.name))", "score": -0.2988277474546553, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,cast.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.31128676351149276, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),country.name))", "score": -0.33211833100164884, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(cast),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3474572174502116, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,has_keyword.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3480610687491502, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(keyword),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3651463109755961, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,oscar_winner.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3658000296111325, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(oscar_winner),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3711381679273698, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),has_keyword.keyword_id,language.iso_639_1), language.name),language.name))", "score": -0.3853519800127345, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.38590407922665376, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(movie),spoken_language.movie_id,movie.id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3907676118296722, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),movie.id,language.iso_639_1), language.name),language.name))", "score": -0.3939645653851803, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 122, "beams": [{"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06), oscar.id),oscar.number)", "score": -0.11856250242975831, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06), oscar.category),oscar.number)", "score": -0.25545547531314, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,>,1975-03-06), oscar.id),oscar.number)", "score": -0.26848133954913395, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(filter(merge(filter(getData(person),person.birth_day,>,1975-03-06),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_day,>=,1975-03-06),oscar.number)", "score": -0.2801635844137817, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06), oscar.number),oscar.number)", "score": -0.30172158031031426, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06), oscar.sub_category),oscar.number)", "score": -0.30400487308508267, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06), oscar.id),oscar.number)", "score": -0.3065939708046731, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(filter(merge(filter(getData(person),person.birth_day,>,1975-03-06),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),oscar.number)", "score": -0.3156280045245765, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,>,1975-03-06),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), movie.runtime),oscar.number)", "score": -0.3164110514595242, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,>,1975-03-06),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.category),oscar.number)", "score": -0.32010136274844275, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,>,1975-03-06),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)", "score": -0.3321763661652023, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,>,1975-03-06),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.sub_category),oscar.number)", "score": -0.3639200482174826, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(filter(merge(filter(getData(person),person.birth_day,>,1975-03-06),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_day,=,1975-03-06),oscar.number)", "score": -0.36732205980766763, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,>,1975-03-06),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), person.birth_day),oscar.number)", "score": -0.3677561209043485, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06), oscar.year),oscar.number)", "score": -0.36904060681339607, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 123, "beams": [{"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))", "score": -0.016066362361016218, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.release_date,=,2014-01-07), movie.budget),movie.budget))", "score": -0.5471784396056628, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),movie.id,cast.movie_id),movie.release_date,=,2014-01-07), movie.budget),movie.budget))", "score": -0.5514306314010987, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),movie.id,has_genre.movie_id),movie.release_date,=,2014-01-07), movie.budget),movie.budget))", "score": -0.5678999845259946, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),movie.id,has_genre.movie_id),movie.release_date,=,2014-01-07), movie.budget),movie.budget))", "score": -0.5721521763214305, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,=,2014-01-07),getData(cast),movie.id,cast.movie_id),getData(movie),cast.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.5884297449962723, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2014-01-07), movie.budget),movie.budget))", "score": -0.6170441253125318, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,=,2014-01-07), movie.budget),movie.budget))", "score": -0.6183402322087433, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,=,2014-01-07),getData(cast),movie.id,cast.movie_id),getData(movie),has_genre.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.6526612978217777, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,2014-01-07),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.budget),movie.budget))", "score": -0.6681714531180103, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,2014-01-07),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.budget),movie.budget))", "score": -0.6763247922783251, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,2014-01-07),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget), movie.budget),movie.budget))", "score": -0.676813560954934, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,2014-01-07),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),movie.id,cast.movie_id), movie.budget),movie.budget))", "score": -0.6821246629468546, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,2014-01-07),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.budget),movie.budget))", "score": -0.6846952083833306, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,2014-01-07),getData(movie),movie.id,movie.budget), movie.budget),movie.budget))", "score": -0.7049779175074523, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 124, "beams": [{"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.10723651089756459, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.1838252011784789, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.3489838752993819, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.sub_category,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.49737452604858845, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.5603432633124612, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.60388852433789, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.6128368292102095, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.year,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.6559951219805953, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,Imagine Me & You), movie.id),movie.runtime)", "score": -0.7003690915469564, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Imagine Me & You), movie.runtime),movie.title))", "score": -0.7061848757421103, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.7098088774928328, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Imagine Me & You), movie.runtime),movie.vote_count))", "score": -0.744281244054946, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Imagine Me & You), movie.id),movie.runtime)", "score": -0.7461306298235625, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar_winner.movie_id,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.747045329595494, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}, {"orig_question": "What is the movie run time where the movie name is Imagine Me & You?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Imagine Me & You), movie.runtime),movie.runtime))", "score": -0.7550963077792403, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,Imagine Me & You), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 125, "beams": [{"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)", "score": -0.056539303169616646, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,<,151), movie.id),movie.revenue)", "score": -0.3457388643786178, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,!=,151), movie.id),movie.revenue)", "score": -0.47809742569358804, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.budget)", "score": -0.5507129738621599, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.popularity)", "score": -0.6456684905152865, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(filter(getData(movie),movie.runtime,>,151),movie.revenue)", "score": -0.6653376565594609, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.vote_count)", "score": -0.786056843671327, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>=,151), movie.id),movie.revenue)", "score": -0.8109296136516252, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,151), movie.id),movie.revenue)", "score": -0.8201040787452825, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,<=,151), movie.id),movie.revenue)", "score": -0.8238027302928697, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,<,151), movie.id),movie.budget)", "score": -0.839912535071161, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,null,151), movie.id),movie.revenue)", "score": -0.8555510377871534, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.id)", "score": -0.8633816270513709, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,>,151), movie.id),movie.revenue)", "score": -0.8683259663154689, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.runtime)", "score": -0.8781189276342775, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 126, "beams": [{"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.04598705961979821, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "score": -0.21185883239898812, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.27269974531306873, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.32297849980935434, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.revenue,<,25035950),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3363662899870209, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3387439238528044, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,>,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3502464324392087, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.366699892430654, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),person.gender))", "score": -0.3741818347517491, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),country.name))", "score": -0.3765731543744618, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),has_genre.genre_id,language.iso_639_1), language.name),language.name))", "score": -0.39160106647063314, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.39179252985871155, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),keyword.name))", "score": -0.3927865870719925, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.3942056281133214, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.name), language.name),language.name))", "score": -0.400750763887531, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 127, "beams": [{"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)", "score": -0.020108513910165878, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.revenue)", "score": -0.5522517428575573, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,<=,24.5985), movie.id),movie.budget)", "score": -0.6321077128850998, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,=,24.5985), movie.id),movie.budget)", "score": -0.6429591177249231, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,>=,24.5985), movie.id),movie.budget)", "score": -0.7306195342169453, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.budget),movie.budget)", "score": -0.7475704464985884, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>,24.5985), movie.id),movie.budget)", "score": -0.766641697658135, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.vote_count)", "score": -0.793273747538633, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.release_date),movie.budget)", "score": -0.8467790276830934, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(filter(getData(movie),movie.popularity,>=,24.5985),movie.budget)", "score": -0.8632943190765677, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),person.gender,>=,24.5985), movie.id),movie.budget)", "score": -0.8817608216602827, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.release_date)", "score": -0.8895982175782772, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,>=,24.5985), movie.id),movie.budget)", "score": -0.92360242334921, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>=,24.5985), movie.id),movie.budget)", "score": -0.9302767749164347, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,!=,24.5985), movie.id),movie.budget)", "score": -0.9482584950156127, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 128, "beams": [{"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.budget))", "score": -0.11421324223820106, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.release_date))", "score": -0.1423233775331275, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.category,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.budget))", "score": -0.2064132810070096, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.category,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.release_date))", "score": -0.234523416301936, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),oscar.year,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.budget))", "score": -0.3203483808916469, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,sound editing),movie.budget),movie.budget))", "score": -0.32768917509012274, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),movie.status,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.budget))", "score": -0.328785703765873, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.revenue),movie.budget))", "score": -0.33905384307003383, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),oscar.year,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.release_date))", "score": -0.3484585161865733, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),movie.status,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.release_date))", "score": -0.3568958390607994, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.title))", "score": -0.360555455098647, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),oscar.year,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.budget))", "score": -0.36265120175668697, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.year,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.revenue),movie.release_date))", "score": -0.3671639783649603, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,sound editing),movie.budget),movie.release_date))", "score": -0.36902119241737225, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}, {"orig_question": "When was the movie with the highest budget released, which won an oscar for sound editing?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),oscar_winner.oscar_id,=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget),movie.budget))", "score": -0.38055400088890684, "correct_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound editing),movie.budget),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 129, "beams": [{"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.103807922481396, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,!=,1886-10-12),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))", "score": -0.19193482961411135, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.birth_day,!=,1886-10-12),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))", "score": -0.20551544237289007, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.2454728737433909, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.2638028465229314, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.release_date,!=,1886-10-12), movie.title),movie.title))", "score": -0.2675381698649482, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.2950407992103256, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "score": -0.30586736452456154, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),movie.release_date,!=,1886-10-12), movie.title),movie.title))", "score": -0.3221153933085477, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.33058398190585875, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),movie.release_date,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.34358051536511647, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.35064734454597885, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.35956474214268214, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.36926441238334323, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),person.birth_day,!=,1886-10-12),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.3874817722061257, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 130, "beams": [{"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,2003-08-08), movie.id),movie.revenue)", "score": -0.23466692791613464, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)", "score": -0.3742807834318543, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,movie.id),movie.status,=,2003-08-08), movie.id),movie.revenue)", "score": -0.4777435094249652, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,movie.id),movie.status,=,2003-08-08), movie.id),movie.revenue)", "score": -0.48353266144075163, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,2003-08-08), movie.revenue),movie.revenue))", "score": -0.4880960144146229, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.oscar_id),movie.status,=,2003-08-08), movie.id),movie.revenue)", "score": -0.5175723305030921, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,cast.movie_id),movie.status,=,2003-08-08), movie.id),movie.revenue)", "score": -0.5231262898249796, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id),movie.status,=,2003-08-08), movie.id),movie.revenue)", "score": -0.5233614825188786, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,cast.movie_id),movie.status,=,2003-08-08), movie.id),movie.revenue)", "score": -0.528915441840766, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.status,=,2003-08-08), movie.id),movie.revenue)", "score": -0.5366543073756778, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.movie_id),movie.status,=,2003-08-08), movie.id),movie.revenue)", "score": -0.5424434866128408, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,movie.id),movie.release_date,=,2003-08-08), movie.id),movie.revenue)", "score": -0.5438579172809967, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,2003-08-08),merge(getData(movie),getData(movie),oscar_nominee.movie_id,movie.id),person.id,movie.id), movie.id),movie.revenue)", "score": -0.552280307278815, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,2003-08-08), movie.id),movie.revenue)", "score": -0.553030048231777, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}, {"orig_question": "Which is the average revenue of the movies that were released on August 8th 2003?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,2003-08-08),merge(getData(movie),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,movie.id), movie.id),movie.revenue)", "score": -0.6144263834199432, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2003-08-08), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 131, "beams": [{"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<=,1277),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.22313414553426267, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,>=,1277),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.24363479029759208, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,1277),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),person.id,oscar_nominee.person_id), movie.title),movie.vote_count))", "score": -0.2968952146841474, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,1277),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.31262151290393364, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,1277),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.vote_count))", "score": -0.3221577199858298, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),movie.vote_count,<=,1277),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.3269399151917468, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,=,1277),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),person.id,oscar_nominee.person_id), movie.title),movie.vote_count))", "score": -0.3296687497052105, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,<=,1277),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.33101936690090966, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,1277),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.33269158058825715, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<=,1277),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.title))", "score": -0.33446629626451935, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,=,1277),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.33551809165338825, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,1277),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,person.id),person.id,oscar_nominee.person_id), movie.title),movie.vote_count))", "score": -0.34184262895796685, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,=,1277),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.34539504792499676, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),movie.vote_count,>=,1277),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.34744055109479277, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many movies with a vote count less or equal to 1277 have oscar nominees who already died?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,1277),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,person.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.35756892717775307, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,1277),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 132, "beams": [{"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))", "score": -0.01795804848188709, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.budget),movie.revenue))", "score": -0.4688841283623333, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1584), movie.revenue),movie.revenue))", "score": -0.5388611976359243, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,1584), movie.revenue),movie.revenue))", "score": -0.5560696546290274, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,1584), movie.revenue),movie.revenue))", "score": -0.5574489657137747, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.budget))", "score": -0.6774398747202213, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.vote_count))", "score": -0.6836664739366825, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.vote_count),movie.revenue))", "score": -0.6910096288029308, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.popularity),movie.revenue))", "score": -0.7169947505299206, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.release_date),movie.revenue))", "score": -0.7268973470036144, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.id),movie.revenue))", "score": -0.7360795021359081, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1584), movie.revenue),movie.revenue))", "score": -0.7604749623988027, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,1584), movie.revenue),movie.revenue))", "score": -0.8279600632795336, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,1584), movie.revenue),movie.revenue))", "score": -0.8402135861524584, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,1584), movie.revenue),movie.revenue))", "score": -0.8671664783450979, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 133, "beams": [{"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))", "score": -0.014914157900420832, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,1405), movie.popularity),movie.popularity))", "score": -0.4785716134192626, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1405), movie.popularity),movie.popularity))", "score": -0.5576017099501769, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.status))", "score": -0.5933333065895567, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.vote_average),movie.popularity))", "score": -0.6678643097238819, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.status),movie.popularity))", "score": -0.6786898245172779, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,1405), movie.popularity),movie.popularity))", "score": -0.686247070419995, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.original_language),movie.popularity))", "score": -0.7030243148165027, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.release_date))", "score": -0.7641428139595519, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.vote_average))", "score": -0.7859195497421751, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.revenue))", "score": -0.7928800013451109, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.original_language))", "score": -0.7957336333183775, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.revenue),movie.popularity))", "score": -0.8083740939455311, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,1405), movie.popularity),movie.popularity))", "score": -0.8251298270024563, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}, {"orig_question": "What popularity do the movies have with a vote count of at most 1405.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),person.gender))", "score": -0.8295406725792418, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1405), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 134, "beams": [{"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))", "score": -0.043605083261354594, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,!=,Released), movie.runtime),movie.runtime))", "score": -0.2676327057524759, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,Released), movie.runtime),movie.runtime))", "score": -0.3581523724242288, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,!=,Released), movie.runtime),movie.runtime))", "score": -0.4802232511683542, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,Released), movie.runtime),movie.runtime))", "score": -0.5582902558489877, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.release_date))", "score": -0.7258930767529819, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), oscar.year),movie.runtime))", "score": -0.7988314031499613, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),production_country.movie_id,!=,Released), movie.runtime),movie.runtime))", "score": -0.8104502089663583, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), person.death_day),movie.runtime))", "score": -0.8109391330617655, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.vote_count),movie.runtime))", "score": -0.8134840129750955, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,Released), movie.runtime),movie.runtime))", "score": -0.815977168862446, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,Released), movie.runtime),movie.runtime))", "score": -0.8301285036250192, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.runtime))", "score": -0.8537178038495767, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),oscar.category,!=,Released), movie.runtime),movie.runtime))", "score": -0.8564727584707725, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes are there for movies which are not Released?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.vote_average),movie.runtime))", "score": -0.8627371938309807, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 135, "beams": [{"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_count,>,760),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.19354046473046255, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_average,>,760),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2239692343127641, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,760),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2970019813862909, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.runtime,>,760),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.32819973051803164, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.revenue,>,760),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.36542555580064573, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_count,>,760),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.37132866237985546, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_count,>,760),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.37287937028231904, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_average,>,760),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.394998496443845, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_count,!=,760),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.39827803875574563, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_average,>,760),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.40355904212897964, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,760), company.name),company.name))", "score": -0.4079600900220744, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_count,>,760),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.41538357432146644, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.id,>,760),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.4236336626872251, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_average,>,760),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.4603639106867142, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}, {"orig_question": "What are the names of the production companies of the movies with more than 760 votes?", "inferred_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.runtime,>,760),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.49424419864079366, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,>,760), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 136, "beams": [{"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,>=,1911-05-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.vote_count)", "score": -0.12872683109994085, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<=,1911-05-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.vote_count)", "score": -0.15827073102399208, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,=,1911-05-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.vote_count)", "score": -0.15941512677041375, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,<=,1911-05-11), movie.id),movie.vote_count)", "score": -0.2429540738296641, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>=,1911-05-11), movie.id),movie.vote_count)", "score": -0.25169177276936666, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,=,1911-05-11), movie.id),movie.vote_count)", "score": -0.26643597734328384, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,>=,1911-05-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.vote_average)", "score": -0.2936393374413356, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<=,1911-05-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.vote_average)", "score": -0.32318323736538684, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,=,1911-05-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.vote_average)", "score": -0.3243276331118085, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,>=,1911-05-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.vote_average),movie.vote_count)", "score": -0.3491112764655443, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,=,1911-05-11), movie.id),movie.vote_count)", "score": -0.374872422149736, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<=,1911-05-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.vote_average),movie.vote_count)", "score": -0.3786551763895955, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,=,1911-05-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.vote_average),movie.vote_count)", "score": -0.3797995721360172, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_place,>=,1911-05-11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.vote_count)", "score": -0.38494619815078823, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the movie vote counts of movies with an oscar winner who was born on or earlier than May 11th 1911?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,=,1911-05-11), movie.id),movie.vote_count)", "score": -0.397572255513388, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1911-05-11),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 137, "beams": [{"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))", "score": -0.27944926393684, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.30884344090362986, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.3120208016354108, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.3305657293217541, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.3348241745953631, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,production_country.movie_id),movie.popularity),movie.runtime))", "score": -0.36978991257184907, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.37137002816631876, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.381944457501761, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.38991495585266206, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.4004893851881043, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(crew),getData(movie),oscar_winner.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.40310458202306076, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,movie.status),movie.popularity),movie.runtime))", "score": -0.41102933992604845, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.4208624462997981, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,movie.popularity),movie.popularity),movie.runtime))", "score": -0.43688992114440844, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,oscar_winner.oscar_id),movie.popularity),movie.runtime))", "score": -0.44843127998209636, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 138, "beams": [{"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "score": -0.15501284407691393, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.1846747092212308, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "score": -0.24196785822391523, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.2568180721125275, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.2637653831927236, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.status,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.2679334737488109, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.2788504370821877, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.death_place))", "score": -0.296529588695933, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "score": -0.3028027593642863, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(genre),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "score": -0.31649452880917184, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.3236781577068547, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,movie.id),oscar.category,=,special effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.3252591710598589, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(language),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "score": -0.3312975461449212, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.oscar_id), person.death_place),person.death_place))", "score": -0.34327467001693596, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "In how many places did oscar winners in the category special effects die? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(production_country),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "score": -0.34546498696123196, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 139, "beams": [{"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.title))", "score": -0.21785948150023957, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.title))", "score": -0.30048261265616033, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,oscar_nominee.person_id),getData(movie),cast.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.title))", "score": -0.30438549885166766, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,1981-08-01),movie.popularity),movie.title))", "score": -0.3088030988488161, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.title))", "score": -0.3128166632751236, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.title))", "score": -0.32404068872234015, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))", "score": -0.3733751195773777, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.title))", "score": -0.37533181084966827, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),has_genre.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.title))", "score": -0.3793387854401548, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(crew),person.id,oscar_nominee.person_id),getData(movie),cast.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.title))", "score": -0.3870086300075884, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,1981-08-01),movie.popularity),movie.title))", "score": -0.39142623000473686, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,oscar_nominee.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,1981-08-01),movie.popularity),movie.title))", "score": -0.3953291466574686, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.title))", "score": -0.39543985534549314, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,oscar_nominee.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.title))", "score": -0.39934274154100047, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}, {"orig_question": "Which movies with an actor that died on 1981-08-01 has the lowest popularity?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_day,=,1981-08-01),movie.popularity),movie.release_date))", "score": -0.4021984972868789, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_day,=,1981-08-01),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 140, "beams": [{"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.058070441850409944, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,>,2000-01-01), company.name),company.name))", "score": -0.197876526684186, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.2379423938247524, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),person.death_day,>,2000-01-01), company.name),company.name))", "score": -0.2506239914525937, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.2627439554725329, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))", "score": -0.29796392610291766, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,oscar_nominee.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.30057398618854003, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.movie_id,company.id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.35651674910103687, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>,2000-01-01),production_company.movie_id,company.id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.37915547383164233, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.38161861049949874, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>,2000-01-01),production_company.movie_id,movie.id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.3822545243793759, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,<,2000-01-01), company.name),company.name))", "score": -0.3894180176075013, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.3899612314107536, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,<=,2000-01-01), company.name),company.name))", "score": -0.3951791248127912, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.40654653096639526, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 141, "beams": [{"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,=,Colombiana), keyword.name),keyword.name))", "score": -0.16984076879970875, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))", "score": -0.17202429705479344, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,=,Colombiana), keyword.name),keyword.name))", "score": -0.21693111978664234, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.status,=,Colombiana), keyword.name),keyword.name))", "score": -0.21884231836939994, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,=,Colombiana), keyword.name),keyword.name))", "score": -0.2260646732414353, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))", "score": -0.23986882652168642, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,=,Colombiana), keyword.name),keyword.name))", "score": -0.241048661866789, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.status,=,Colombiana), keyword.name),keyword.name))", "score": -0.25977553547391696, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,=,Colombiana), keyword.name),keyword.name))", "score": -0.2796114584859549, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,=,Colombiana), keyword.name),keyword.name))", "score": -0.28198477401268346, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,=,Colombiana), keyword.name),keyword.name))", "score": -0.33020391738738164, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,=,Colombiana), keyword.name),keyword.name))", "score": -0.34167573395189177, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.homepage,=,Colombiana), keyword.name),keyword.name))", "score": -0.3948483314285815, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),oscar.sub_category,=,Colombiana), keyword.name),keyword.name))", "score": -0.3992349868857572, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}, {"orig_question": "Which keywords exist for movies called Colombiana?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,=,Colombiana), keyword.name),keyword.name))", "score": -0.4013662749095808, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,Colombiana), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 142, "beams": [{"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,m),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.oscar_id), oscar.category),oscar.category))", "score": -0.21082045668815036, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,m),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.category),oscar.category))", "score": -0.22527077272033633, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,m),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.oscar_id), oscar.category),oscar.category))", "score": -0.23309553712894054, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.category,=,m), oscar.category),oscar.category))", "score": -0.3083638917392549, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,m),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.32032660079637526, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,m),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar_nominee.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.3344349556018241, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,m),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.oscar_id), oscar.category),movie.title))", "score": -0.35097720274522387, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,m),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.3523013213939253, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,m),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar_nominee.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.36195702422523024, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,m),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar_nominee.movie_id,oscar_nominee.oscar_id), oscar.category),oscar.category))", "score": -0.363332437348109, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,m),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.category),movie.title))", "score": -0.3654275187774098, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,m),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar_nominee.oscar_id,movie.id), oscar.category),oscar.category))", "score": -0.3735748081799081, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,m),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar_nominee.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.37599609066057293, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,m),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar_nominee.movie_id,oscar_nominee.oscar_id), oscar.category),oscar.category))", "score": -0.39085455990185036, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}, {"orig_question": "In which oscar category are the males nominee at?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,m),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar_nominee.oscar_id,movie.id), oscar.category),oscar.category))", "score": -0.4010969307336495, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,m), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 143, "beams": [{"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),movie.id,has_genre.genre_id),movie.popularity,=,ar), movie.id),movie.revenue)", "score": -0.2649466092303533, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,ar), movie.id),movie.revenue)", "score": -0.29891368950011815, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,ar), movie.id),movie.revenue)", "score": -0.3009990881010767, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.popularity,=,ar), movie.id),movie.revenue)", "score": -0.30459283385108527, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),movie.id,has_genre.movie_id),movie.popularity,=,ar), movie.id),movie.revenue)", "score": -0.3201539927690943, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.movie_id),movie.popularity,=,ar), movie.id),movie.revenue)", "score": -0.3598002173898263, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),oscar.id,has_genre.genre_id),movie.popularity,=,ar), movie.id),movie.revenue)", "score": -0.3828511792903538, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),movie.id,has_genre.genre_id),movie.release_date,=,ar), movie.id),movie.revenue)", "score": -0.39002207930900534, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),movie.id,has_genre.genre_id),movie.revenue,=,ar), movie.id),movie.revenue)", "score": -0.39066326976123095, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),movie.id,has_genre.genre_id),movie.popularity,=,ar), movie.id),movie.revenue)", "score": -0.40390610652967224, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,has_genre.genre_id),movie.popularity,=,ar), movie.id),movie.revenue)", "score": -0.40802052686615425, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.popularity,=,ar), movie.id),movie.revenue)", "score": -0.4147200529901326, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),movie.id,movie.id),movie.popularity,=,ar), movie.id),movie.revenue)", "score": -0.4252328256037402, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),has_genre.movie_id,movie.id),movie.id,has_genre.genre_id),movie.popularity,=,ar), movie.id),movie.revenue)", "score": -0.4275875767605545, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}, {"orig_question": "What is the total revenue of all Arabic movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.release_date,=,ar), movie.id),movie.revenue)", "score": -0.4296683039297373, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,ar), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 144, "beams": [{"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.10886748917025817, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.16974425989268008, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,=,0.217538), oscar.number),oscar.sub_category))", "score": -0.21457160113920415, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,=,0.217538), oscar.sub_category),oscar.number))", "score": -0.2470992589037988, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.2536624274866323, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))", "score": -0.27038670006372817, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,0.217538),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.2729143595251, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.number),oscar.sub_category))", "score": -0.27489771853521344, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.number))", "score": -0.306166583646216, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.3387440082028759, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.3526131311728769, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.3526494754261384, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,=,0.217538), oscar.number),oscar.number))", "score": -0.35280337087274477, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.35456697263860876, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,=,0.217538), oscar.category),oscar.sub_category))", "score": -0.35496357221655866, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 145, "beams": [{"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)", "score": -0.099922211808631, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(filter(getData(movie),movie.budget,<=,72000000),movie.vote_count)", "score": -0.2377850151985951, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_average)", "score": -0.5342925451932298, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,<=,72000000), movie.id),movie.vote_count)", "score": -0.568431236885862, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,<=,72000000), movie.id),movie.vote_count)", "score": -0.5917865604311393, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,<=,72000000), movie.id),movie.vote_count)", "score": -0.5944281863337924, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(filter(getData(movie),movie.budget,<,72000000),movie.vote_count)", "score": -0.6080314920128465, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.runtime)", "score": -0.6573902450784317, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,=,72000000), movie.id),movie.vote_count)", "score": -0.6722175666084004, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(filter(getData(movie),movie.budget,<=,72000000),movie.vote_average)", "score": -0.678614419965971, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.revenue)", "score": -0.6877039730047494, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,>=,72000000), movie.id),movie.vote_count)", "score": -0.7348811232250243, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.budget)", "score": -0.7352748842237596, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.vote_count),movie.vote_count)", "score": -0.7414951589395468, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<,72000000), movie.id),movie.vote_count)", "score": -0.7696955935209994, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 146, "beams": [{"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), oscar.category),oscar.category))", "score": -0.231500125745881, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), movie.title),oscar.category))", "score": -0.23229403257725006, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), company.name),oscar.category))", "score": -0.2514215340067056, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(has_keyword),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), oscar.category),oscar.category))", "score": -0.26651306237475886, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(has_keyword),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), movie.title),oscar.category))", "score": -0.26730696920612795, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(has_keyword),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), company.name),oscar.category))", "score": -0.28643447063558347, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,keyword.id),keyword.id,has_keyword.keyword_id), oscar.category),oscar.category))", "score": -0.3029544648681554, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,keyword.id),keyword.id,has_keyword.keyword_id), movie.title),oscar.category))", "score": -0.3037483716995245, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), oscar.category),company.name))", "score": -0.3056581870516794, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),has_keyword.keyword_id,oscar.id),keyword.id,has_keyword.keyword_id), oscar.category),oscar.category))", "score": -0.3063784397533325, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), movie.title),company.name))", "score": -0.3064520938830485, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),has_keyword.keyword_id,oscar.id),keyword.id,has_keyword.keyword_id), movie.title),oscar.category))", "score": -0.3071723465847016, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), oscar.sub_category),oscar.category))", "score": -0.31519113537370075, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), oscar.category),movie.title))", "score": -0.3201184788220867, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}, {"orig_question": "In how many categories are movies with the keyword expiration nominated for an oscar?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,expiration),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.3209123856534558, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,expiration), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 147, "beams": [{"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.08238183056399564, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.19868707676272257, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.20873716349271637, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.27131655255246434, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_count),movie.vote_count))", "score": -0.2740693024100091, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,<,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.27613541695756333, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,TV Movie),movie.revenue),movie.vote_count))", "score": -0.36783258087065324, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.3748821840338973, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_count),movie.vote_count))", "score": -0.390374548608736, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.budget),movie.vote_count))", "score": -0.3910568878980248, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,TV Movie),getData(has_genre),genre.id,has_genre.movie_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.4245420841100979, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,<,TV Movie),movie.revenue),movie.vote_count))", "score": -0.4397756599691296, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(has_genre),genre.name,=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.44184827570965185, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,TV Movie),getData(has_genre),movie.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.44378476334114014, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie with the most revenue, which doesnt belong to the genre TV Movie?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),merge(getData(movie),getData(movie),movie.id,has_genre.movie_id),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.4575369451936494, "correct_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 148, "beams": [{"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.13328258943111224, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(merge(filter(getData(language),language.name,=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.18604595900252172, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(language),language.name,=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),getData(movie),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)", "score": -0.22503403348178755, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.2444663093577087, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Magyar), movie.id),movie.vote_average)", "score": -0.2561973521302518, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(movie),spoken_language.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.27131184835913424, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(movie),spoken_language.movie_id,movie.id), movie.popularity),movie.vote_average)", "score": -0.27418156217639156, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(language),language.name,=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)", "score": -0.28019197209470526, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Magyar),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.29032241505419504, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(merge(filter(getData(language),language.name,=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.32275616983180067, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(language),language.name,=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)", "score": -0.3265800059041807, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(merge(filter(getData(language),language.name,=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.popularity),movie.vote_average)", "score": -0.3267591640000311, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(language),language.name,=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),getData(movie),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.popularity)", "score": -0.33346300240981797, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(merge(filter(getData(language),language.name,=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.34296721851711326, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of all ratings of movies that are translated to Magyar?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(language),language.name,=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),getData(movie),spoken_language.movie_id,spoken_language.iso_639_1), movie.id),movie.vote_average)", "score": -0.3436430408776255, "correct_code": "sum(distinct(merge(filter(getData(language),language.name,=,Magyar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 149, "beams": [{"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.release_date,=,Released), person.birth_day),person.birth_day))", "score": -0.08966872262670517, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.status,=,Released), person.birth_day),person.birth_day))", "score": -0.18435524489269373, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.22513013658409153, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.runtime,=,Released), person.birth_day),person.birth_day))", "score": -0.2461446200684446, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.release_date,=,Released), person.birth_day),person.death_day))", "score": -0.2517281901746212, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Released),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.2897157640570961, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,=,Released),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.29120591310970484, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.title,=,Released), person.birth_day),person.birth_day))", "score": -0.3153654428098705, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,Released),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.32223516625257986, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))", "score": -0.3281688918428715, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),oscar.category,=,Released),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.3282175764808855, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),crew.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.release_date,=,Released), person.birth_day),person.birth_day))", "score": -0.34513611594595645, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.status,=,Released), person.birth_day),person.death_day))", "score": -0.3464147124406098, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),oscar.year,=,Released),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.37076634109411843, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,crew.movie_id),movie.release_date,=,Released), person.birth_day),person.birth_day))", "score": -0.37756485972111065, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 150, "beams": [{"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.06445495566107148, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.death_place))", "score": -0.18537376031601838, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.original_language,!=,ro),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "score": -0.2543454051186768, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.303208407730603, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), company.name),person.death_place))", "score": -0.30806151170282453, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),company.name))", "score": -0.32138449621460186, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.movie_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.33665834513686954, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), genre.name),person.death_place))", "score": -0.3447629676899005, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.birth_place))", "score": -0.3569568153985148, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.36362100796422886, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),person.birth_day,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.3804779047651721, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id), person.death_place),person.death_place))", "score": -0.3807930722467095, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.38121624990619113, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.38251288524575283, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), keyword.name),person.death_place))", "score": -0.384785404665016, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 151, "beams": [{"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.06716951792621206, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,af),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.09348837753016422, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,af), genre.name),genre.name))", "score": -0.2066832894819181, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.31576990748363365, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,af), genre.name),genre.name))", "score": -0.3700448260636887, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.name), genre.name),genre.name))", "score": -0.4084878738450234, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.42457635141860356, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.43066467574482725, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.original_language,=,af),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4308005759470803, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,af),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),has_genre.genre_id))", "score": -0.43334982070403233, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,spoken_language.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.43854672686988894, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),person.death_place))", "score": -0.4433900908986368, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(has_genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.44622340063923877, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,af),merge(getData(has_genre),getData(has_genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4547943286210925, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre of a movie with af as original language?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4587940904627879, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,af),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 152, "beams": [{"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.popularity),movie.popularity)", "score": -0.09286380670171486, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)", "score": -0.17649759594351896, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.17669434310391016, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.18239696290035368, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,!=,sound editing), movie.id),movie.popularity)", "score": -0.282799652577081, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,sound editing),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.popularity),movie.popularity)", "score": -0.3336318382795385, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,sound editing),getData(movie),oscar_winner.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.356906261712756, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,sound editing),getData(movie),oscar_winner.movie_id,movie.id),getData(movie),oscar_winner.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.37241685474628156, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,sound editing),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.3784245829829804, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,sound editing),getData(movie),oscar_winner.movie_id,movie.id),getData(movie),oscar_winner.movie_id,oscar_winner.oscar_id), movie.popularity),movie.popularity)", "score": -0.3920668127059856, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.popularity)", "score": -0.3939096451806808, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,sound editing),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)", "score": -0.4195457059109032, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.popularity),movie.popularity)", "score": -0.4266164761245222, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.status),movie.popularity)", "score": -0.4269288346157628, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,!=,sound editing), movie.popularity),movie.popularity)", "score": -0.4365940939319042, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 153, "beams": [{"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.181850064177033, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),genre.name))", "score": -0.23035582772561755, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.title))", "score": -0.29778949585268055, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),genre.name))", "score": -0.29906224218943445, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),genre.name))", "score": -0.3104331002540965, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.popularity))", "score": -0.33173111530751015, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),language.name))", "score": -0.35538991507602646, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),language.name,=,Kiswahili),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),genre.name))", "score": -0.35803456112237514, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),genre.name))", "score": -0.3616974288842513, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),language.name,=,Kiswahili),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),genre.name))", "score": -0.3694054191870372, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),movie.original_language))", "score": -0.37303394892037667, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),genre.name))", "score": -0.37306828694891336, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),has_genre.genre_id))", "score": -0.38316128629326696, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1), language.name),movie.original_language))", "score": -0.3844048069850387, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.4388194086933101, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 154, "beams": [{"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))", "score": -0.015668273495975882, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,1884), movie.budget),movie.budget))", "score": -0.49570235941791907, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,1884), movie.budget),movie.budget))", "score": -0.4995518657960929, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1884), movie.budget),movie.budget))", "score": -0.7218112084665336, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.title))", "score": -0.7544010112178512, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.release_date),movie.budget))", "score": -0.8194326541852206, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.title),movie.budget))", "score": -0.8279181502293795, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,1884), movie.budget),movie.budget))", "score": -0.8472483751829714, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,1884), movie.budget),movie.budget))", "score": -0.8641125557478517, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.vote_count))", "score": -0.8758631775272079, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.id),movie.budget)", "score": -0.8799419429422787, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,1884), movie.budget),movie.budget))", "score": -0.8814710972364992, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1884), movie.budget),movie.budget))", "score": -0.8836331698694266, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>,1884), movie.budget),movie.budget))", "score": -0.9040179250296205, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget of the movies with a vote count higher than 1884?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,null,1884), movie.budget),movie.budget))", "score": -0.9196359400521033, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1884), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 155, "beams": [{"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.06501671197503042, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.22817085757621067, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),person.birth_place,=,Kyrgyz Republic),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.29627886526413644, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.29886365692887557, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.2995644344680379, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3145847744612703, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3178668316703166, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.3353605206644191, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.3403205145499577, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.3514443628561112, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic),getData(movie),production_country.movie_id,movie.id), movie.title),movie.status))", "score": -0.36308522283050587, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),person.id,production_country.iso_3166_1),country.name,=,Kyrgyz Republic),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.3719488302779845, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic),getData(movie),movie.status,movie.id), movie.title),movie.title))", "score": -0.3748330125820308, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Kyrgyz Republic), movie.title),movie.title))", "score": -0.37510076107032175, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Kyrgyz Republic), movie.title),movie.title))", "score": -0.37986031401654896, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 156, "beams": [{"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1967-08-13), person.gender),person.gender))", "score": -0.02925309781858232, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,1967-08-13), person.gender),person.gender))", "score": -0.37394443863013294, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,1967-08-13), person.gender),person.gender))", "score": -0.415524221592932, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1967-08-13), person.gender),person.gender))", "score": -0.4870419237850001, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id),person.death_day,=,1967-08-13), person.gender),person.gender))", "score": -0.5588906107191761, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id),person.death_day,=,1967-08-13), person.gender),person.gender))", "score": -0.5698839985578714, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id),person.death_day,=,1967-08-13), person.gender),person.gender))", "score": -0.5800208982359353, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,=,1967-08-13), person.gender),person.gender))", "score": -0.5817309373732322, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.death_day,=,1967-08-13), person.gender),person.gender))", "score": -0.5887215548259412, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,=,1967-08-13), person.gender),person.gender))", "score": -0.5927244691915337, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.death_day,=,1967-08-13), person.gender),person.gender))", "score": -0.5997149692454868, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,=,1967-08-13), person.gender),person.gender))", "score": -0.6028614076333376, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))", "score": -0.6394379507837584, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1967-08-13), person.gender),movie.popularity))", "score": -0.684977455981425, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}, {"orig_question": "What are the gender of the person with a death day on 1967-08-13?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,1967-08-13), person.gender),person.gender))", "score": -0.6988650593993952, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1967-08-13), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 157, "beams": [{"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,cgi),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.054210742104153276, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "score": -0.14963253316709837, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,cgi),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.26497669158399734, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.31963316452121415, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,cgi),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.status))", "score": -0.34031436826596234, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,cgi),getData(has_keyword),keyword.name,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.37766273376073817, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.status))", "score": -0.3793722339176477, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.popularity))", "score": -0.3945323876825982, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,cgi),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.release_date))", "score": -0.40498424817435724, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id),merge(getData(spoken_language),getData(person),spoken_language.iso_639_1,language.iso_639_1),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "score": -0.4272542163889076, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,cgi),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.status),movie.popularity))", "score": -0.4341310147599001, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,cgi),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),spoken_language.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.43458166926591657, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.status),movie.popularity))", "score": -0.43577982474396937, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,cgi),getData(movie),has_keyword.movie_id,movie.id),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "score": -0.4433704186758566, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,cgi),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(spoken_language),getData(person),spoken_language.iso_639_1,language.iso_639_1),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "score": -0.4453127322933224, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 158, "beams": [{"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,>,64),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.15534976409945273, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,>,64),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.1954587078983306, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,>=,64),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.22330715915150326, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,>=,64),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2586844981176228, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,>=,64),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.26341610295038115, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>,64),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.2829202272031867, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,>,1960-06-15),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.2868757058262225, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,>,64),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.2938768991347726, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>,64),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.3230291710020646, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,>,1960-06-15),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.3269846496251004, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,>,64),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.33398584293365047, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1960-06-15),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.3508776222552372, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,>=,1960-06-15),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.3548330626683006, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,>=,64),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.3618342559768507, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}, {"orig_question": "Which production companies were involved in a movie that have been released after or at 1960-06-15 and was oscar nominated and has a oscar number higher than 64?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,>,64),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.362009170155177, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,1960-06-15),oscar_nominee.movie_id,movie.id),oscar.number,>,64), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 159, "beams": [{"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.1402595554865757, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.budget,>=,550000), person.gender),person.gender))", "score": -0.1580868179334881, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.budget,<=,550000), person.name),person.gender))", "score": -0.19367090357383168, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.budget,>=,550000), person.name),person.gender))", "score": -0.2114981660207441, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.24154433896167773, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,>=,550000), person.gender),person.gender))", "score": -0.2469766806422789, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.name),person.gender))", "score": -0.27942566573499006, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,>=,550000), person.name),person.gender))", "score": -0.28485800741559125, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.30859839009299256, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),movie.budget,>=,550000), person.gender),person.gender))", "score": -0.32642565253990496, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),movie.budget,<=,550000), person.name),person.gender))", "score": -0.36200973818024856, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,cast.movie_id),getData(person),oscar_winner.person_id,person.id),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.36494337803278276, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),movie.budget,>=,550000), person.name),person.gender))", "score": -0.37983700062716097, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,cast.movie_id),getData(person),oscar_winner.person_id,person.id),movie.budget,>=,550000), person.gender),person.gender))", "score": -0.3827706404796952, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.budget,>,550000), person.gender),person.gender))", "score": -0.38983708313069176, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 160, "beams": [{"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,!=,2004-04-07),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.vote_average)", "score": -0.3434581614379072, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,!=,2004-04-07),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.vote_average)", "score": -0.3702994867970785, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,!=,2004-04-07),merge(getData(movie),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.vote_average)", "score": -0.38005203948881805, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,!=,2004-04-07),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),person.id,movie.id), movie.id),movie.vote_average)", "score": -0.39035304393957343, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,!=,2004-04-07),merge(getData(movie),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.vote_average)", "score": -0.4068933648479894, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,!=,2004-04-07),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.vote_average)", "score": -0.4119994826188066, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,!=,2004-04-07),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.id),movie.vote_average)", "score": -0.41480455474041045, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,!=,2004-04-07),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.vote_average)", "score": -0.4152689967943158, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,!=,2004-04-07),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),person.id,movie.id), movie.id),movie.vote_average)", "score": -0.41719436929874476, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,!=,2004-04-07),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.vote_average)", "score": -0.41805881587122656, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,!=,2004-04-07),merge(getData(movie),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.vote_average)", "score": -0.4221767931342521, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,!=,2004-04-07),merge(getData(movie),getData(movie),cast.movie_id,movie.id),person.id,movie.id), movie.id),movie.vote_average)", "score": -0.42694692199048434, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,!=,2004-04-07),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.vote_average)", "score": -0.43884080344108184, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,!=,2004-04-07),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.id),movie.vote_average)", "score": -0.4416458755626857, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}, {"orig_question": "How much is the average vote of the movies which where not released on April 7th 2004?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.title,!=,2004-04-07),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.vote_average)", "score": -0.44211031761659103, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2004-04-07), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 161, "beams": [{"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.009541690909827594, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.4413948082496692, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.5356416123682656, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.5446242364039287, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.5856989111547709, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,movie.id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6032821038034416, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.6153631679299466, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,48000000), movie.original_language),movie.original_language))", "score": -0.6785325961900526, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.movie_id,language.iso_639_1),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6903402144025113, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6922763834142263, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.7096099720485429, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.7185925960842061, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,48000000), movie.original_language),movie.original_language))", "score": -0.7351708370042616, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.title))", "score": -0.7450927834506729, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,48000000), movie.original_language),movie.original_language))", "score": -0.7654736595941358, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 162, "beams": [{"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.15065905220712042, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.26558498706914097, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.27032189839164594, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.28035815410992443, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2951949468462109, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),country.name,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.31939161012197004, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3240011714828156, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),country.name,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.33117560991379574, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),oscar.category,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.33161985566603436, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.33978165030560553, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.34643211841579924, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),company.name,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3558836195297147, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_country.movie_id,movie.id),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.36567468920395874, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),country.name,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.36585144229494715, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In which country was the movie with the tagline The Film that THE MAN doesn't want you to see! produced in?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),country.name,!=,The Film that THE MAN doesn't want you to see!),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3670787961708799, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,The Film that THE MAN doesn't want you to see!),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 163, "beams": [{"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.revenue)", "score": -0.025801492018773547, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.revenue),movie.revenue)", "score": -0.283642443846657, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.revenue)", "score": -0.2965071856184638, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.sub_category,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.revenue)", "score": -0.3064913488410743, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.revenue)", "score": -0.3319816200008429, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.year,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.revenue)", "score": -0.3930345111774065, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.budget)", "score": -0.39566753087171114, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.revenue)", "score": -0.4017991519074955, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.41316068691454527, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.vote_count)", "score": -0.41407313763258846, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.number,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.revenue)", "score": -0.4332446583728603, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(production_company),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.revenue)", "score": -0.4338818546551806, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.popularity)", "score": -0.4342171740940346, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(has_genre),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.id),movie.revenue)", "score": -0.4354875166282366, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}, {"orig_question": "What is the summed movie revenue of movies nominated in the oscar category \"documentary (feature)\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)", "score": -0.4366271408237775, "correct_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,documentary (feature)), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 164, "beams": [{"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.revenue)", "score": -0.0391249494386911, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.budget)", "score": -0.23248168694793153, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.popularity)", "score": -0.279036338537158, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.revenue)", "score": -0.2892732680217704, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.33409579880265367, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.release_date),movie.revenue)", "score": -0.3912512125745939, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Gaumont), movie.id),movie.revenue)", "score": -0.39851224375747996, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.name,production_company.company_id), movie.id),movie.revenue)", "score": -0.3992755221735144, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.40238040656730234, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(merge(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.41361706917380114, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,production_company.company_id),company.id,production_company.company_id), movie.id),movie.revenue)", "score": -0.42454623776068756, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(production_company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.revenue)", "score": -0.4247832864704262, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.release_date)", "score": -0.42531485190215246, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id), movie.id),movie.revenue)", "score": -0.42709464207425213, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all movies produced by the company called Gaumont?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,=,Gaumont),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.vote_count)", "score": -0.4303377403139886, "correct_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Gaumont),getData(movie),production_company.movie_id,movie.id), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 165, "beams": [{"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(keyword),oscar_winner.oscar_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.29260140397344964, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(keyword),oscar_winner.oscar_id,keyword.id),oscar.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.3051129737404307, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.30552421052370093, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(keyword),oscar_winner.oscar_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),oscar.number))", "score": -0.3116312424684752, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.3150563155713888, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(keyword),has_keyword.keyword_id,keyword.id),oscar.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.318035780290682, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(keyword),oscar_winner.oscar_id,keyword.id),oscar.id,has_keyword.keyword_id), keyword.name),oscar.number))", "score": -0.32414281223545627, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),oscar.number))", "score": -0.3245540490187264, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,keyword.id),oscar.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.3275678853383699, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(oscar),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.3279791221216401, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),oscar.number))", "score": -0.33408615406641434, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(keyword),has_keyword.keyword_id,keyword.id),oscar.id,has_keyword.keyword_id), keyword.name),oscar.number))", "score": -0.33706561878570757, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(oscar),has_keyword.keyword_id,keyword.id),oscar.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.3404906918886212, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(keyword),oscar_winner.oscar_id,keyword.id),movie.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.3439698064559882, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,horror),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,keyword.id),oscar.id,has_keyword.keyword_id), keyword.name),oscar.number))", "score": -0.34659772383339543, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 166, "beams": [{"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.021329089410815877, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Sardaarji),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2819472703980374, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,=,Sardaarji), company.name),company.name))", "score": -0.3106206515003923, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),production_company.company_id))", "score": -0.3508436369897146, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.4023575361312766, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.id))", "score": -0.41036493022535286, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4104904685359293, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),oscar.number))", "score": -0.41496164528272156, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),keyword.name))", "score": -0.4170011762110669, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.42478508280692956, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(production_company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4272165348758968, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),person.death_place))", "score": -0.432146058723712, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.movie_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.43222142948636755, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,has_keyword.movie_id), company.name),company.name))", "score": -0.43424796452473174, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}, {"orig_question": "How many companies did produce the movie Sardaarji?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Sardaarji),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4349224520800166, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Sardaarji), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 167, "beams": [{"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.07115517690644632, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average)", "score": -0.1977628520733758, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "score": -0.23763385721145408, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.2405028277154394, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.vote_average)", "score": -0.24163612547630828, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.2638233810561072, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience),getData(movie),has_keyword.movie_id,movie.id), movie.vote_count),movie.vote_average)", "score": -0.27357375150082197, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.vote_average)", "score": -0.2888633991339511, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), oscar.sub_category),movie.vote_average)", "score": -0.3919981719891261, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.40561363792862376, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.status),movie.vote_average)", "score": -0.4461321259102643, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.4476560015408555, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.44867691757853007, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.vote_average)", "score": -0.44910915620559394, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}, {"orig_question": "what is the average vote of movies with the keyword theatre audience?", "inferred_code": "avg(distinct(merge(filter(getData(company),keyword.name,=,theatre audience),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.45054937739795187, "correct_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,theatre audience), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 168, "beams": [{"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "score": -0.007111299368261825, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,<,1100000), movie.original_language),movie.original_language))", "score": -0.6470795908086766, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,1100000), movie.original_language),movie.original_language))", "score": -0.6855733858465101, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,1100000), movie.original_language),movie.original_language))", "score": -0.7562687264799024, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,1100000), movie.original_language),movie.original_language))", "score": -0.775463308666076, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,1100000), movie.original_language),movie.original_language))", "score": -0.7925500737546827, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<,1100000), movie.original_language),movie.original_language))", "score": -0.7961080926397699, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,1100000), movie.original_language),movie.original_language))", "score": -0.8093948232053663, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.title))", "score": -0.8391570380699704, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(genre),movie.budget,<,1100000), movie.original_language),movie.original_language))", "score": -0.8548107659662492, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,1100000), movie.original_language),movie.original_language))", "score": -0.8642001408079523, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),language.name))", "score": -0.8919060162079404, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.vote_count))", "score": -0.9051192334663938, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.budget))", "score": -0.9293517998230527, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_place,<,1100000), movie.original_language),movie.original_language))", "score": -0.9339444893339532, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 169, "beams": [{"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,cs), movie.status),movie.status))", "score": -0.07989037629158702, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.title,=,cs), movie.status),movie.status))", "score": -0.41548498118064375, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,oscar_winner.oscar_id), movie.status),movie.status))", "score": -0.42430483101830674, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(production_country),getData(movie),oscar_winner.oscar_id,movie.id),movie.id,oscar_winner.oscar_id), movie.status),movie.status))", "score": -0.44086894487477263, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,oscar_winner.movie_id), movie.status),movie.status))", "score": -0.4472257906819611, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(production_country),getData(movie),production_country.iso_3166_1,movie.id),movie.id,oscar_winner.oscar_id), movie.status),movie.status))", "score": -0.4620102280033016, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(production_country),getData(movie),oscar_winner.oscar_id,movie.id),movie.id,oscar_winner.movie_id), movie.status),movie.status))", "score": -0.46378990453842706, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),movie.id,oscar_winner.oscar_id), movie.status),movie.status))", "score": -0.478818154709789, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(production_country),getData(movie),production_country.iso_3166_1,movie.id),movie.id,oscar_winner.movie_id), movie.status),movie.status))", "score": -0.484931187666956, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(production_country),getData(movie),movie.status,movie.id),movie.id,oscar_winner.oscar_id), movie.status),movie.status))", "score": -0.4936519748209757, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,movie.id),movie.id,oscar_winner.oscar_id), movie.status),movie.status))", "score": -0.4953822685662549, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),movie.id,oscar_winner.movie_id), movie.status),movie.status))", "score": -0.5017391143734433, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,oscar_winner.oscar_id), movie.status),movie.status))", "score": -0.5020753003855272, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(production_country),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.oscar_id), movie.status),movie.status))", "score": -0.506871828125271, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(production_country),getData(movie),movie.id,movie.id),movie.id,oscar_winner.oscar_id), movie.status),movie.status))", "score": -0.5073024379012697, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 170, "beams": [{"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.number))", "score": -0.18680922428426547, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.number))", "score": -0.21206053596016655, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.year))", "score": -0.22943467022067493, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.year))", "score": -0.254685981896576, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.category))", "score": -0.26170147459508986, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.category))", "score": -0.28695278627099097, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.number))", "score": -0.3287529455349619, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.sub_category))", "score": -0.33867381378178296, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.number))", "score": -0.354004257210863, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.sub_category))", "score": -0.363925125457684, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.oscar_id), oscar.year),oscar.number))", "score": -0.36400159081145134, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.year))", "score": -0.37137839147137136, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.year),person.name))", "score": -0.372960222307049, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,1995),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.number))", "score": -0.3737882767105323, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many oscar winner from the year 1995 and upwards are dead?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,1995),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.3840702090489752, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1995),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 171, "beams": [{"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.05364592046632576, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),company.name,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2234172823794258, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.22388244726090584, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2367721041047341, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2535058835291136, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.26112501847925323, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),oscar.sub_category,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3156779609282124, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),genre.name,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.35670589332722574, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),movie.title,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3573438423195123, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),production_company.company_id))", "score": -0.3650067268574067, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),movie.title,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3774741582453411, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Nine),merge(getData(production_company),getData(production_company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4013843835086714, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),person.birth_place,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4048072470964352, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,=,Nine), company.name),company.name))", "score": -0.40506918609198017, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "Which company or companies were involved in producing the movie nine?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),keyword.name,=,Nine),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.42210748230121437, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.title,=,Nine),getData(company),production_company.company_id,company.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 172, "beams": [{"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Jack Lotz),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.runtime),movie.runtime))", "score": -0.18687670329454703, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Jack Lotz),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id), movie.runtime),movie.runtime))", "score": -0.2606668140859012, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,Jack Lotz),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.runtime),movie.runtime))", "score": -0.2646370273603256, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Jack Lotz),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id), movie.runtime),movie.runtime))", "score": -0.26645700932489585, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Jack Lotz),merge(getData(crew),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.runtime),movie.runtime))", "score": -0.30057693312400935, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Jack Lotz),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id), movie.runtime),movie.runtime))", "score": -0.3123126598764917, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Jack Lotz),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.runtime),movie.runtime))", "score": -0.31539231941546425, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),movie.revenue,=,Jack Lotz), movie.runtime),movie.runtime))", "score": -0.31783351978201035, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),movie.revenue,=,Jack Lotz), movie.runtime),movie.runtime))", "score": -0.31877512776863315, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,oscar_winner.person_id),getData(movie),cast.movie_id,movie.id),movie.revenue,=,Jack Lotz), movie.runtime),movie.runtime))", "score": -0.32634836293750286, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,Jack Lotz),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id), movie.runtime),movie.runtime))", "score": -0.3384271381516798, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,Jack Lotz),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id), movie.runtime),movie.runtime))", "score": -0.34421733339067445, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),movie.revenue,=,Jack Lotz), movie.runtime),movie.runtime))", "score": -0.34995531232723015, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),cast.movie_id,movie.id),movie.revenue,=,Jack Lotz), movie.runtime),movie.runtime))", "score": -0.3584701953453456, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}, {"orig_question": "What is the movie runtime of the movie with the biggest revenue and where there is no person named Jack Lotz?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Jack Lotz),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id), movie.runtime),movie.runtime))", "score": -0.37436706717360757, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Jack Lotz),movie.revenue),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 173, "beams": [{"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,special achievement award),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.release_date),movie.release_date))", "score": -0.19529712061706675, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,special achievement award),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.release_date),movie.release_date))", "score": -0.22814512857525326, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.status,=,special achievement award), movie.release_date),movie.release_date))", "score": -0.22998911708740008, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,special achievement award),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.release_date),movie.release_date))", "score": -0.2537434886938723, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))", "score": -0.2621536472098736, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,special achievement award),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.status),movie.release_date))", "score": -0.26926400735380857, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,special achievement award),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.release_date),movie.release_date))", "score": -0.2875307531506016, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.title,=,special achievement award), movie.release_date),movie.release_date))", "score": -0.29900009287543605, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,special achievement award),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.status),movie.release_date))", "score": -0.30211201531199505, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,special achievement award),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.status),movie.release_date))", "score": -0.32771037543061404, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,special achievement award),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.release_date))", "score": -0.3354057841308913, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.status,=,special achievement award), movie.release_date),movie.release_date))", "score": -0.3544015771951852, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special achievement award),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.35805337650536856, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,special achievement award),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.popularity),movie.release_date))", "score": -0.3587262107817292, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}, {"orig_question": "When were the movies that won an Oscar for a special achievement award released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,special achievement award),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.status),movie.release_date))", "score": -0.3614976587154457, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special achievement award), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 174, "beams": [{"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.11708924129597213, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.14185492307804226, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.id),oscar.number)", "score": -0.25880126438624795, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.id),oscar.number)", "score": -0.28356694616831807, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.number)", "score": -0.2888994323701171, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.runtime),oscar.number)", "score": -0.30309389216962956, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.number)", "score": -0.31366511415218723, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.title),oscar.number)", "score": -0.32403027031381715, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.release_date),oscar.number)", "score": -0.3247497312975849, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.number),oscar.number)", "score": -0.3251499036813171, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.runtime),oscar.number)", "score": -0.3278595739516997, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.year),oscar.number)", "score": -0.3307652744288337, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.title),oscar.number)", "score": -0.34879593763453093, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.release_date),oscar.number)", "score": -0.3495153986182987, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.number),oscar.number)", "score": -0.3499155710020309, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 175, "beams": [{"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_count),movie.vote_count))", "score": -0.19454268482513726, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,647), movie.vote_count),movie.vote_count))", "score": -0.4040549967903644, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,647), movie.vote_count),movie.vote_count))", "score": -0.4183686946053058, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.runtime),movie.vote_count))", "score": -0.5566076359245926, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_count),movie.title))", "score": -0.557615969562903, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>,647), movie.id),movie.vote_count)", "score": -0.5613299002335148, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_count),movie.runtime))", "score": -0.5752492884639651, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,647), movie.vote_count),movie.vote_count))", "score": -0.5819910739082843, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,647), movie.vote_count),movie.vote_count))", "score": -0.6047942016739398, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_count))", "score": -0.6205082258675247, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,647), movie.id),movie.vote_count)", "score": -0.6450112267901651, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,647), movie.vote_count),movie.vote_count))", "score": -0.6538336251396686, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.title),movie.vote_count))", "score": -0.7026994663756341, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(distinct(filter(getData(movie),movie.vote_count,>,647), movie.id))", "score": -0.7187985166075015, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the different average votes for movies with a higher vote count than 647?", "inferred_code": "done(distinct(filter(getData(movie),movie.vote_count,!=,647), movie.id))", "score": -0.7472400917670666, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,647), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 176, "beams": [{"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.09060162405232813, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_count,>=,4524), oscar.year),oscar.year))", "score": -0.21501388293909576, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,>=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.23498489144859241, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.23827813476550286, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),movie.vote_average,>=,4524), oscar.year),oscar.year))", "score": -0.26227775048715535, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,>,4524),movie.vote_average,>=,4524), oscar.year),oscar.year))", "score": -0.298360847428468, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_average,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.31451512358698536, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,>,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.3166727532335259, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),movie.vote_average))", "score": -0.31692396663530464, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,4524),movie.vote_average,>=,4524), oscar.year),oscar.year))", "score": -0.3219740321106856, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,4524), oscar.year),oscar.year))", "score": -0.3255507282303644, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<,4524),movie.vote_average,>=,4524), oscar.year),oscar.year))", "score": -0.3658500504539282, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar_winner),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.37630010932293495, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.3857225370631025, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.year), oscar.year),oscar.year))", "score": -0.38689010673017843, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 177, "beams": [{"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.1746900979796834, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),movie.title),movie.title))", "score": -0.2204483796078455, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.2521845859020443, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)), movie.title),movie.title))", "score": -0.2696063703300258, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,>=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.2808156748532363, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,>=,documentary (feature)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.32994461586849466, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(person),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.38209319934552566, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.39030218620434, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(min(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.title),movie.title))", "score": -0.40766793705867654, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,documentary (feature)),movie.title),movie.title))", "score": -0.42141809762969246, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.4296815533967577, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,>=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.45080518302431943, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.4546020336775769, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,documentary (feature)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,person.id),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.4549570638160013, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}, {"orig_question": "What are the winner movie titles from the oscar category documentary (feature) that have won the least oscars?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,>=,documentary (feature)),movie.title),movie.title))", "score": -0.47011293087944495, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,documentary (feature)),getData(movie),oscar_winner.movie_id,movie.id),oscar.number),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 178, "beams": [{"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),crew.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.18851059263482237, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,oscar_nominee.movie_id),getData(movie),crew.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.21853690599180908, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(movie),movie.id,oscar_nominee.movie_id),getData(movie),crew.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.243625950436483, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,oscar_nominee.movie_id),getData(movie),crew.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.2799982203122898, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,oscar_nominee.movie_id),getData(movie),crew.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.28257929176551255, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_nominee.movie_id),getData(movie),crew.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.299559192143754, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),cast.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.31565994861656504, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.321392481130823, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,oscar_nominee.movie_id),getData(movie),crew.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.3336830144675884, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,oscar_nominee.movie_id),getData(movie),cast.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.34568626197355173, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,oscar_nominee.movie_id),getData(movie),crew.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.3495085262348151, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.3514187717833334, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.3542522220086539, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,cast.movie_id),getData(movie),crew.movie_id,movie.id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.3615173152943129, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,13000000),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,oscar_nominee.movie_id), movie.status),movie.status))", "score": -0.41381989337842945, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 179, "beams": [{"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.03566611661815418, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.revenue,<,28169671),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.206206936277503, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id), country.name),country.name))", "score": -0.3043840444651245, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,production_country.movie_id),movie.revenue,<,28169671),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.34322090767393515, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),production_country.iso_3166_1))", "score": -0.3476228665051886, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),person.birth_place))", "score": -0.3733258045494478, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(spoken_language),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3836153015668811, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(oscar_winner),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.4016088006520093, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,spoken_language.movie_id), country.name),country.name))", "score": -0.4038564444101419, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.4105163570436205, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.41063266667676707, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.revenue,<,28169671),getData(language),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.4156379447681365, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.4207207455007745, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), person.birth_place),country.name))", "score": -0.42707126118920086, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),movie.status))", "score": -0.4274306647434315, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 180, "beams": [{"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_count)", "score": -0.03158850794402873, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.18949367361349287, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.29569660865829867, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.vote_count)", "score": -0.3696067160413372, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_place,=,West Lavington, Wiltshire),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.3719832575955568, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id), movie.id),movie.vote_count)", "score": -0.3748762301252481, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_count)", "score": -0.3909044271941785, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.vote_count)", "score": -0.39261905080845694, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),genre.id,oscar_nominee.person_id), movie.id),movie.vote_count)", "score": -0.4051468188756687, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_count)", "score": -0.41291561913461383, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.vote_count)", "score": -0.4164183378510837, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_count),movie.vote_count)", "score": -0.42067078871455615, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.revenue)", "score": -0.4280803035227693, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,has_genre.genre_id), movie.id),movie.vote_count)", "score": -0.432084157858145, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the sum of the vote count for movies where an oscar nominee died in West Lavington, Wiltshire?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.vote_count)", "score": -0.4337363865327863, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,West Lavington, Wiltshire),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 181, "beams": [{"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))", "score": -0.06912986590759829, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.revenue),movie.revenue))", "score": -0.18895652486933498, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,nb),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.revenue),movie.revenue))", "score": -0.27961183377714816, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),language.name,=,nb),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.revenue),movie.revenue))", "score": -0.2997868011014574, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,nb), movie.revenue),movie.revenue))", "score": -0.3200629989488631, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.revenue),movie.revenue))", "score": -0.37644409775910664, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.revenue),movie.revenue))", "score": -0.3790304853824034, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),movie.original_language,=,nb),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.revenue),movie.revenue))", "score": -0.40432855020427755, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,=,nb), movie.revenue),movie.revenue))", "score": -0.4063852652219194, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),language.name,=,nb),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.revenue),movie.revenue))", "score": -0.4198957979299438, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,nb), movie.revenue),movie.revenue))", "score": -0.4226784393175993, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,nb),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.revenue),movie.revenue))", "score": -0.4245035108833741, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.popularity),movie.revenue))", "score": -0.477278396368767, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,nb),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.popularity),movie.revenue))", "score": -0.48689157098215674, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies in nb language get?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), person.gender),movie.revenue))", "score": -0.49053809409088356, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,nb), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 182, "beams": [{"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.06564825253801242, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.1974493406744338, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.budget,=,35841901), company.name),company.name))", "score": -0.26827361306845116, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.27692330809415766, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),production_company.company_id))", "score": -0.3020739774542713, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,=,35841901), company.name),company.name))", "score": -0.3072542247059627, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,=,35841901), company.name),company.name))", "score": -0.3228117411234706, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,=,35841901), company.name),company.name))", "score": -0.32357266226673737, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),keyword.name))", "score": -0.34792302044947926, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,35841901),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.35349521170201603, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>=,35841901), company.name),company.name))", "score": -0.3559567931302675, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),oscar.number))", "score": -0.3562960946395218, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_count,=,35841901), company.name),company.name))", "score": -0.3633987221516933, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),genre.name))", "score": -0.36402105681526903, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.id))", "score": -0.37042108764402576, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 183, "beams": [{"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.10105896279241498, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.budget)", "score": -0.36961785845989464, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.budget)", "score": -0.40156359571694905, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.budget)", "score": -0.40232593036887554, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id), movie.id),movie.budget)", "score": -0.41150375359937963, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),has_genre.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.budget)", "score": -0.4299066291488039, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.id), movie.id),movie.budget)", "score": -0.44344949085643404, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,movie.id), movie.id),movie.budget)", "score": -0.4442118255083605, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1), movie.id),movie.budget)", "score": -0.45230292601568456, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),movie.revenue,movie.id),movie.id,spoken_language.movie_id), movie.id),movie.budget)", "score": -0.45710274432000464, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.revenue), movie.id),movie.budget)", "score": -0.46412043335731024, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),has_genre.movie_id,movie.id),movie.id,movie.id), movie.id),movie.budget)", "score": -0.4717925526438895, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.budget),movie.budget)", "score": -0.4795553440675043, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.iso_639_1), movie.id),movie.budget)", "score": -0.48424865760161884, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.budget),movie.budget)", "score": -0.49423135814023694, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 184, "beams": [{"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,production_company.movie_id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.27067681624513085, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,production_company.movie_id),movie.vote_count,=,1183), movie.revenue),movie.revenue))", "score": -0.30542222289459103, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.312436213775059, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,production_company.movie_id),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "score": -0.336429865806115, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.vote_count,=,1183), movie.revenue),movie.revenue))", "score": -0.3471816204245192, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.35105359406068015, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.person_id,movie.id),movie.id,production_company.movie_id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.3667798098766435, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,=,1183), movie.revenue),movie.revenue))", "score": -0.3686521061394476, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.person_id,movie.id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.3702858360854732, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1183), movie.revenue),movie.revenue))", "score": -0.3781892633360432, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.person_id,movie.id),movie.vote_count,=,1183), movie.revenue),movie.revenue))", "score": -0.38788434816424067, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.person_id,movie.id),movie.id,production_company.movie_id),movie.vote_count,=,1183), movie.revenue),movie.revenue))", "score": -0.4015252165261037, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,person.id),movie.id,production_company.movie_id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.4022309126301199, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.person_id,movie.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.4085392218045322, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}, {"orig_question": "How many different revenues were generated by movies with a minimum of 1183 votes?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,1183), movie.revenue),movie.revenue))", "score": -0.41796345801215923, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1183), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 185, "beams": [{"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))", "score": -0.08251757487596478, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), country.name),movie.status))", "score": -0.4126664375507971, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,th), movie.status),movie.status))", "score": -0.42779111723862945, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),language.name,!=,th), movie.status),movie.status))", "score": -0.4354033766088067, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,th), movie.status),movie.status))", "score": -0.43572372901746936, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),language.name,!=,th), movie.status),movie.status))", "score": -0.4433359883876466, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,!=,th), movie.status),movie.status))", "score": -0.44760841203034624, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.original_language,!=,th), movie.status),movie.status))", "score": -0.45286167913201253, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,!=,th), movie.status),movie.status))", "score": -0.46047393850218976, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.original_language,!=,th), movie.status),movie.status))", "score": -0.4607942909108525, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.original_language,!=,th), movie.status),movie.status))", "score": -0.4634935366153216, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,th), movie.status),movie.status))", "score": -0.4674547431909704, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,!=,th), movie.status),movie.status))", "score": -0.46840647607615576, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),language.name,!=,th), movie.status),movie.status))", "score": -0.4750669283562737, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}, {"orig_question": "How many different statuses do the movies with an original language other than th have?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,th), movie.status),movie.status))", "score": -0.4753872807649364, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,th), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 186, "beams": [{"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.release_date,>=,4000000), movie.id),movie.popularity)", "score": -0.21316159956134298, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.budget,>=,4000000), movie.id),movie.popularity)", "score": -0.21413474562751936, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.budget,>=,4000000), movie.id),movie.popularity)", "score": -0.2819057805283234, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.release_date,>=,4000000), movie.id),movie.popularity)", "score": -0.28514289744652327, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.budget,>=,4000000), movie.id),movie.popularity)", "score": -0.28611604351269965, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.revenue,>=,4000000), movie.id),movie.popularity)", "score": -0.2977342881091017, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,4000000), movie.id),movie.popularity)", "score": -0.3157547668337192, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,>=,4000000), movie.id),movie.popularity)", "score": -0.3387796366532944, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.release_date,>=,4000000), movie.id),movie.popularity)", "score": -0.3598225040800241, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.budget,>=,4000000), movie.id),movie.popularity)", "score": -0.36079565014620046, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(movie),oscar_winner.movie_id,movie.id),movie.budget,>=,4000000), movie.id),movie.popularity)", "score": -0.3679665256283963, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.revenue,>=,4000000), movie.id),movie.popularity)", "score": -0.36971558599428195, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.movie_id),movie.release_date,>=,4000000), movie.id),movie.popularity)", "score": -0.38508865080015603, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(filter(getData(movie),movie.budget,=,4000000),movie.popularity)", "score": -0.39167166853612306, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of oscar winning movies with a budget of at least 4000000?", "inferred_code": "avg(filter(getData(movie),movie.budget,>=,4000000),movie.popularity)", "score": -0.42941885716999434, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.budget,>=,4000000), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 187, "beams": [{"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.07693584067070675, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.38644953786503555, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(filter(getData(movie),movie.title,!=,The Object of My Affection),movie.popularity)", "score": -0.5497897693023063, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.5686729551161412, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.5778288070466217, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.5882646843446809, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.590557087206821, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.6029004480279813, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.6139353226445227, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),movie.id,movie.id),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.6227941249518611, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.6243713088103661, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.626663702527825, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.vote_average,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.6317879996413207, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.6364452816119539, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}, {"orig_question": "What's the average movie popularity of all the movies except \"The Object of My Affection\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,!=,The Object of My Affection), movie.id),movie.popularity)", "score": -0.6397112633112112, "correct_code": "avg(distinct(filter(getData(movie),movie.title,!=,The Object of My Affection), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 188, "beams": [{"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.1583767799138358, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.runtime,>,2012-08-06),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2563767888043945, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,>,2012-08-06),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2573063654432608, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_average,>,2012-08-06),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.28827327763173405, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,>,2012-08-06),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.3546762477366637, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.runtime,>,2012-08-06),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.3731405822846843, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4118962847703027, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.vote_average,>,2012-08-06),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.4265456927323867, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),keyword.name))", "score": -0.43190557365425386, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,2012-08-06),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.448756295858637, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4541450058520912, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),country.name))", "score": -0.4549514012926644, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),production_company.company_id))", "score": -0.46120233127141075, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4641506868087893, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),production_company.company_id,company.id),company.name), company.name))", "score": -0.5417993517735384, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 189, "beams": [{"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)", "score": -0.14450870492302206, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,el), movie.id),movie.runtime)", "score": -0.25646350601871193, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,el), movie.id),movie.runtime)", "score": -0.2637650414237086, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,=,el), movie.id),movie.runtime)", "score": -0.28790985804808766, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,el), movie.id),movie.runtime)", "score": -0.29521139345308434, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),language.name,=,el), movie.id),movie.runtime)", "score": -0.3143816668304843, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),language.name,=,el), movie.id),movie.runtime)", "score": -0.32168320223548097, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.original_language,=,el), movie.id),movie.runtime)", "score": -0.34582801885986003, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.original_language,=,el), movie.id),movie.runtime)", "score": -0.3531295542648567, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime)", "score": -0.4153912028047423, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,el),getData(movie),language.iso_639_1,spoken_language.movie_id), movie.id),movie.runtime)", "score": -0.45039113003635617, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,el),getData(movie),movie.id,spoken_language.movie_id), movie.id),movie.runtime)", "score": -0.487770672217463, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,el),getData(movie),language.iso_639_1,movie.id), movie.id),movie.runtime)", "score": -0.48955092120658306, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,el),getData(movie),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.49201170524188714, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}, {"orig_question": "What is the averaged runtime of movies in the original language \"el\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))", "score": -0.4941398100418155, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,el), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 190, "beams": [{"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.09297013319975465, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.138301457814094, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.runtime,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.23973416003278641, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,128),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2901364183203955, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.status,=,128), genre.name),genre.name))", "score": -0.3168215536667135, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3288270037167096, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.34875388753437114, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3518588255745299, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.35660332672486705, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.popularity,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3580158253607962, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.38071484195843913, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3943367391906794, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,<,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.39438770413815355, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))", "score": -0.3958919102359662, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),person.death_place))", "score": -0.4082088334186661, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 191, "beams": [{"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))", "score": -0.13889362938789418, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.release_date))", "score": -0.14236584581522038, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.status))", "score": -0.31035061456350377, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.popularity))", "score": -0.3562908945241361, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.original_language))", "score": -0.4706407365956693, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.budget))", "score": -0.47740538694051793, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.id))", "score": -0.5625554499783902, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,38.0181), movie.title),movie.title))", "score": -0.5805515744359582, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,38.0181), movie.title),movie.release_date))", "score": -0.5840237908632844, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.runtime))", "score": -0.6116352257886319, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,38.0181), movie.title),movie.title))", "score": -0.6276165344388573, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,38.0181), movie.title),movie.release_date))", "score": -0.6310887508661835, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.revenue))", "score": -0.6600599465527921, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>,38.0181), movie.title),movie.title))", "score": -0.6993988344547688, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}, {"orig_question": "Which movies have a popularity of over 38.0181?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>,38.0181), movie.title),movie.release_date))", "score": -0.702871050882095, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,38.0181), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 192, "beams": [{"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),person.gender))", "score": -0.05980055291001918, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(person),movie.release_date,>,2002-01-25), person.gender),person.gender))", "score": -0.3115539520586026, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.runtime,>,2002-01-25), person.gender),person.gender))", "score": -0.44727265408070693, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,oscar_winner.movie_id),getData(person),cast.person_id,person.id),movie.runtime,>,2002-01-25), person.gender),person.gender))", "score": -0.4606586285626492, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.runtime,>,2002-01-25), person.gender),person.gender))", "score": -0.4707760799185255, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.runtime,>,2002-01-25), person.gender),person.gender))", "score": -0.4762480846580208, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,oscar_winner.movie_id),getData(person),cast.person_id,person.id),movie.runtime,>,2002-01-25), person.gender),person.gender))", "score": -0.4841620544004678, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),person.birth_day,>,2002-01-25), person.gender),person.gender))", "score": -0.48667595419829013, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),cast.person_id,person.id),movie.runtime,>,2002-01-25), person.gender),person.gender))", "score": -0.4896340591399631, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(person),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.runtime,>,2002-01-25), person.gender),person.gender))", "score": -0.518473072363035, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,2002-01-25), person.gender),person.gender))", "score": -0.5186803105825675, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2002-01-25), person.gender),person.gender))", "score": -0.5606774580737692, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.birth_place),person.gender))", "score": -0.5843950591588509, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,2002-01-25), person.gender),person.death_place))", "score": -0.6017120576070738, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}, {"orig_question": "How many different genders do the persons have that worked on a movie that was released after 2002-01-25?", "inferred_code": "count(extractValues(distinct(filter(getData(oscar),movie.release_date,>,2002-01-25), person.gender),person.gender))", "score": -0.6159780591333401, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.release_date,>,2002-01-25), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 193, "beams": [{"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.13014182560592366, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.1379370478970956, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.id),oscar.number)", "score": -0.16794003153713788, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.id),oscar.number)", "score": -0.28620330957055645, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.2932640285109497, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.category),oscar.number)", "score": -0.29768808266894486, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.gender,=,f), oscar.id),oscar.number)", "score": -0.31226457493044174, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.number)", "score": -0.31515702027191994, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), person.death_day),oscar.number)", "score": -0.34747057250609253, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.number),oscar.number)", "score": -0.3740349158213743, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar_nominee.person_id),oscar.number)", "score": -0.37599071728795574, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar_nominee.oscar_id),oscar.number)", "score": -0.38567611113743605, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), movie.title),oscar.number)", "score": -0.3920126305940701, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.39295326397775054, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.4029746721307549, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 194, "beams": [{"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,5.6), movie.vote_count),movie.vote_count))", "score": -0.430870854501336, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,5.6), movie.vote_count),movie.vote_count))", "score": -0.4564714070602349, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.vote_count),movie.vote_count))", "score": -0.46621497834166803, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,=,5.6), movie.vote_count),movie.vote_count))", "score": -0.48167033832396555, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.vote_count),movie.vote_count))", "score": -0.48405726592864085, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,5.6), movie.vote_count),movie.vote_count))", "score": -0.4906407032522111, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,5.6), movie.title),movie.vote_count))", "score": -0.5332447450800828, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,5.6), movie.runtime),movie.vote_count))", "score": -0.5359538506909303, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,5.6), movie.vote_count),movie.vote_count))", "score": -0.5396839019103936, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,=,5.6), movie.title),movie.vote_count))", "score": -0.5568415705474763, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,5.6), movie.title),movie.vote_count))", "score": -0.5588452976389817, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.title),movie.vote_count))", "score": -0.5592284981521516, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,5.6), movie.runtime),movie.vote_count))", "score": -0.5615543808980874, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,5.6), movie.title),movie.vote_count))", "score": -0.5658119080017059, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}, {"orig_question": "Count the number of movies that received revenue with the voting average value of 5.6.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,=,5.6), movie.runtime),movie.vote_count))", "score": -0.5663492587755172, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,=,5.6), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 195, "beams": [{"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,180), genre.name),genre.name))", "score": -0.14460363114919686, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,180),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.157767779614534, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),movie.runtime,<,180),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.16046620062583988, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),movie.runtime,<,180),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.25373092649594686, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,180), genre.name),genre.name))", "score": -0.2766621179980645, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,180), genre.name),genre.name))", "score": -0.29632110228512737, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,180),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.31472579119384636, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar_nominee),movie.runtime,<,180),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.32552856775453626, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,<,Stephen Daldry), genre.name),genre.name))", "score": -0.3525598310604915, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar_nominee),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,180), genre.name),genre.name))", "score": -0.3763383753448551, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),movie.runtime,<,180),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.37762713517841945, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,<,180), genre.name),genre.name))", "score": -0.3808445848217838, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),movie.runtime,<,180),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,genre.id), genre.name),genre.name))", "score": -0.38319918512543044, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),movie.runtime,<,180),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,movie.id), genre.name),genre.name))", "score": -0.39897427559036963, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "How many genres exists with movies having a runtime less than 180 and a oscar nominee called Stephen Daldry?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),movie.runtime,<,180),getData(has_genre),movie.id,oscar_nominee.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4077310425553866, "correct_code": "count(extractValues(distinct(merge(filter(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,<,180),person.name,=,Stephen Daldry),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 196, "beams": [{"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),oscar.number)", "score": -0.20440853447354534, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.id),oscar.number)", "score": -0.24615084592521164, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.status),oscar.number)", "score": -0.255595620122325, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.original_language,=,cn), oscar.id),oscar.number)", "score": -0.2694222566983346, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.original_language,=,cn), movie.id),oscar.number)", "score": -0.30796017658113195, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), oscar.id),oscar.number)", "score": -0.3109027266641312, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)", "score": -0.319872286189239, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.title),oscar.number)", "score": -0.3234446172672644, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.number)", "score": -0.33085092144170686, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(production_country),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),oscar.number)", "score": -0.346251402781611, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.id),oscar.number)", "score": -0.35593510871301204, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), oscar.id),oscar.number)", "score": -0.3571189402477737, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(movie),oscar_winner.oscar_id,oscar.id), movie.title),oscar.number)", "score": -0.3572844904990894, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.id),oscar.number)", "score": -0.3654146115444378, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title)", "score": -0.3740050832018713, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 197, "beams": [{"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.1482249111719134, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,=,Temecula, Kalifornien), movie.vote_average),movie.vote_average))", "score": -0.1986252349325748, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,=,Temecula, Kalifornien), movie.vote_average),movie.vote_average))", "score": -0.20999500009757646, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_place,=,Temecula, Kalifornien), movie.vote_average),movie.vote_average))", "score": -0.24629525795699292, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,=,Temecula, Kalifornien), movie.vote_average),movie.vote_average))", "score": -0.25864952654229256, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,=,Temecula, Kalifornien), movie.vote_average),movie.vote_average))", "score": -0.2599818516751159, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),person.id,oscar_nominee.person_id),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.runtime),movie.vote_average))", "score": -0.27276034459392606, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.runtime),movie.vote_average))", "score": -0.2760359185439052, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.person_id,movie.id),person.death_place,=,Temecula, Kalifornien), movie.vote_average),movie.vote_average))", "score": -0.2955613401950887, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,=,Temecula, Kalifornien), movie.vote_average),movie.vote_average))", "score": -0.30656209417894087, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.vote_average))", "score": -0.32002346274603893, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),person.id,oscar_nominee.person_id),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))", "score": -0.32297197815450385, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(movie),oscar_nominee.movie_id,person.id),person.death_place,=,Temecula, Kalifornien), movie.vote_average),movie.vote_average))", "score": -0.32327575336951087, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,=,Temecula, Kalifornien), movie.vote_average),movie.vote_average))", "score": -0.3350150522442949, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the ratings of movies for which persons, that were nominated for an oscar and died in Temecula, Kalifornien?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))", "score": -0.35065826774036113, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Temecula, Kalifornien),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 198, "beams": [{"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.13026601291487677, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.1391132141631159, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,jewelry store),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.2122598630012337, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(language),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.23896344317558005, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(keyword),keyword.name,!=,jewelry store),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.24682715086858895, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.25542202219579246, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.2837018850806166, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.2906745186325579, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,jewelry store),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.29360007331636434, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(company),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.3396957222664484, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,jewelry store), movie.title),movie.title))", "score": -0.3675175422763886, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,jewelry store), movie.title),movie.title))", "score": -0.3763647147287065, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.budget))", "score": -0.3824019319016371, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(country),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store), movie.title),movie.title))", "score": -0.389394830358179, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have a keyword name other than jewelry store?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,jewelry store),movie.title,!=,jewelry store), movie.title),movie.title))", "score": -0.395612134974993, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,jewelry store),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 199, "beams": [{"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.00928412008943269, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.41893328614868636, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,675), movie.original_language),movie.original_language))", "score": -0.577138472617662, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,675),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.5995860196262744, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,<=,675), movie.original_language),movie.original_language))", "score": -0.6098840874472542, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.6316139270872884, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,675),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.6340810523858135, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.6801181373174294, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), language.name),movie.original_language))", "score": -0.6849344063224827, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,675), movie.original_language),movie.original_language))", "score": -0.692433644355333, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,<,675), movie.original_language),movie.original_language))", "score": -0.7115079945829436, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_keyword.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.7236593245600874, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>=,675), movie.original_language),movie.original_language))", "score": -0.7318397489147199, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,675), movie.original_language),movie.original_language))", "score": -0.7491542587886215, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.title))", "score": -0.7705519755036221, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 200, "beams": [{"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.06662030409085627, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.17554945280434162, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),getData(movie),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.2546507769379595, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.27441521919984274, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.28015505032760757, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(production_country),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3128067506761776, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.oscar_id,movie.id), movie.title),movie.title))", "score": -0.31543070534756334, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.status),movie.title))", "score": -0.31661580460972555, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.3184176154770978, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3375021674757917, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.33843868380404935, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.status),movie.title))", "score": -0.3464483356264092, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), movie.status),movie.title))", "score": -0.3606182008869806, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),country.name,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.367876507090841, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "Which movies have won the oscar in category visual effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.status))", "score": -0.3721831065643786, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 201, "beams": [{"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.41158827648437196, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.41325234645783804, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.4188182423533683, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,6.6), movie.id),movie.budget)", "score": -0.4204823123268343, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,6.6), movie.id),movie.budget)", "score": -0.42435056521774783, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,6.6), movie.id),movie.budget)", "score": -0.42601463519121385, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),movie.vote_average,=,6.6), movie.id),movie.budget)", "score": -0.42764290905443947, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(merge(filter(getData(movie),person.name,=,6.6),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.id),movie.budget)", "score": -0.4277447711267087, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),movie.vote_average,=,6.6), movie.id),movie.budget)", "score": -0.42930697902790554, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,6.6), movie.id),movie.budget)", "score": -0.4315805214458399, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,6.6), movie.id),movie.budget)", "score": -0.43324459141930594, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),movie.vote_average,=,6.6), movie.id),movie.budget)", "score": -0.4348728652825316, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(merge(filter(getData(movie),person.name,=,6.6),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.id),movie.budget)", "score": -0.44699277911479884, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(merge(filter(getData(movie),person.name,=,6.6),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.id),movie.budget)", "score": -0.46771946986074564, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with an avarage voting of 6.6?", "inferred_code": "avg(distinct(merge(filter(getData(movie),person.name,=,6.6),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.id),movie.budget)", "score": -0.47183812308584583, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.6), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 202, "beams": [{"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))", "score": -0.01558572608337272, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_day,<,2009-03-29), person.gender),person.gender))", "score": -0.45899612853644045, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.death_day,<,2009-03-29),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_day,<,2009-03-29), person.gender),person.gender))", "score": -0.5312234732253605, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,<,2009-03-29),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.gender),person.gender))", "score": -0.5316374963699924, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_day,<,2009-03-29), person.gender),person.gender))", "score": -0.6025692581472117, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_nominee.person_id),person.death_day,<,2009-03-29), person.gender),person.gender))", "score": -0.6103807852923315, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2009-03-29), person.gender),person.gender))", "score": -0.616841853436199, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),movie.popularity))", "score": -0.660695086888154, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,2009-03-29), person.gender),person.gender))", "score": -0.6717320864117937, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,<,2009-03-29), person.gender),person.gender))", "score": -0.7028968517697649, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.birth_place),person.gender))", "score": -0.7078313731617527, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), movie.popularity),person.gender))", "score": -0.7226549887127476, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.name),person.gender))", "score": -0.7235089444584446, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,2009-03-29), person.gender),person.gender))", "score": -0.7283614285552176, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}, {"orig_question": "What are the distinct genders of persons that died before 2009-03-29 ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.name))", "score": -0.7324450125015574, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2009-03-29), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 203, "beams": [{"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))", "score": -0.0346737431245856, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.gender,=,f), person.death_day),person.death_day))", "score": -0.30315744482190254, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_place))", "score": -0.3743575114640407, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.gender,=,f), person.death_day),person.death_day))", "score": -0.4691800496003674, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.gender),person.death_day))", "score": -0.48928335578272986, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.movie_id,person.id),person.id,cast.person_id),person.gender,=,f), person.death_day),person.death_day))", "score": -0.4973663921933054, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,spoken_language.iso_639_1),person.gender,=,f), person.death_day),person.death_day))", "score": -0.49855071970212056, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.gender,=,f), person.death_day),person.death_place))", "score": -0.500843471993983, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.gender,=,f), person.death_day),person.death_day))", "score": -0.5197400392727362, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.gender),person.death_day))", "score": -0.5210697236686018, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id),person.gender,=,f), person.death_day),person.death_day))", "score": -0.5215511223285514, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,<,f), person.death_day),person.death_day))", "score": -0.5343584820511751, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.gender),person.death_place))", "score": -0.5378057412230793, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_day),person.death_day))", "score": -0.5674936085640594, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}, {"orig_question": "When was the deathday of the persons with gender f?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.name),person.death_day))", "score": -0.5677866722082004, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 204, "beams": [{"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,energy policy),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.05717358486690912, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,energy policy),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.17882251010475625, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,energy policy),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.25337452996098264, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.status,=,energy policy), country.name),country.name))", "score": -0.2533906817050382, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,energy policy), country.name),country.name))", "score": -0.2687982713918003, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.title,=,energy policy), country.name),country.name))", "score": -0.29444653728736553, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,energy policy), country.name),country.name))", "score": -0.29578327939220395, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.status,=,energy policy),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.30731584016841446, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,energy policy),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3693376933975277, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,energy policy),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3695893392464664, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,=,energy policy),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.37280664993415236, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),company.name,=,energy policy),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3944759262141533, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,energy policy),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.40030401273223465, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,energy policy),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),production_country.iso_3166_1))", "score": -0.4022924829545541, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}, {"orig_question": "In which countries were movies about energy policy produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,energy policy),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),person.birth_place))", "score": -0.4118230645753882, "correct_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,energy policy), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 205, "beams": [{"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)),oscar.number),country.name))", "score": -0.16446458436573977, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)),oscar.number),country.name))", "score": -0.27076108824139233, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,=,art direction (black-and-white)),oscar.number),country.name))", "score": -0.27666022952577135, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)),oscar.number),country.name))", "score": -0.2961211618384167, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)),oscar.number),person.birth_place))", "score": -0.30514794690774316, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.number,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category),country.name))", "score": -0.3229385422501154, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)),oscar.sub_category),country.name))", "score": -0.33378836019973795, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)),movie.runtime),country.name))", "score": -0.3394236776839084, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.person_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)),oscar.number),country.name))", "score": -0.340253806501256, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.year,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category),country.name))", "score": -0.3406596418591912, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))", "score": -0.36782317069577924, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,=,art direction (black-and-white)),oscar.number),country.name))", "score": -0.37702367242990864, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)),oscar.number),country.name))", "score": -0.38240926313184315, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,=,art direction (black-and-white)),oscar.number),country.name))", "score": -0.38295673340142394, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)),oscar.year),country.name))", "score": -0.3856705296857581, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 206, "beams": [{"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.number,=,11),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.1363814849527649, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.number,=,11), movie.budget),movie.budget))", "score": -0.2072683912681005, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,11),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.21854651933230188, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "score": -0.25119606955657764, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.release_date),movie.budget))", "score": -0.28035086771219025, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,11), movie.budget),movie.budget))", "score": -0.3264434212564888, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.number,>=,11),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.33879546514700787, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,11), movie.budget),movie.budget))", "score": -0.3474175551376059, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.revenue),movie.budget))", "score": -0.38963389625725964, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "score": -0.3915651057902043, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,11),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.40489111344108025, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.release_date),movie.budget))", "score": -0.42071990394581693, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,11),getData(movie),oscar_winner.movie_id,movie.id), movie.budget),movie.budget))", "score": -0.4354332480442877, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.budget),movie.budget))", "score": -0.4363897405327083, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}, {"orig_question": "Whats the budget of the movie which won the oscar number 11?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,11),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.budget))", "score": -0.4366678781208413, "correct_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,=,11), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 207, "beams": [{"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.title),movie.revenue))", "score": -0.31282227894553216, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.revenue), movie.revenue))", "score": -0.3621488010685425, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.popularity), movie.revenue))", "score": -0.4474316632549744, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.revenue), movie.popularity))", "score": -0.47324273941922, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.original_language), movie.revenue))", "score": -0.48197018561768346, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.revenue), movie.id))", "score": -0.5031111633579712, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.title),movie.popularity))", "score": -0.5179391395140556, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.popularity), movie.popularity))", "score": -0.5585256016056519, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.original_language),movie.revenue))", "score": -0.5668276998985675, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.popularity), movie.id))", "score": -0.5883940255444031, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.original_language), movie.popularity))", "score": -0.593064123968361, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.revenue), movie.original_language))", "score": -0.5960432088177186, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.release_date),movie.revenue))", "score": -0.6091028306473163, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.revenue), spoken_language.movie_id))", "score": -0.6133197939197998, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}, {"orig_question": "Are there movies with a revenue of over 1227324?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.revenue,>,1227324),movie.title), movie.revenue))", "score": -0.6181498563091736, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,1227324), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 208, "beams": [{"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.20709912606559305, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.2820685715960345, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.release_date))", "score": -0.3140249913806755, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3150487794135376, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.status))", "score": -0.3223493340117059, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.status),movie.title))", "score": -0.33668967509809106, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.status,=,Philippines), movie.title),movie.title))", "score": -0.3441729851962423, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.status,=,Philippines), movie.title),movie.release_date))", "score": -0.35820615022300034, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,country.iso_3166_1),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3586960297868502, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.status,=,Philippines), movie.release_date),movie.title))", "score": -0.36733192321326186, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.37143094731778326, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),oscar.category,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.375427251911917, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Philippines), movie.title),movie.title))", "score": -0.3773866437622642, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.status,=,Philippines), movie.release_date),movie.release_date))", "score": -0.3813650882400199, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.release_date))", "score": -0.38899443691111696, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 209, "beams": [{"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),has_genre.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.15840751692529254, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(person),has_genre.genre_id,person.id), person.death_place),person.death_place))", "score": -0.21152394700989058, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),has_genre.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.2525774925886077, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(person),has_genre.movie_id,person.id), person.death_place),person.death_place))", "score": -0.25337567312357995, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(person),has_genre.genre_id,movie.id), person.death_place),person.death_place))", "score": -0.2549771206268308, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),merge(getData(genre),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),has_genre.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.2651160720937191, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),merge(getData(movie),getData(person),movie.id,cast.movie_id),has_genre.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.2765242531879923, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),has_genre.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.28459832890288334, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,has_genre.movie_id), person.death_place),person.death_place))", "score": -0.2904475674181408, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),merge(getData(has_genre),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),has_genre.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.29086771482797047, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.2937094309839786, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(person),has_genre.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.2968288467405202, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),merge(getData(movie),getData(person),movie.id,person.id),has_genre.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.31202777739847476, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.genre_id,person.id), person.death_place),person.death_place))", "score": -0.3126445878301649, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}, {"orig_question": "Where are the death places of people who were part of a cast for movies that don't belong to the genre TV Movie? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,has_genre.genre_id), person.death_place),person.death_place))", "score": -0.31415735605214956, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),getData(cast),movie.id,cast.movie_id),genre.id,has_genre.genre_id),getData(person),cast.person_id,person.id),genre.name,!=,TV Movie), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 210, "beams": [{"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))", "score": -0.0785434815188637, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.birth_place))", "score": -0.329825685461401, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.death_place))", "score": -0.33021773501241114, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))", "score": -0.35438662868346366, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))", "score": -0.3760390527043298, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.birth_day),person.name))", "score": -0.47400885458046105, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Pacific Palisades, Santa Monica), person.birth_day),person.name))", "score": -0.48443873756961026, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.birth_day))", "score": -0.48824422164761927, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.death_place))", "score": -0.49321087006626196, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.death_day))", "score": -0.5006278912624111, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.birth_place))", "score": -0.5100429277547438, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.death_place))", "score": -0.5206012291592239, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))", "score": -0.5227904695975206, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.birth_place))", "score": -0.524664626034763, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}, {"orig_question": "Which persons died in Pacific Palisades, Santa Monica?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))", "score": -0.526672558423463, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Pacific Palisades, Santa Monica), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 211, "beams": [{"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))", "score": -0.06465773115633056, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.vote_count),movie.vote_count))", "score": -0.29191105271456763, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<=,Released), movie.vote_count),movie.vote_count))", "score": -0.3377940786886029, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Released), movie.vote_count),movie.vote_count))", "score": -0.34922425652621314, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Released), movie.vote_count),movie.vote_count))", "score": -0.4762927165138535, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,Released), movie.vote_count),movie.vote_count))", "score": -0.5158810449647717, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,Released), movie.vote_count),movie.vote_count))", "score": -0.53656844625948, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,Released), movie.vote_count),movie.vote_count))", "score": -0.56504740024684, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.vote_count),movie.vote_count))", "score": -0.6041552854585461, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_average))", "score": -0.6167077524005435, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Released), movie.vote_count),movie.vote_count))", "score": -0.618897246371489, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<=,Released), movie.vote_count),movie.vote_count))", "score": -0.6223606040584855, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.revenue))", "score": -0.6990277869044803, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,Released), movie.vote_count),movie.vote_count))", "score": -0.7431343665230088, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,Released), movie.vote_count),movie.vote_count))", "score": -0.7494290333124809, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 212, "beams": [{"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),person.birth_place,<,1922-05-27),person.birth_place,=,1922-05-27), country.name),country.name))", "score": -0.24586883785693023, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.person_id), country.name),country.name))", "score": -0.2703012989768062, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),person.birth_day,<,1922-05-27), country.name),country.name))", "score": -0.2726136292334666, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id),person.birth_place,<,1922-05-27),person.birth_place,=,1922-05-27), country.name),country.name))", "score": -0.27443657009406874, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),person.birth_day,<,1922-05-27),person.birth_place,=,1922-05-27), country.name),country.name))", "score": -0.28817950691588823, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.person_id), country.name),country.name))", "score": -0.2966308524761154, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.person_id), country.name),country.name))", "score": -0.2969831711852211, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,crew.movie_id),person.birth_day,<,1922-05-27), country.name),country.name))", "score": -0.2980187439824791, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.31020861516601933, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.310560933875125, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id), country.name),country.name))", "score": -0.31073573454495595, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3119766413340006, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3123289496247461, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id),person.birth_day,<,1922-05-27),person.birth_place,=,1922-05-27), country.name),country.name))", "score": -0.31674720748144963, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Do countries exist where movies were produced that have an oscar nominee who was born before May 27th 1922? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),person.id,oscar_winner.person_id), country.name),country.name))", "score": -0.3192711626803799, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<,1922-05-27),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 213, "beams": [{"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,directing),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.21206607143307193, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,directing),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_day),person.death_day))", "score": -0.22306345420074178, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,directing),getData(person),oscar_winner.movie_id,person.id), person.death_day),person.death_day))", "score": -0.24661416843023348, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,directing),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_day))", "score": -0.27337062297342307, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.number,=,directing),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.29343792677837827, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,directing),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.death_day))", "score": -0.2938990813227297, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,directing),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_place))", "score": -0.2945317752876038, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,directing),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_day),person.death_place))", "score": -0.30703806211288953, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,directing),getData(person),oscar_winner.movie_id,person.id), person.death_place),person.death_day))", "score": -0.3079187199705846, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.number,=,directing),getData(person),oscar_winner.movie_id,person.id), person.death_day),person.death_day))", "score": -0.3279860237755398, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,directing),getData(person),oscar_winner.movie_id,person.id), person.death_day),person.death_place))", "score": -0.3290798722847653, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,directing),getData(person),oscar_winner.person_id,movie.id), person.death_day),person.death_day))", "score": -0.32911644310473315, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.number,=,directing),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_day))", "score": -0.35474247831872935, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,directing),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "score": -0.3558363268279549, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}, {"orig_question": "How many people already died, who won an oscar for directing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,directing),filter(getData(oscar_winner),person.name,=,directing),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.39087564498226973, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,directing), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 214, "beams": [{"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,!=,evil doctor),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_count)", "score": -0.06809146257190044, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,evil doctor), movie.id),movie.vote_count)", "score": -0.16509065640135998, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.20772147411277098, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.24507631667298568, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.30975622058692975, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,!=,evil doctor),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_count)", "score": -0.33302746914141546, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.33638459701180784, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,evil doctor),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_count)", "score": -0.33815333721627433, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_count)", "score": -0.3586379828100326, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.3703119033916325, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,!=,evil doctor),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_count)", "score": -0.377051993303022, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.39618713713241505, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,!=,evil doctor),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.vote_count)", "score": -0.42016085869250963, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),person.death_place,!=,evil doctor),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_count)", "score": -0.4273247826662932, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is the total vote count for movies with a keyword other than evil doctor?", "inferred_code": "sum(distinct(merge(filter(getData(company),keyword.name,!=,evil doctor),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_count)", "score": -0.42894135856825527, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 215, "beams": [{"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(getData(movie),getData(has_keyword),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.4842463911586104, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(getData(movie),getData(has_keyword),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.48616676655003405, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,4.5),getData(spoken_language),oscar.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.5026186536073731, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,4.5),getData(spoken_language),oscar.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.5054306240474791, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.5060712579825368, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.5088832284226429, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,4.5),getData(spoken_language),oscar.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.5164174464161329, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.5169074289515754, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,4.5),getData(spoken_language),oscar.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.5192294168562389, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.5197193993916813, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.5203600333267391, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.523172003766845, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,4.5),getData(spoken_language),oscar.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.5264116689496925, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),movie.title,=,4.5),getData(spoken_language),oscar.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.5292022683861007, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.5298642733248562, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 216, "beams": [{"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.05660811195658588, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.runtime),movie.runtime)", "score": -0.20258684537478103, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family), movie.id),movie.runtime)", "score": -0.2087542995913231, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.release_date),movie.runtime)", "score": -0.26129584161978914, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.runtime)", "score": -0.3004435203386212, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Family),getData(movie),has_genre.movie_id,movie.id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.36352986361848966, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Family), movie.id),movie.runtime)", "score": -0.3877251971292477, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(has_genre),genre.name,=,Family),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.42675482574506163, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), oscar.id),movie.runtime)", "score": -0.4466560672343006, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),genre.id,movie.id), movie.id),movie.runtime)", "score": -0.4555556586478172, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.id,has_genre.movie_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.45632734611105685, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),person.death_place,=,Family),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.46970878803273547, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.47164818287790106, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.name,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.4747993918164448, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}, {"orig_question": "What is the total movie runtime of movies who have been allocated with the genre: Family", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,=,Family),getData(has_genre),genre.id,spoken_language.iso_639_1),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.47554822976958144, "correct_code": "sum(distinct(merge(filter(getData(genre),genre.name,=,Family),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 217, "beams": [{"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "score": -0.02314061481411045, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,160583018), movie.vote_average),movie.vote_average))", "score": -0.31490575890893524, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))", "score": -0.6640998254260921, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,160583018), movie.vote_average),movie.vote_average))", "score": -0.6706907711541135, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.original_language))", "score": -0.67529669050964, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,160583018), movie.vote_average),movie.vote_average))", "score": -0.6871162766674388, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_count))", "score": -0.7063780093649257, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_count),movie.vote_average))", "score": -0.7761911018369574, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.popularity))", "score": -0.8063043022611964, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,160583018), movie.vote_average),movie.vote_average))", "score": -0.8084516638973582, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.popularity),movie.vote_average))", "score": -0.8090722425458807, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.status),movie.vote_average))", "score": -0.8259328468320746, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.original_language),movie.vote_average))", "score": -0.8274367912290472, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),person.name))", "score": -0.870454754875027, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the vote averages of movies with a revenue of 160583018 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>=,160583018), movie.vote_average),movie.vote_average))", "score": -0.8741522545078624, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,160583018), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 218, "beams": [{"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.026530915311013814, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,675), movie.original_language),movie.original_language))", "score": -0.2902481960118166, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,675), movie.original_language),movie.original_language))", "score": -0.4822681652367464, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,675), movie.original_language),movie.original_language))", "score": -0.5007757352650515, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.5197269197238282, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.7358427064028101, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,675), movie.original_language),movie.original_language))", "score": -0.7382975005424394, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,675), movie.original_language),movie.original_language))", "score": -0.7514093624413363, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), language.name),movie.original_language))", "score": -0.7583194264056707, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_day,=,675), movie.original_language),movie.original_language))", "score": -0.7845804797470919, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,675), movie.original_language),movie.original_language))", "score": -0.7990832594441599, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.number,=,675), movie.original_language),movie.original_language))", "score": -0.8041040407479159, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.popularity),movie.original_language))", "score": -0.8423830935954261, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,675), movie.original_language),movie.original_language))", "score": -0.8754948643254465, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a movie count of 675?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.title))", "score": -0.8777320092412992, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 219, "beams": [{"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.12640707559428105, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_count))", "score": -0.13287494429426772, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_count),movie.vote_count))", "score": -0.22275638200176406, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.29293874685121873, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.vote_average),movie.vote_count))", "score": -0.3531718898762127, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.3548535707785969, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)),movie.vote_count,=,1994-07-20), movie.vote_count),movie.vote_count))", "score": -0.3582930437065475, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.3664878912477234, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.3769442984121193, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,>=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_count))", "score": -0.3773072948134549, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,>,writing (story and screenplay--based on material not previously published or produced)), movie.vote_count),movie.vote_count))", "score": -0.38349405120194835, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.vote_count))", "score": -0.3898894859771405, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,>=,writing (story and screenplay--based on material not previously published or produced)),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.39489570242898636, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_count))", "score": -0.4000339928401933, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the movie vote counts from the movies which have been released after 1994-07-20 and with a oscar winner in sub category writing (story and screenplay--based on material not previously published or produced)?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,!=,writing (story and screenplay--based on material not previously published or produced)),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.40164223208600286, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (story and screenplay--based on material not previously published or produced)),merge(getData(person),filter(merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.release_date,>=,1994-07-20),person.id,crew.person_id),oscar_winner.person_id,person.id), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 220, "beams": [{"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.034382506884867325, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.death_place))", "score": -0.42695580204599537, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.movie_id,person.id),person.death_place,!=,Moorpark, Kalifornien),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.48853012713712735, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.movie_id,movie.id),person.death_place,!=,Moorpark, Kalifornien),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.4946445212024617, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.5192532549838009, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.5234395178671046, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.movie_id,person.id),person.death_place,!=,Moorpark, Kalifornien),getData(person),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.5279229907053199, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(getData(movie),getData(crew),movie.id,cast.movie_id),cast.movie_id,movie.id),getData(person),cast.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.5280527535059414, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.movie_id,movie.id),person.death_place,!=,Moorpark, Kalifornien),getData(person),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.5340374126729344, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(cast),person.id,cast.person_id),merge(getData(movie),getData(crew),movie.id,cast.movie_id),cast.movie_id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.5577160354415969, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.5819884207157884, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.movie_id,person.id),person.death_place,!=,Moorpark, Kalifornien),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.589238167059354, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,<,Moorpark, Kalifornien), person.birth_place),person.birth_place))", "score": -0.6173048283962999, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),crew.person_id))", "score": -0.6297924049722496, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of people not died in Moorpark, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.movie_id,person.id),person.death_place,!=,Moorpark, Kalifornien),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.death_place))", "score": -0.6319423067241969, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Moorpark, Kalifornien), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 221, "beams": [{"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.popularity),movie.popularity)", "score": -0.11320051253563894, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.12497041876336826, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<=,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.popularity),movie.popularity)", "score": -0.25685804060679396, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<=,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.26862794683452323, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,=,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.popularity),movie.popularity)", "score": -0.28895217066153456, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.person_id,movie.id),person.id,oscar_nominee.person_id), movie.popularity),movie.popularity)", "score": -0.29823636822648125, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.2983533715891478, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,=,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.30072207688926383, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.person_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.3100062744542106, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.birth_day,=,1920-05-11), movie.id),movie.popularity)", "score": -0.31130219701437023, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.32461974517917475, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), person.birth_day),movie.popularity)", "score": -0.3384815357229421, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.release_date),movie.popularity)", "score": -0.3692720249781002, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.revenue),movie.popularity)", "score": -0.39191073727747344, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), person.id),movie.popularity)", "score": -0.406237710738317, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 222, "beams": [{"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,0.293587),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.06093376667297319, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.popularity,>,0.293587),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.09180876536336205, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.popularity,!=,0.293587),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3262003153926251, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,!=,0.293587),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.33483277240590376, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,>,0.293587),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3628085772569997, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,>,0.293587),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.36743855447390106, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,0.293587),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3966033359301039, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.popularity,>,0.293587),getData(genre),has_genre.genre_id,genre.name), genre.name),genre.name))", "score": -0.41330908217040413, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,0.293587),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),person.death_place))", "score": -0.41337373063810506, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.popularity,>,0.293587),getData(has_genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.41410330981139454, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.popularity,>,0.293587),getData(genre),has_genre.genre_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.41501642335138855, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,0.293587),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,production_company.movie_id), genre.name),genre.name))", "score": -0.4271821774179006, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,0.293587),merge(getData(has_genre),getData(has_genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4322836077931343, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,0.293587),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),company.name))", "score": -0.4388480024869121, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}, {"orig_question": "What are the genres names when the movie popularity is more than 0.293587?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,0.293587),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),has_genre.genre_id))", "score": -0.44794304801414553, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.popularity,>,0.293587), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 223, "beams": [{"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.07389336786465596, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.17397548110417885, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_count)", "score": -0.19797030733202636, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.28321068581933284, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.32757898846257455, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.33366657807102634, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,=,Didsbury, Manchester, England),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_count)", "score": -0.33561229454038066, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),crew.person_id,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.33733970926863277, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.vote_count)", "score": -0.3379061254348743, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,=,Didsbury, Manchester, England), movie.id),movie.vote_count)", "score": -0.35214274069727175, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.3556777707203517, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)", "score": -0.3763935802438056, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.3832927990588557, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.name,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.39109376165782, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,<,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.4007668455103346, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
