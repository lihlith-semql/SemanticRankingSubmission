{"index": 0, "beams": [{"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))", "score": -0.28446832342160633, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,4.5), movie.title),movie.title))", "score": -0.31873324556363514, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.vote_count),movie.title))", "score": -0.3570736352921813, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,4.5), movie.vote_count),movie.title))", "score": -0.3913385574342101, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.runtime),movie.title))", "score": -0.3957417909623473, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,4.5), movie.runtime),movie.title))", "score": -0.4300067131043761, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.4414011424497643, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.47571124337299375, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.47671346409333637, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.4783626300357293, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.48944074876512167, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,4.5), movie.vote_average),movie.title))", "score": -0.5109783862353652, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.5126727088255554, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.vote_average,=,4.5), movie.vote_average),movie.title))", "score": -0.5127308654937894, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,4.5), movie.vote_average),movie.title))", "score": -0.5156426204634907, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 1, "beams": [{"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,el), movie.runtime),movie.runtime))", "score": -0.2714912542433012, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))", "score": -0.3909914144605864, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.40652104576924586, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.408499972358747, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4224563364485019, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4239150935168233, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.424435263038003, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),person.id,oscar_winner.person_id),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.42589402010632443, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4398503841960793, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,oscar_winner.person_id),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4418293107855804, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4441375563906025, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.45359897242370223, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4555779080119287, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4595879571207747, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,=,el),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.runtime),movie.runtime))", "score": -0.5332445868863249, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 2, "beams": [{"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.241333416596066, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_country.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.27820215834538287, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,=,164),getData(production_country),person.id,cast.person_id),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3028088854388882, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_country.movie_id,movie.id), country.name),country.name))", "score": -0.3032449861702844, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,=,Somerset),getData(production_country),person.id,oscar_winner.person_id),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3068251469627464, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_country.movie_id,movie.id), country.name),country.name))", "score": -0.3178769872254579, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,164),production_country.movie_id,movie.id), country.name),country.name))", "score": -0.3223855217599977, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_country.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.33332543145513616, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),movie.title,=,Somerset),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3377171590298399, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),getData(movie),crew.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3457887509168261, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_country.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3479573279181442, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),cast.movie_id,movie.id),movie.title,=,164),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.35418308927591513, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,Somerset),production_country.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.35451086194863085, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_country.movie_id,production_country.movie_id), country.name),country.name))", "score": -0.3582992009941622, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_country.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3682675352933947, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 3, "beams": [{"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.20601055411690777, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.21818203699871633, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id), company.name),company.name))", "score": -0.2314386913983299, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))", "score": -0.26062301715818825, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,company.id), company.name),company.name))", "score": -0.28582128973608045, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,production_company.company_id), company.name),company.name))", "score": -0.28675717389495187, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,movie.id),country.name,=,Slovakia),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2915328102129865, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.29837894979153223, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,movie.id), company.name),company.name))", "score": -0.30299810805900873, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.30949868490561405, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3100614468785657, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_company),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id), company.name),company.name))", "score": -0.31083371347584826, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_company),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.31362280565574796, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,company.id), company.name),company.name))", "score": -0.3150056154959388, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,production_company.company_id), company.name),company.name))", "score": -0.3159414996548102, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 4, "beams": [{"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.1136828511189346, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.1805633790828878, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,>,1980-07-12), movie.title),movie.title))", "score": -0.19987950584130776, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>=,1980-07-12), movie.title),movie.title))", "score": -0.20122028976258996, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.21782800792065876, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.25641432972805883, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.2738219736368427, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,=,1980-07-12), movie.title),movie.title))", "score": -0.2738643450395205, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,>,1980-07-12), movie.title),movie.title))", "score": -0.29313810039526267, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,>,1980-07-12), movie.title),movie.title))", "score": -0.31812741390899935, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1980-07-12), movie.title),movie.title))", "score": -0.33538154006022763, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1980-07-12),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3431927648005851, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.38101019850809265, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.person_id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.3873542372081754, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.3893452969954297, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 5, "beams": [{"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.12332629255096905, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,new age), movie.id),movie.popularity)", "score": -0.12512932855641107, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.popularity)", "score": -0.2328331584768107, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,new age),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.244190181665679, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.24489884556572483, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(cast),keyword.id,has_keyword.keyword_id),getData(movie),cast.movie_id,movie.id),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.2655374095419375, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.294415130567373, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(movie),keyword.id,has_keyword.keyword_id),getData(movie),cast.movie_id,movie.id),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.30043254093041616, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(movie),movie.id,cast.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.30912789337383934, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.30954150379644463, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,new age), movie.id),movie.popularity)", "score": -0.31338473059924427, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(cast),keyword.id,has_keyword.keyword_id),getData(movie),spoken_language.movie_id,movie.id),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.33245552141948653, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(cast),keyword.id,has_keyword.keyword_id),getData(movie),cast.movie_id,movie.id),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.3340049828249441, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,new age),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,movie.id), movie.id),movie.popularity)", "score": -0.36555541448369294, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,new age),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.3696607914841141, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 6, "beams": [{"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.12214924577508085, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.16713143697762, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.19403343421703517, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,movie.id), company.name),company.name))", "score": -0.20376136529227737, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.23153244643460957, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(getData(production_company),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.23685918491157779, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.256448903668132, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),oscar.id,production_company.company_id), company.name),company.name))", "score": -0.2721325013494434, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,production_company.company_id), company.name),company.name))", "score": -0.2729017482038472, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(getData(production_company),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.2846169122252185, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.28734388155717505, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,company.id), company.name),company.name))", "score": -0.29480409285503717, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,production_company.company_id), company.name),company.name))", "score": -0.29903449858885855, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.30167120498384525, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),company.name,=,art direction (color)),production_company.movie_id,production_company.company_id), company.name),company.name))", "score": -0.3109746003626516, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 7, "beams": [{"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.11687993280174265, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.death_place))", "score": -0.2444326830913111, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.25573977923361196, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.2644870054734667, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.birth_place))", "score": -0.26467109115270615, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))", "score": -0.2744091761819559, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.3012141917237011, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.30771763535082347, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_place))", "score": -0.3127285243583785, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,production_country.movie_id), person.birth_place),person.birth_place))", "score": -0.33818134989107845, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.gender),person.birth_place))", "score": -0.3656897700460309, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.381678426212547, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),production_country.iso_3166_1,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.38212927730610263, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.death_place))", "score": -0.38329252952318044, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.death_place))", "score": -0.3920397557630352, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 8, "beams": [{"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.10947769692004646, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,!=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.14136406730367834, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,<,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.23498801564597288, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,<=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.3731178323128474, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,!=,Adventure),movie.revenue),movie.vote_count))", "score": -0.41506728584101943, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(person),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.4511998372760395, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.45433107058682687, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),person.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.45437152705641626, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(has_genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.4570460032025144, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.revenue))", "score": -0.47038516133109043, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(genre),genre.name,=,Adventure),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.47242081066789327, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.revenue),movie.vote_count))", "score": -0.4818468274025864, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,movie.id),movie.revenue),movie.vote_count))", "score": -0.48792796133190103, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,!=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.revenue))", "score": -0.5022715317147224, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "sum(distinct(filter(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,<,Adventure), movie.id),movie.vote_count)", "score": -0.5338577112828178, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 9, "beams": [{"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.id),oscar.number)", "score": -0.09206551192510494, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,77), oscar.id),oscar.number)", "score": -0.22114604953350578, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.id),oscar.number)", "score": -0.22645705466648844, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.category),oscar.number)", "score": -0.2327987518557983, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.number),oscar.number)", "score": -0.2656966202762872, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.runtime,<=,77), oscar.id),oscar.number)", "score": -0.29508641318201245, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,>=,77), oscar.id),oscar.number)", "score": -0.32277616079663524, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.id),oscar.number)", "score": -0.3400939174156513, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,77), oscar.id),oscar.number)", "score": -0.3555375922748893, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,77), oscar.category),oscar.number)", "score": -0.3618792894641991, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.category),oscar.number)", "score": -0.36719029459718183, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,=,77), oscar.id),oscar.number)", "score": -0.3716280425054537, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,77), oscar.number),oscar.number)", "score": -0.3947771485273398, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.number),oscar.number)", "score": -0.4000881536603225, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,77),getData(oscar_winner),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.4175553229454603, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 10, "beams": [{"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))", "score": -0.013402820237388369, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,2159280), movie.revenue),movie.revenue))", "score": -0.5036464241784415, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,2159280), movie.revenue),movie.revenue))", "score": -0.6417597912004567, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,2159280), movie.revenue),movie.revenue))", "score": -0.7350653914254508, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.budget))", "score": -0.7366245604571304, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.vote_count))", "score": -0.7391877986010513, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2159280), movie.revenue),movie.revenue))", "score": -0.7602189562967396, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,2159280), movie.revenue),movie.revenue))", "score": -0.780613472823461, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.vote_count),movie.revenue))", "score": -0.7821769211077481, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.budget),movie.revenue))", "score": -0.7912406418108731, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>=,2159280), movie.revenue),movie.revenue))", "score": -0.8189208291223622, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>=,2159280), movie.revenue),movie.revenue))", "score": -0.8448248289278126, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,2159280), movie.revenue),movie.revenue))", "score": -0.8752242831033072, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),cast.movie_id))", "score": -0.8991053916033707, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),cast.person_id))", "score": -0.9093178726252518, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 11, "beams": [{"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,Krush Groove), movie.id),movie.popularity)", "score": -0.17219682330871736, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.3443292301241943, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.3614292996629187, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.40628290103855613, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4233829705772805, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4234097609487596, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4323524187067412, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.440509830487484, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4494524882454656, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.45918236099359394, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4598370419063772, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.47693708705928506, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,movie.id),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4791160970087136, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4881318355164486, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,Krush Groove), movie.id),movie.popularity)", "score": -0.5420676730467784, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 12, "beams": [{"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.0245628642878728, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.3537735199436212, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.42845680932940133, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.4729450767008945, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.47571887260972695, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,has_genre.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.4840104720632429, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.budget,movie.id),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.4877782411511054, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.49939143239845163, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.5103894335082757, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.5411653148391756, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.547628404158205, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.5554419674390374, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,2.8),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.budget),movie.budget))", "score": -0.5668258446963094, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.budget),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.5693325972438023, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,2.8),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget), movie.budget),movie.budget))", "score": -0.5940757173498517, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 13, "beams": [{"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.status))", "score": -0.09107357639004476, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.status))", "score": -0.22219581904937513, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.release_date))", "score": -0.3678664714389015, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.title))", "score": -0.44197584691573866, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.release_date))", "score": -0.49898871409823187, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_average),movie.status))", "score": -0.5367639661126304, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.runtime),movie.status))", "score": -0.5604712367348839, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.title))", "score": -0.573098089575069, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.popularity))", "score": -0.5895446688227821, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.release_date),movie.status))", "score": -0.5962921381287742, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.original_language),movie.status))", "score": -0.6304471493058372, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.runtime))", "score": -0.6315620690875221, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2007-07-07), movie.status),movie.status))", "score": -0.6373524546215776, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.release_date,>,2007-07-07),movie.status), movie.status))", "score": -0.6678489516634727, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.title),movie.status))", "score": -0.706242799788015, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 14, "beams": [{"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.04092666262330365, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,17500000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.18357689026997423, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),genre.name,!=,17500000), genre.name),genre.name))", "score": -0.26577049136715325, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,!=,17500000), genre.name),genre.name))", "score": -0.3164152336656019, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), person.death_place),genre.name))", "score": -0.3244664998685401, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,=,17500000), genre.name),genre.name))", "score": -0.33383488846302095, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,>=,17500000), genre.name),genre.name))", "score": -0.34557944227289716, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,!=,17500000), genre.name),genre.name))", "score": -0.3697080666013402, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,!=,17500000), genre.name),genre.name))", "score": -0.40223671893275287, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(has_genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.4051938890677516, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.41237986912546964, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), movie.original_language),genre.name))", "score": -0.4148967501785609, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.4216731344222431, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), oscar.category),genre.name))", "score": -0.42308655826558383, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.43738657800170233, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 15, "beams": [{"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.012957189730514074, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6078562441471149, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.title),movie.original_language))", "score": -0.6444665660710598, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6477206001895932, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),language.name))", "score": -0.6653967224156077, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.budget,=,48000000),movie.original_language), movie.original_language))", "score": -0.7391220822828473, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.title))", "score": -0.754455419639271, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.7665544619412685, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,48000000), movie.original_language),movie.original_language))", "score": -0.7709934867780248, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,48000000), movie.original_language),movie.original_language))", "score": -0.7733372606198827, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,48000000), movie.original_language),movie.original_language))", "score": -0.773778752223734, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,48000000), movie.original_language),movie.original_language))", "score": -0.7938745774190465, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.original_language),movie.original_language))", "score": -0.7990001935140754, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),genre.name,=,48000000), movie.original_language),movie.original_language))", "score": -0.8324510015409032, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.vote_average))", "score": -0.8420542799030954, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 16, "beams": [{"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.07343242365795719, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.16855922782152308, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,No Language), movie.id),movie.budget)", "score": -0.26077427640612255, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,=,No Language), movie.id),movie.budget)", "score": -0.29909117378841393, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.budget),movie.budget)", "score": -0.2998978738944332, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.314891022494333, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,No Language), movie.id),movie.budget)", "score": -0.3298606206336822, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(spoken_language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.34997745329899205, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,No Language), movie.id),movie.budget)", "score": -0.36599581423539645, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.37310982923294805, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.38190146789751267, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.389104824587318, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.budget),movie.budget)", "score": -0.39502466884242887, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),spoken_language.movie_id,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.39740663598828774, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),has_genre.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.40046121127287415, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 17, "beams": [{"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.05145664549457806, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.22764940447816104, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.24008643497796478, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.3202600664798958, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.33867958024510414, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.361695630730131, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.3632582089200276, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.3773499800449602, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(spoken_language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.3926620866196998, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.3997225858086187, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.40176951933897026, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),spoken_language.movie_id,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.4038322086610294, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.4144401406902805, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.42534764634389177, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.4291166692357204, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 18, "beams": [{"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.03534299005712061, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Rumored), company.name),company.name))", "score": -0.1740778015575937, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,=,Rumored),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2595567917824982, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.36220518484114006, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),production_company.company_id))", "score": -0.3885129896018083, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), movie.title),company.name))", "score": -0.399045782942426, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),movie.title))", "score": -0.40649525384751334, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(production_company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.429861567698711, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.4332662335794529, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.movie_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.440912266896527, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id), company.name),company.name))", "score": -0.44371810747412116, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(has_genre),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.456493258375475, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,has_genre.movie_id), company.name),company.name))", "score": -0.4584403190247448, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.45871864260960943, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(genre),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.46267678790108185, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 19, "beams": [{"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.1672631523833843, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.19229075445146554, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.23918078106167537, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.2723169099453587, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.2790316226013658, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.2975831755646639, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.30795167417902514, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.31487746979796444, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.3239940325235726, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.3392718591593447, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(person),person.birth_place,!=,Oxnard, Kalifornien),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.3503342488053887, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,crew.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.35153900136076316, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.36220478464878636, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.37760933105855704, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.38364830796252103, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 20, "beams": [{"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), keyword.name),person.name))", "score": -0.2547336649559371, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(keyword),has_keyword.movie_id,keyword.id),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(None),None,None),None,None), None),None))", "score": -0.27961374284997476, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.28399748872934477, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evangelist),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.29705910554610077, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),has_keyword.movie_id,has_keyword.keyword_id), person.name),person.name))", "score": -0.30407778093881754, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(keyword),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), keyword.name),person.name))", "score": -0.31338402979133007, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),has_keyword.movie_id,movie.id), person.name),person.name))", "score": -0.32815662318160504, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),has_keyword.movie_id,has_keyword.keyword_id), keyword.name),person.name))", "score": -0.33339210581644285, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evangelist),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.movie_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,None), None),None))", "score": -0.3340166985262053, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.movie_id), keyword.name),person.name))", "score": -0.33493226063452863, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evangelist),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,None), None),None))", "score": -0.33849500068423, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))", "score": -0.34195920186016926, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(keyword),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.3426478444658333, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evangelist),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),has_keyword.movie_id,has_keyword.keyword_id), person.name),person.name))", "score": -0.3454901719427503, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),has_keyword.movie_id,oscar_winner.oscar_id), person.name),person.name))", "score": -0.3532859564484866, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 21, "beams": [{"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.17972063083532663, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(language),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.21034560254421347, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,None), None),None))", "score": -0.22517580982282723, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,None), None),None))", "score": -0.26126667397429326, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.2707285871970452, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,has_keyword.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.27487563307839097, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.278850104233365, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(movie),has_keyword.keyword_id,movie.id), movie.original_language),movie.original_language))", "score": -0.28277309332128875, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.28308156503356113, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,None), None),None))", "score": -0.289704513973521, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.2921803108321527, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.29901271433746, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(spoken_language),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.30063524690515675, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,has_keyword.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(language),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.3055005819077416, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(language),has_keyword.keyword_id,movie.id), movie.original_language),movie.original_language))", "score": -0.31339805295202755, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 22, "beams": [{"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.06308156609567868, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,!=,5.1), keyword.name),keyword.name))", "score": -0.16683865071063878, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.2390622432857181, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>=,5.1), keyword.name),keyword.name))", "score": -0.24774713538186502, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),oscar.number))", "score": -0.29572370244173063, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,<,5.1), keyword.name),keyword.name))", "score": -0.32522148936893486, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), oscar.number),keyword.name))", "score": -0.3649567537587462, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_average,!=,5.1), keyword.name),keyword.name))", "score": -0.3699185447244635, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),company.name))", "score": -0.37718677883536605, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(oscar),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.38653207199348144, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,keyword.id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.39723659354831303, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,!=,5.1), keyword.name),oscar.number))", "score": -0.3994807870566907, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,=,5.1), keyword.name),keyword.name))", "score": -0.40437394560158174, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(has_keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.40582353172275776, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.movie_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.4061184955429428, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 23, "beams": [{"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.05190771109068457, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Espa\u00f1ol), movie.title),movie.title))", "score": -0.19442462903019356, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))", "score": -0.23331823409670002, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.2511515953864796, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.28916646822842623, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.3225238051335453, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.35012077054866064, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))", "score": -0.3660851940502893, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,=,Espa\u00f1ol), movie.title),movie.title))", "score": -0.36611322005647895, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(oscar_winner),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.38079856891910113, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),country.iso_3166_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.38598513907326915, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Espa\u00f1ol), movie.title),movie.title))", "score": -0.3888847805364185, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(country),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.39035626892570535, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,Espa\u00f1ol), movie.title),movie.title))", "score": -0.3922776946961427, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))", "score": -0.40217545857925696, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 24, "beams": [{"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.title,=,Joanna Foley), movie.title),movie.title))", "score": -0.14211531203966427, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "score": -0.2109480784179938, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),crew.movie_id,movie.id),movie.title,=,Joanna Foley), movie.title),movie.title))", "score": -0.23750468316710444, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.original_language,=,Joanna Foley), movie.title),movie.title))", "score": -0.2418742712722403, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.name,=,Joanna Foley),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.26828256152211144, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),oscar.category,=,Joanna Foley), movie.title),movie.title))", "score": -0.29910128270958436, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),oscar.category,=,Joanna Foley), movie.title),movie.title))", "score": -0.31732199621779456, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),crew.movie_id,movie.id),movie.title,=,Joanna Foley), movie.title),movie.title))", "score": -0.32270759297374874, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,=,Joanna Foley), movie.title),movie.title))", "score": -0.3227615811801216, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),crew.movie_id,movie.id),oscar.category,=,Joanna Foley), movie.title),movie.title))", "score": -0.3244423447377085, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),country.name,=,Joanna Foley),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.3293555384789657, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,Joanna Foley),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.33033021526767825, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),crew.movie_id,movie.id),movie.original_language,=,Joanna Foley), movie.title),movie.title))", "score": -0.3471626949088737, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),crew.movie_id,movie.id),country.name,=,Joanna Foley), movie.title),movie.title))", "score": -0.34919353483614934, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),crew.movie_id,movie.id),oscar.sub_category,=,Joanna Foley), movie.title),movie.title))", "score": -0.37107181021527963, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 25, "beams": [{"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.07231169836073656, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime))", "score": -0.365047029350535, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime)", "score": -0.5137995379443475, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.status),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.577686340298855, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.vote_average)", "score": -0.6107453140035445, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,production_country.movie_id),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.6238799330392187, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.title))", "score": -0.6958895094139734, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.runtime)", "score": -0.7383103644811415, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime))", "score": -0.7427086029056227, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.title)", "score": -0.7480083219292469, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.vote_count)", "score": -0.7602301190518443, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),oscar.year)", "score": -0.7837655820769183, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.status),movie.runtime))", "score": -0.7854683204932371, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.runtime))", "score": -0.7898412497161189, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.runtime)", "score": -0.798860808103688, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 26, "beams": [{"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.1), language.name),language.name))", "score": -0.09876462606126744, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,6.1), language.name),language.name))", "score": -0.14875433646404104, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,<=,6.1),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.19379014119104535, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,<,6.1),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.21894370621985143, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_average,<,6.1), language.name),language.name))", "score": -0.28899126824214544, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.1), movie.original_language),language.name))", "score": -0.2933034816570411, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_average,<=,6.1), language.name),language.name))", "score": -0.30732688059210617, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.1), language.name),genre.name))", "score": -0.32726959536548694, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.1), language.name),movie.original_language))", "score": -0.3349697133064214, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,6.1), movie.original_language),language.name))", "score": -0.34329319205981473, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,=,6.1), language.name),language.name))", "score": -0.36700979631760294, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,>=,6.1), language.name),language.name))", "score": -0.37672729447824094, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,6.1), language.name),genre.name))", "score": -0.3772593057682605, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,6.1), language.name),movie.original_language))", "score": -0.384959423709195, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.1), language.name),language.name))", "score": -0.3888145594480228, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 27, "beams": [{"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.07468988466626254, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,549),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.12550837673176723, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.3196986193287885, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.3434889239608326, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,!=,549),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3481852448430609, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.keyword_id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.3636964212793908, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,!=,549), keyword.name),keyword.name))", "score": -0.3667291528808023, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),company.name))", "score": -0.37022744253877227, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),oscar.number))", "score": -0.37033741637703765, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(has_keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.3741142415052446, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,keyword.id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.3838503232797815, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,549), keyword.name),keyword.name))", "score": -0.39151230489941496, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,>,549), keyword.name),keyword.name))", "score": -0.3977784479848565, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,549),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),oscar.number))", "score": -0.405835479902607, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,549),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.40969157881755314, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 28, "beams": [{"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.18930741687830244, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.19282718220206846, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.21875743524855265, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.22227720057231867, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.2543576288842206, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,oscar.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.2578773942079866, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,movie.id), person.birth_day),person.birth_day))", "score": -0.3171463649546207, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.3296176381401548, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.335269755795225, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.3402411888870814, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.34696571430701684, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.3531470280644124, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.3575892650539434, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar_winner.person_id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.3753673875330155, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,oscar_winner.person_id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.3788871528567816, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 29, "beams": [{"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), oscar.year),oscar.year))", "score": -0.14015246729726819, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.year),oscar.year))", "score": -0.1668844785334714, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.popularity,<=,127.085), oscar.year),oscar.year))", "score": -0.20345314289336833, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.popularity,>=,127.085), oscar.year),oscar.year))", "score": -0.22724178125566005, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,oscar.id),movie.popularity,<=,127.085), oscar.year),oscar.year))", "score": -0.22934289115402992, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,oscar.id),movie.popularity,>=,127.085), oscar.year),oscar.year))", "score": -0.2531315295163216, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), oscar.year),oscar.year))", "score": -0.2571448628116655, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.year),oscar.year))", "score": -0.2838768740478687, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), oscar.sub_category),oscar.year))", "score": -0.3334987774713206, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), oscar.year),movie.vote_average))", "score": -0.3338566166317534, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), oscar.year),oscar.year))", "score": -0.3571170552872151, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.sub_category),oscar.year))", "score": -0.3602307887075238, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.year),movie.vote_average))", "score": -0.36058862786795665, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), movie.vote_average),oscar.year))", "score": -0.38250496982954313, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.year),oscar.year))", "score": -0.38384914626596944, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 30, "beams": [{"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)", "score": -0.017219817787937294, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.vote_average),movie.vote_average)", "score": -0.5184601335579857, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),getData(movie),movie.id,movie.id), movie.id),movie.vote_average)", "score": -0.7021817759818227, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.runtime)", "score": -0.7199664394023867, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_count)", "score": -0.7551134824157882, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,Illuminata), movie.id),movie.vote_average)", "score": -0.7758809326717503, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),getData(movie),movie.id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.7950204353121456, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,movie.id), movie.id),movie.vote_average)", "score": -0.8315169693370167, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.id), movie.id),movie.vote_average)", "score": -0.8356590647397175, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,cast.movie_id), movie.id),movie.vote_average)", "score": -0.8418228688151096, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),company.name,=,Illuminata), movie.id),movie.vote_average)", "score": -0.8524043133974989, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),getData(movie),movie.id,cast.movie_id), movie.id),movie.vote_average)", "score": -0.8583764899225532, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.vote_count),movie.vote_average)", "score": -0.8670365053947573, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.runtime),movie.vote_average)", "score": -0.8850006246744552, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.revenue),movie.vote_average)", "score": -0.8973736310254237, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 31, "beams": [{"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.3639327853766187, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.3895359781790163, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4041091689912855, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4140112623154249, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4215072581611219, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,oscar_winner.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4297123617936831, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.43961445511782254, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,crew.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4421487925014685, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.gender,=,Mother and Child), movie.id),movie.runtime)", "score": -0.44434194622449336, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,has_genre.genre_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.44459628461994055, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4471104509635195, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4541876459300917, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4553642037329766, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Mother and Child), movie.id),oscar.number)", "score": -0.4607550797876012, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4623318508062832, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 32, "beams": [{"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.04545916456308557, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1448),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.18577246369970307, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,!=,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.21354153161963385, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),oscar.number))", "score": -0.35242450117625446, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>=,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3590269784066439, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),company.name))", "score": -0.36873167567275766, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))", "score": -0.39432439263444524, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,has_keyword.movie_id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.40288053798829254, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(has_keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.40465127837378406, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,!=,1448),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.41223939281826877, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.41358065598224614, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),production_company.company_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.41417213001896336, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.42293356870725046, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.movie_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.42510628686275015, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.42833834466159837, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 33, "beams": [{"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))", "score": -0.050060776571626775, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.revenue),movie.revenue))", "score": -0.17603936562954914, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Released), movie.revenue),movie.revenue))", "score": -0.6054537720483495, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))", "score": -0.6860520531263319, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Released), movie.revenue),movie.revenue))", "score": -0.6868650741380407, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Released), movie.revenue),movie.revenue))", "score": -0.6911103553575231, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.budget),movie.revenue))", "score": -0.7271024854126154, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,Released), movie.revenue),movie.revenue))", "score": -0.7309714331495343, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.revenue),movie.revenue))", "score": -0.743988721522328, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<=,Released), movie.revenue),movie.revenue))", "score": -0.786449290739256, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.budget))", "score": -0.7937074671935989, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.budget),movie.revenue))", "score": -0.8530810744705377, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,Released), movie.revenue),movie.revenue))", "score": -0.8569500222074566, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.revenue))", "score": -0.8720974595489679, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.homepage,=,Released), movie.revenue),movie.revenue))", "score": -0.8767515845102025, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 34, "beams": [{"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.05830114148920984, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.2171338778025529, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.423760412264528, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.5364553611761949, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.homepage,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.574312238026323, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.tagline,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.5852303784377, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Fast Five), movie.original_language),movie.title))", "score": -0.6901362761891505, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Fast Five), movie.title),movie.original_language))", "score": -0.6992914476468286, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,Fast Five), movie.original_language),movie.original_language))", "score": -0.707317951197183, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.7242799084669969, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.category,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.7279332559592149, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Fast Five), language.name),movie.original_language))", "score": -0.7417434849812707, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.sub_category,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.7428645771033189, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.7500000125764927, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),keyword.name,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.751909268557938, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 35, "beams": [{"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.id),movie.runtime)", "score": -0.05201899347263637, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)", "score": -0.502946789970669, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.runtime),movie.runtime)", "score": -0.6212030840886562, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.vote_average,=,7.2), movie.id),movie.runtime)", "score": -0.6998512287491611, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.runtime),movie.runtime))", "score": -0.7038592842509388, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,7.2), movie.id),movie.runtime)", "score": -0.7259380276259598, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,7.2), movie.id),movie.runtime)", "score": -0.7777996649218508, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,7.2), movie.id),movie.runtime)", "score": -0.782937650651122, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(filter(getData(movie),movie.status,=,7.2),movie.runtime)", "score": -0.8889947545604274, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.id),movie.vote_average)", "score": -0.9059171258907711, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.release_date),movie.runtime)", "score": -0.9226365850624432, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),spoken_language.movie_id,=,7.2), movie.id),movie.runtime)", "score": -0.9366035287418112, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.id),movie.id)", "score": -0.9683951274509829, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.id),movie.status)", "score": -0.9994844204596813, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.id),movie.vote_count)", "score": -1.0328803892893417, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 36, "beams": [{"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "score": -0.041501891653751954, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.revenue))", "score": -0.3424947344174143, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_place))", "score": -0.4628321014752146, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.budget))", "score": -0.4926942073216196, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.birth_day))", "score": -0.5206082843651529, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,m), person.death_day),person.death_day))", "score": -0.5736496954632457, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), movie.budget),person.death_day))", "score": -0.5771751095016953, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),oscar_nominee.person_id))", "score": -0.5839592598786112, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_day))", "score": -0.6024027754028793, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.name))", "score": -0.6221325181832071, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), movie.revenue),person.death_day))", "score": -0.6488269854744431, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,m), person.death_day),person.death_day))", "score": -0.6668936040659901, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.release_date))", "score": -0.6895363711228129, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),cast.person_id))", "score": -0.731363990198588, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.death_day))", "score": -0.7346942115982529, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 37, "beams": [{"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.08780494963373554, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.1470504039158697, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.16022949670830483, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.29859600941991127, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),production_company.company_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.350776429891279, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,spoken_language.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.36206102700504456, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.status,!=,cs), keyword.name),keyword.name))", "score": -0.37866370690655915, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.38064370503659084, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.3939341302217354, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_average,!=,cs), keyword.name),keyword.name))", "score": -0.3949095682415416, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,company.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.39655592104577064, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),company.name))", "score": -0.40420616445112706, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.41391853499959824, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.title,!=,cs), keyword.name),keyword.name))", "score": -0.4154810908423834, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,cs), keyword.name),keyword.name))", "score": -0.41971583086997144, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 38, "beams": [{"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.19209779326045126, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.21412628913711848, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.24173572653792688, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.26325330929771024, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.26376422241459413, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(company),getData(production_country),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.name,=,Rainbow Film Company, The), country.name),country.name))", "score": -0.2733764415371112, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id),company.name,=,Rainbow Film Company, The), country.name),country.name))", "score": -0.28057189471207916, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.movie_id), country.name),country.name))", "score": -0.2821573446630589, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.28528180517437746, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.29369100149034066, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.2969404215379277, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_country),company.id,production_company.company_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.name,=,Rainbow Film Company, The), country.name),country.name))", "score": -0.29827959762123435, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.movie_id), country.name),country.name))", "score": -0.30418584115257086, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(company),getData(production_country),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id),company.name,=,Rainbow Film Company, The), country.name),country.name))", "score": -0.30635639226876865, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3128912431880306, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 39, "beams": [{"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.09428165352414884, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.13739244243352774, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.23277213643100836, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(filter(getData(person),person.birth_day,=,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.25284305145026265, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), person.birth_day),movie.runtime)", "score": -0.3300863251382127, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "score": -0.36014917792282813, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(filter(getData(person),person.birth_day,<=,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.36772911891479926, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1962-03-17), movie.id),movie.runtime)", "score": -0.38276883038495646, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(person),person.birth_day,<,1962-03-17),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.38307327386845436, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.runtime),movie.runtime)", "score": -0.3976898990480445, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<=,1962-03-17), movie.id),movie.runtime)", "score": -0.4073315894403733, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.release_date),movie.runtime)", "score": -0.4082613388016151, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,=,1962-03-17), movie.id),movie.runtime)", "score": -0.4237472549991176, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), person.death_day),movie.runtime)", "score": -0.4329401644547718, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.release_date),movie.runtime)", "score": -0.4360642711102295, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 40, "beams": [{"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.14911917610879755, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.name),person.birth_day))", "score": -0.3367767074596486, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.4022751712691388, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),movie.release_date))", "score": -0.4192904049050412, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_place))", "score": -0.4212980681550107, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),oscar.year))", "score": -0.47345153628702974, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), oscar.year),person.birth_day))", "score": -0.5122844317447743, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.death_day),person.birth_day))", "score": -0.5144337156307301, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.death_day))", "score": -0.5146497303139768, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.5311615170430741, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.name))", "score": -0.5545029455315671, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),oscar.category,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.555843170870503, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),movie.runtime))", "score": -0.5790475720059476, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,M\u00e4nnedorf, Schweiz), person.name),person.birth_day))", "score": -0.5899327026199899, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.6227503408354854, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 41, "beams": [{"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))", "score": -0.04771878123210627, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,1045), movie.vote_average),movie.vote_average))", "score": -0.3985329132519837, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,1045), movie.vote_average),movie.vote_average))", "score": -0.4345976870499726, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1045), movie.vote_average),movie.vote_average))", "score": -0.4871290188275452, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))", "score": -0.5379411886751768, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,1045), movie.vote_average),movie.vote_average))", "score": -0.6787822928272362, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,1045), movie.vote_average),movie.vote_average))", "score": -0.7461055006824608, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,1045), movie.vote_average),movie.vote_average))", "score": -0.7583603944622155, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.popularity),movie.vote_average))", "score": -0.771950825535896, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_count))", "score": -0.7783301369745459, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1045), movie.vote_average),movie.vote_average))", "score": -0.7857333879910584, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.revenue),movie.vote_average))", "score": -0.8045491422053601, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.id),movie.vote_average)", "score": -0.8137765769101267, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,1045), movie.vote_average),movie.vote_average))", "score": -0.8179849844418641, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,null,1045), movie.vote_average),movie.vote_average))", "score": -0.8271809678517457, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 42, "beams": [{"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.original_language),movie.original_language))", "score": -0.18595228262711316, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,tr),movie.original_language), movie.original_language))", "score": -0.35351541216368787, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.original_language))", "score": -0.35920206375885755, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.original_language),movie.title))", "score": -0.3762036851840094, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.original_language),movie.status))", "score": -0.37842450954485685, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.original_language))", "score": -0.38378417422919625, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.status),movie.original_language))", "score": -0.4401108539896086, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.original_language))", "score": -0.44925422855164227, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.popularity),movie.original_language))", "score": -0.45079318669074353, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,tr), movie.original_language),movie.original_language))", "score": -0.4534930523944128, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.status))", "score": -0.45351322282970213, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.original_language))", "score": -0.4556543280475958, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.original_language))", "score": -0.48059949699442794, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.original_language))", "score": -0.4879080313161635, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.title),movie.original_language))", "score": -0.5138880492522181, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 43, "beams": [{"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<,132), country.name),country.name))", "score": -0.02654266928898188, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,>,132), country.name),country.name))", "score": -0.32804858636465417, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.runtime,<,132), country.name),country.name))", "score": -0.3288224019221313, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,132),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.33570401632815483, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<,132), person.birth_place),country.name))", "score": -0.3408778310270356, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.runtime,<,132), country.name),country.name))", "score": -0.3556218939748506, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.37458321814512974, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<=,132), country.name),country.name))", "score": -0.38856910692741237, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id),movie.runtime,<,132), country.name),country.name))", "score": -0.39345693462738485, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<,132), country.name),person.birth_place))", "score": -0.4000713641032736, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,132), country.name),country.name))", "score": -0.40062012022149107, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,<,132), country.name),country.name))", "score": -0.4095170572172745, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1),movie.runtime,<,132), country.name),country.name))", "score": -0.41493046952525897, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<,132), country.name),movie.status))", "score": -0.42101409713981996, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<,132), genre.name),country.name))", "score": -0.42164909648836696, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 44, "beams": [{"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.021569563047999053, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,=,7.1),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2146493334832216, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.392773542850636, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3959219274918984, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,genre.id), genre.name),genre.name))", "score": -0.4098549564049667, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(has_genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.41641154920383505, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),company.name))", "score": -0.42366981872219467, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.42655706616515976, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.movie_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.43543436029323485, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.genre_id), genre.name),genre.name))", "score": -0.4408908281795839, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,has_genre.movie_id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4421330354900804, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),person.death_place))", "score": -0.4451474647915927, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4508054124131315, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), person.death_place),genre.name))", "score": -0.4549907340529107, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,company.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4556699001839656, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 45, "beams": [{"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.1542267196129178, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.15633078884596224, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.23264044085207367, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.2347445100851181, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.person_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.2478133506563633, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.person_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.24991741988940777, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.2804362672492834, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.person_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.3262270718955192, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.person_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.3283311411285636, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(person),movie.revenue,<,127869379),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.34363037013294523, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,>,127869379), person.birth_day),person.birth_day))", "score": -0.3563803353938744, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,>,127869379), person.birth_day),person.birth_day))", "score": -0.35848440462691883, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.3615130503311111, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), movie.release_date),person.birth_day))", "score": -0.36389487802041326, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), movie.release_date),person.birth_day))", "score": -0.3659989472534577, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 46, "beams": [{"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.category))", "score": -0.2097848523684159, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.category))", "score": -0.2576237621881232, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.category))", "score": -0.2653678559309245, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.number))", "score": -0.2797774766811935, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.category))", "score": -0.31320676575063183, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.number))", "score": -0.32761638650090086, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.number))", "score": -0.33536048024370213, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), person.birth_place),oscar.category))", "score": -0.3605904231309764, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.sub_category),oscar.category))", "score": -0.36144689357104093, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.year),oscar.category))", "score": -0.36362241212988067, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien),person.name), oscar.category))", "score": -0.3689171693475151, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien),oscar.category), oscar.category))", "score": -0.3710150275218564, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien),person.birth_place), oscar.category))", "score": -0.3816851567789151, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.number))", "score": -0.3831993900634095, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.category))", "score": -0.3991393545421889, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 47, "beams": [{"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), language.name),language.name))", "score": -0.08542737171687821, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), movie.original_language),language.name))", "score": -0.12115458194604059, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), language.name),movie.original_language))", "score": -0.2041962440965376, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), movie.original_language),movie.original_language))", "score": -0.23992345432569998, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.30877897051344194, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_genre.movie_id),movie.title,!=,The Road), language.name),language.name))", "score": -0.349328896547008, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), language.name),genre.name))", "score": -0.36252497300376324, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_genre.movie_id),movie.title,!=,The Road), movie.original_language),language.name))", "score": -0.38505610677617036, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.title,!=,The Road), movie.original_language),language.name))", "score": -0.39060509950285716, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,>,The Road), language.name),language.name))", "score": -0.39296888273386343, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), movie.original_language),genre.name))", "score": -0.3982521832329256, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,production_country.movie_id),movie.title,!=,The Road), language.name),language.name))", "score": -0.40250436616807805, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.title,!=,The Road), language.name),language.name))", "score": -0.40435711001496527, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_keyword.movie_id),movie.title,!=,The Road), language.name),language.name))", "score": -0.41253413615886614, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), language.name),country.name))", "score": -0.41548907170268873, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 48, "beams": [{"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.revenue),movie.revenue))", "score": -0.18258712243110087, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.vote_average),movie.revenue))", "score": -0.19470008682710926, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,=,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.2219445570277269, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.2363751544990798, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,=,1962-06-30),movie.revenue),movie.revenue))", "score": -0.2753999938854637, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.revenue))", "score": -0.27980361446547525, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,<,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.revenue),movie.revenue))", "score": -0.2866661144344703, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.revenue),movie.revenue))", "score": -0.28983059135681666, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,<,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.vote_average),movie.revenue))", "score": -0.2987790788304787, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.30180739091666153, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.vote_count),movie.revenue))", "score": -0.3209305871129683, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,>,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.32842940616389077, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1962-06-30),movie.revenue),movie.revenue))", "score": -0.3552628277743983, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,!=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.revenue),movie.revenue))", "score": -0.37241468815217177, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.death_day,=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.revenue),movie.revenue))", "score": -0.3779009380123947, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 49, "beams": [{"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.020516955241872355, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,187),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2715170223570266, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.35712728574666697, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.380570355333578, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.38572581539714407, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,genre.id), genre.name),genre.name))", "score": -0.40735429239942156, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(has_genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.42262418707409183, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.genre_id), genre.name),genre.name))", "score": -0.4253678866074297, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),person.death_place))", "score": -0.4268126308605804, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,production_company.movie_id), genre.name),genre.name))", "score": -0.4420710448921826, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,has_genre.movie_id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.44829272541393494, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.movie_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.45161088903949814, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4525645716023698, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.name),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4591559291078, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.id),genre.name))", "score": -0.4621329657980539, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 50, "beams": [{"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.045645157674699774, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Horror), movie.revenue),movie.revenue)", "score": -0.1812123270210433, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(merge(filter(getData(genre),genre.name,!=,Horror),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.revenue)", "score": -0.24807467947593714, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.2503032894606829, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.revenue),movie.revenue)", "score": -0.2846880983570451, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.3198694851055985, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),genre.id,movie.id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.37039821513075993, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(merge(filter(getData(genre),genre.name,!=,Horror),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.revenue),movie.revenue)", "score": -0.38187645067706083, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.4070548989939612, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),person.death_place,!=,Horror), movie.id),movie.revenue)", "score": -0.4187870151456135, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Horror), movie.id),movie.revenue)", "score": -0.4361091162679807, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,!=,Horror), movie.revenue),movie.revenue)", "score": -0.43908176215831246, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.genre_id,movie.id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.44996687968067234, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),oscar.category,!=,Horror), movie.id),movie.revenue)", "score": -0.4512052066150884, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.45230698956487725, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 51, "beams": [{"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.09611008103195277, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.09671977070392168, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.status,=,Rumored), keyword.name),keyword.name))", "score": -0.20766931212267004, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3191840795508153, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.3686825580749159, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),company.name))", "score": -0.3732083573616837, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,spoken_language.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.38604283706716874, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,production_company.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.39186884557189566, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),company.name))", "score": -0.3936686858970978, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3950620665208438, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,production_country.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.40428064960833376, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.4186962377595109, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),person.death_place))", "score": -0.4302474092377307, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),country.name,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.43188415444897016, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,!=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.4351377789391827, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 52, "beams": [{"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.027436821415903978, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.3500030664732446, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), language.name),movie.original_language))", "score": -0.35202824374239, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.50575002203532, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), movie.original_language),language.name))", "score": -0.5267025265714472, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), language.name),language.name))", "score": -0.5287277038405926, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.5363660899716131, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.vote_count,>,950), language.name),movie.original_language))", "score": -0.5383912672407585, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.5579023268804398, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,>,950), language.name),movie.original_language))", "score": -0.5599275041495853, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.5758560574269028, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.5906937699670394, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),language.name))", "score": -0.6031446521374164, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),movie.id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.6056994892682224, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),movie.id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), language.name),movie.original_language))", "score": -0.607724605622919, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 53, "beams": [{"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_count),oscar.number))", "score": -0.19331538071776044, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.vote_count),oscar.number))", "score": -0.1942205074044278, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_average),oscar.number))", "score": -0.24540052157720812, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.vote_average),oscar.number))", "score": -0.2463056482638755, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.revenue),oscar.number))", "score": -0.2957174333877565, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.revenue),oscar.number))", "score": -0.2966225600744239, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(movie),movie.vote_count,>,1952),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))", "score": -0.2968437884015294, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_count),movie.vote_count))", "score": -0.3100722953711919, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.vote_count),movie.vote_count))", "score": -0.3109774220578593, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_count),oscar.number))", "score": -0.3183485118216497, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.vote_count),oscar.number))", "score": -0.31915462833386987, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(movie),movie.vote_count,>,1952),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))", "score": -0.3280144383779492, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_average),movie.vote_count))", "score": -0.3621574362306396, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.vote_average),movie.vote_count))", "score": -0.363062562917307, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_average),oscar.number))", "score": -0.383433432672535, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 54, "beams": [{"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),country.name))", "score": -0.07817196827524876, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.revenue,<,30127963),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,30127963), country.name),country.name))", "score": -0.2130262627872034, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.21806816771647833, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),country.name))", "score": -0.24826439511766818, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,30127963), country.name),country.name))", "score": -0.27231298277613736, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,30127963), country.name),country.name))", "score": -0.2742364888856108, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),country.name))", "score": -0.28748616245300596, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),country.name))", "score": -0.29368405228794825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,30127963),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2971231938062378, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.popularity,<,30127963), country.name),country.name))", "score": -0.31119830423255285, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.33959897089608976, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,<,30127963), country.name),country.name))", "score": -0.3516625808391808, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_average,<,30127963), country.name),country.name))", "score": -0.3852870901953251, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<=,30127963), country.name),country.name))", "score": -0.39436623843585006, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.revenue,<,30127963), country.name),country.name))", "score": -0.41046612673932426, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 55, "beams": [{"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.013910528585256543, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,ja), movie.runtime),movie.runtime))", "score": -0.4455595053559793, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.45827429564550487, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.5293544704909436, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,ja), movie.runtime),movie.runtime))", "score": -0.5701623826461854, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ja),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.vote_average),movie.runtime))", "score": -0.5802199735354966, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,ja), movie.runtime),movie.runtime))", "score": -0.5824773969461418, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.5828771729357108, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.5951921872356674, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ja),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.runtime),movie.runtime))", "score": -0.5990471898527724, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.title))", "score": -0.6101835296358331, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,=,ja), movie.runtime),movie.runtime))", "score": -0.656735576576879, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity,=,ja), movie.runtime),movie.runtime))", "score": -0.66776221221392, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,ja), movie.runtime),movie.runtime))", "score": -0.6716972076901584, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.release_date))", "score": -0.7214392945970758, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 56, "beams": [{"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.03422366240217219, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))", "score": -0.25622031996027483, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.budget))", "score": -0.280932156888766, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Fantasy),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))", "score": -0.3528666640804869, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.popularity),movie.budget))", "score": -0.35428426399757684, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.title))", "score": -0.3719193403895414, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fantasy),movie.vote_average),movie.budget))", "score": -0.38247201806222314, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),has_genre.movie_id,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.38897478312920936, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(has_genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.4254165797877434, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.4267143056343799, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),genre.id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.44649201550469253, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.name,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.4513212663478711, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.movie_id),movie.vote_average),movie.budget))", "score": -0.4521851360937156, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.original_language))", "score": -0.4562713299248213, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,movie.id),movie.vote_average),movie.budget))", "score": -0.4570557491108884, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 57, "beams": [{"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "score": -0.07443476011030725, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,105000000), movie.original_language),movie.original_language))", "score": -0.2706423281597381, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,105000000), movie.original_language),movie.original_language))", "score": -0.2901667534279113, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,105000000), movie.original_language),movie.original_language))", "score": -0.35671724666826776, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,105000000), movie.original_language),movie.original_language))", "score": -0.46823434819452814, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,105000000), movie.original_language),movie.original_language))", "score": -0.5553921340870147, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,null,105000000), movie.original_language),movie.original_language))", "score": -0.6709781764911895, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.title),movie.original_language))", "score": -0.7226801233737206, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.title))", "score": -0.7546117638376018, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>,105000000), movie.original_language),movie.original_language))", "score": -0.7958353871617874, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.vote_average),movie.original_language))", "score": -0.8029500561206078, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,105000000), movie.original_language),movie.original_language))", "score": -0.8323439473424514, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,105000000), movie.original_language),movie.original_language))", "score": -0.8519842142377456, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),language.name))", "score": -0.8522540067460795, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "score": -0.8576602851680946, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 58, "beams": [{"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.03914450536831282, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.3653810166634277, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.43114097611396573, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,oscar_winner.person_id),getData(person),cast.person_id,person.id),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.4844596332004974, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.49433587967541087, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.5006564907996351, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.birth_place))", "score": -0.5511140330636408, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.5573784760477627, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.5601406647765543, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.5732733561599161, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.5774904810902927, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.birth_place),person.death_place))", "score": -0.5798221971781459, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),company.name))", "score": -0.5903302534425166, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_day))", "score": -0.5990052922570612, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_place,!=,Milton, Ontario), person.death_place),person.birth_place))", "score": -0.65967614682589, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 59, "beams": [{"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.05618992570281245, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.25726297775822354, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.48653159296879955, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),genre.name,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.535342488677229, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.5579963775022247, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),company.name,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.6518462587838166, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(cast),person.id,has_genre.genre_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.6563960011946195, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),person.id,has_genre.genre_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.7019418001113623, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(person),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.706585164280694, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(has_genre),person.id,has_genre.genre_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.7072645727417914, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(cast),person.id,cast.person_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.7099923200635825, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(movie),cast.movie_id,movie.id),person.id,has_genre.genre_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.715484507564525, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),person.death_place,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.7792438811698011, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.7882978700434046, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.popularity)", "score": -0.8669453376076826, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 60, "beams": [{"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.0866135877877241, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.29151994289061167, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.32080048927153876, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.3570780263442715, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.3655804983289875, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Belgium), person.birth_day),person.birth_day))", "score": -0.41881023508904036, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Belgium), person.death_day),person.birth_day))", "score": -0.42128039126691874, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.43113858178264736, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.4315724407642847, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,<,Belgium), person.birth_day),person.birth_day))", "score": -0.4508684144675499, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.45566120768780044, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,movie.id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.4816922714149262, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.49578330845384394, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Belgium), person.birth_day),movie.release_date))", "score": -0.5161548133328324, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.death_day),person.birth_day))", "score": -0.5199806528638937, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 61, "beams": [{"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.19122041560331127, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.title,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.40513588659086963, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.status,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.46640815011778614, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.original_language,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.48913624649017085, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.5120316132250603, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.5279281688103157, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.5470850895654429, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.status,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.5534019598616599, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),country.name,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.5549626899322853, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.popularity),movie.runtime))", "score": -0.5566797177452442, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.5578994152287348, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.original_language,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.565836721723186, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.popularity),movie.runtime))", "score": -0.5758366385003713, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),getData(movie),movie.id,spoken_language.iso_639_1),movie.popularity),movie.runtime))", "score": -0.5782858849298527, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),getData(movie),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.5878960133703649, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 62, "beams": [{"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.3580865370312201, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.36294688982284473, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.oscar_id,person.id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.3783790013510221, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.3811276783562547, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.3901527445881739, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.oscar_id,person.id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.3914379161897249, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.39418659319495747, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.39501309737979856, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.4047743387598626, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.4053750844753707, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), person.birth_place),movie.release_date))", "score": -0.40657088527468965, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,oscar.id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.4081237792011702, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.4096346915514872, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.4184340170346404, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,oscar.id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.421182694039873, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 63, "beams": [{"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.045327548767090775, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_place))", "score": -0.27996302106475923, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.40005792015290353, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.5214294178600309, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.name))", "score": -0.536696706796647, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.6070238716540276, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.6189010226080427, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Bainbridge Island, Washington), person.death_day),person.death_place))", "score": -0.634693392450572, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_place))", "score": -0.6580884496237914, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_place),person.death_day))", "score": -0.6594836641015718, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),genre.name,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.6720738493750105, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.birth_day))", "score": -0.6753107652912149, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),oscar_nominee.person_id))", "score": -0.6798195586452493, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),company.name,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.7146024190733442, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.birth_day),person.death_day))", "score": -0.7274905968370149, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 64, "beams": [{"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))", "score": -0.015918538061669096, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.runtime,<,110), movie.budget),movie.budget))", "score": -0.44680460852172804, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,110), movie.budget),movie.budget))", "score": -0.541966025106376, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,cast.movie_id),movie.runtime,<,110), movie.budget),movie.budget))", "score": -0.6297695765799382, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.title))", "score": -0.6663675039017107, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.release_date))", "score": -0.7244955628120806, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.original_language))", "score": -0.7437593071663287, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,110), movie.budget),movie.budget))", "score": -0.7718547921685968, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.title),movie.budget))", "score": -0.7752533633902203, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,110), movie.budget),movie.budget))", "score": -0.7825539152545389, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.original_language),movie.budget))", "score": -0.8125951965048444, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.revenue))", "score": -0.8337666123115923, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<,110), movie.budget),movie.budget))", "score": -0.8421306949167047, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.revenue),movie.budget))", "score": -0.8460872848227154, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.release_date),movie.budget))", "score": -0.8632128317549359, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 65, "beams": [{"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.09970764223484747, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.15122550138340748, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,!=,2015-10-30), language.name),language.name))", "score": -0.20179476655902542, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.release_date,!=,2015-10-30), language.name),language.name))", "score": -0.3146118011184467, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.3502240730737035, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.37226433788105723, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.3773690399711178, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(cast),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.389408534342935, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3905415491814134, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),person.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3922787002323204, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.40039504973992557, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,!=,2015-10-30), language.name),movie.original_language))", "score": -0.4004522728655101, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.movie_id),getData(genre),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.4021710724231252, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),merge(getData(spoken_language),getData(genre),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.40313764394364837, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,!=,2015-10-30), language.name),language.name))", "score": -0.41031539753750795, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 66, "beams": [{"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.category))", "score": -0.046700713815830325, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.sub_category))", "score": -0.20286750476368454, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.sub_category),oscar.category))", "score": -0.22326982696149425, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,186), oscar.category),oscar.category))", "score": -0.2494965030060953, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,>=,186), oscar.category),oscar.category))", "score": -0.26492094518236814, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.number),oscar.category))", "score": -0.28662627617082553, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.number))", "score": -0.28819331033313034, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.year))", "score": -0.36896553270507504, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.sub_category),oscar.sub_category))", "score": -0.37943661790934846, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,=,186), oscar.category),oscar.category))", "score": -0.3859993767040721, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), company.name),oscar.category))", "score": -0.40266554552046385, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,186), oscar.category),oscar.sub_category))", "score": -0.4056632939539495, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), movie.title),oscar.category))", "score": -0.4076836556590362, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), keyword.name),oscar.category))", "score": -0.4129590684291929, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.category))", "score": -0.41510185613184986, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 67, "beams": [{"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))", "score": -0.030864241656672675, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,48000000), movie.runtime),movie.runtime))", "score": -0.2819268639505026, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.runtime),movie.runtime))", "score": -0.6232993240773794, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.title))", "score": -0.6695377767391619, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.release_date))", "score": -0.671700531274837, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,48000000), movie.runtime),movie.runtime))", "score": -0.6951057548940298, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.title),movie.runtime))", "score": -0.7008734098708373, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,48000000), movie.runtime),movie.runtime))", "score": -0.7095684605956194, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))", "score": -0.7414100132882595, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.vote_average),movie.runtime))", "score": -0.8063351265227539, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), oscar.year),movie.runtime))", "score": -0.8089244118964416, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.vote_count))", "score": -0.8095043242283282, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),genre.name,<=,48000000), movie.runtime),movie.runtime))", "score": -0.8240348893523333, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,48000000), movie.runtime),movie.runtime))", "score": -0.8323418694853899, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.status),movie.runtime))", "score": -0.8425126425063354, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 68, "beams": [{"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.05235208969679661, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_place))", "score": -0.3024537845340092, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.43179073099937654, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.4501740838696375, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.4901045049342516, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,f), person.birth_day),person.birth_place))", "score": -0.5040671110937017, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.5098054349671216, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,person.gender),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.5181572344526616, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.5323100398869364, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,person.gender), person.birth_place),person.birth_place))", "score": -0.538916906485743, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id), person.birth_place),person.birth_place))", "score": -0.5417856270413896, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),person.gender,person.id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.5441952714997517, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.5463291392137068, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,=,f), person.birth_day),person.birth_place))", "score": -0.5623808850285769, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.5703808039874697, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 69, "beams": [{"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.23387438062472188, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.25410279760898397, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.31057494833694566, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3217982250902101, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_place),person.name))", "score": -0.32279965862791077, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.34202664207447225, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_place),person.name))", "score": -0.3430280756121729, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_day),person.name))", "score": -0.351327255038186, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.3592707472451109, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.birth_place),person.name))", "score": -0.3656584800004296, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_day),person.name))", "score": -0.37155567202244816, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,oscar_winner.person_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.3744256906096211, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.379499164229373, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.birth_place),person.name))", "score": -0.38588689698469175, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.3946541075938832, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 70, "beams": [{"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,iodine),movie.revenue),movie.title))", "score": -0.1652127942394078, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.vote_count))", "score": -0.1964789761013896, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.title))", "score": -0.19660354282650822, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,iodine),movie.revenue),movie.vote_count))", "score": -0.2652655959125439, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.budget))", "score": -0.2788025898051962, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.2975895208038805, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(keyword),keyword.name,!=,iodine),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.2985511190868851, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,iodine),movie.revenue),movie.title))", "score": -0.3207091779309509, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.32100784804923854, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count),movie.vote_count))", "score": -0.3468392688886887, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count),movie.title))", "score": -0.34696383561380734, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.3657682014352637, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,iodine),movie.revenue),movie.budget))", "score": -0.3695651580273569, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(keyword),keyword.name,!=,iodine),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.3697760714941049, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.runtime))", "score": -0.37088241224806334, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 71, "beams": [{"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.title))", "score": -0.04300379500637064, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))", "score": -0.3192377568120719, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.budget))", "score": -0.4231184556047083, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.release_date))", "score": -0.45069770355621586, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.vote_count),movie.title))", "score": -0.5115684748525382, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.release_date),movie.title))", "score": -0.5450189293260337, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.revenue),movie.title))", "score": -0.5502711714143516, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,98337295), movie.budget),movie.title))", "score": -0.6221671809107647, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.id),movie.title))", "score": -0.6580992520684958, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.original_language))", "score": -0.6605018510381342, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.original_language),movie.title))", "score": -0.6976496160859824, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.budget))", "score": -0.6993524174104095, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.title))", "score": -0.704043307203392, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.release_date))", "score": -0.7269316653619171, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.budget))", "score": -0.7367895551506081, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 72, "beams": [{"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,<=,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.12892009018493683, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.15118265481558202, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,=,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.20193364143272302, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,!=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.20446870963447591, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<=,56000),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2090583184292324, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.21966197815507835, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.28068866079063337, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,<,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2893324698019808, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2911309383385557, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,>=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.29153546344005765, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,=,56000),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3161283117602352, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<=,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.32599587691993603, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<,56000),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3586183681352836, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,<=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.37994632755595276, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,>=,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.40218589631439755, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 73, "beams": [{"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))", "score": -0.015448798061697744, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_place))", "score": -0.544924505855306, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_day))", "score": -0.5751926601951709, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),genre.name))", "score": -0.5880376399582019, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.death_place))", "score": -0.681553477756097, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),company.name))", "score": -0.6905818284576526, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,<,f), person.death_place),person.death_place))", "score": -0.6942125506320735, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), genre.name),person.death_place))", "score": -0.6946309887425741, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),movie.budget))", "score": -0.7341221870010486, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,f), person.death_place),person.death_place))", "score": -0.769391966969124, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.gender))", "score": -0.7727528513496509, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.gender),person.death_place))", "score": -0.7869660936848959, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.birth_place))", "score": -0.7920621932571521, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,f), person.death_place),person.death_place))", "score": -0.8024050127569353, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_place),person.death_place))", "score": -0.8100311242596945, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 74, "beams": [{"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.12442110335541656, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3050112560958951, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3744025812120526, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3784648718015815, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.37861702058910107, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.4090555719243389, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.4092077207118584, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.4140116910897059, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.4141638398772255, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.4237779562504899, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.42393010503800943, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.4446023912124633, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.4447545399999828, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.status,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.5184871242017834, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_day)", "score": -0.5329308528079965, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 75, "beams": [{"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.10107155839293032, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.10401244757897106, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(filter(getData(person),person.gender,=,m),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.18493921506816235, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.runtime),movie.runtime)", "score": -0.26341941748204933, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.2917121038436423, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.runtime),movie.runtime)", "score": -0.30087626758984093, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(filter(getData(person),person.gender,=,m),getData(crew),person.id,crew.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.30426834527156643, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(filter(getData(person),person.gender,=,m),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.runtime),movie.runtime)", "score": -0.3285969025706131, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.38737187481457147, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,!=,m), movie.id),movie.runtime)", "score": -0.40304278191631093, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.411252082886656, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,m), movie.id),movie.runtime)", "score": -0.412222751524005, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.popularity,=,m), movie.id),movie.runtime)", "score": -0.4391202447667682, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.runtime)", "score": -0.44591996146643975, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.runtime),movie.runtime)", "score": -0.45405997214833155, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 76, "beams": [{"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.29050431234555146, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.29554331581233995, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.32460924919520745, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.32680553791343836, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),cast.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.33184454138022684, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.34875363935135295, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.35379264281814143, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,spoken_language.iso_639_1),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3590852224818321, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(movie),cast.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.36091047476309435, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,person.gender),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3633749484836741, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(spoken_language),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3703282861866768, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(spoken_language),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3753672896534653, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),production_country.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3785984503271128, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(cast),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.38285856400810064, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.popularity),movie.popularity)", "score": -0.39143745428733606, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 77, "beams": [{"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))", "score": -0.01684288119759003, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))", "score": -0.4483802224167448, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,15.0481), movie.title),movie.title))", "score": -0.5458614981998835, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))", "score": -0.635967295820592, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,15.0481), movie.title),movie.title))", "score": -0.6490018523563776, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,15.0481), movie.title),movie.title))", "score": -0.7730209169476439, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,<,15.0481), movie.title),movie.title))", "score": -0.7930653033345152, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.original_language),movie.title))", "score": -0.7936480380976718, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,15.0481), movie.title),movie.title))", "score": -0.8255444703190733, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,15.0481), movie.title),movie.title))", "score": -0.8351237333645258, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.original_language))", "score": -0.8507107615387213, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), company.name),movie.title))", "score": -0.8818979002917331, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),company.name))", "score": -0.8910169720566046, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,15.0481), movie.title),movie.title))", "score": -0.9247456131070066, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,15.0481), movie.title),movie.title))", "score": -0.9250783262341429, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 78, "beams": [{"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,fa),getData(country),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.20828892153578576, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,fa),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.23376224209209892, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,fa),getData(country),production_country.movie_id,country.iso_3166_1),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.26889357378368955, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,fa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.27634579211199156, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,fa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2800198495683343, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,fa),getData(production_country),country.iso_3166_1,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2854532698913604, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,fa),getData(production_country),country.iso_3166_1,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.289796656154275, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,fa),getData(movie),production_country.movie_id,country.iso_3166_1),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.29436690108129465, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.movie_id),country.name,=,fa),getData(country),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3015036753750728, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,fa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3063973558985033, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,fa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.31007141335484606, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,fa),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.35958952537651995, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,fa),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3639328745369976, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,fa),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3744883079438658, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,fa),getData(country),production_country.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.4101831666031114, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 79, "beams": [{"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.06320218865350286, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.16721794440097168, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(movie),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.2010426094388893, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.21865235818000123, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(has_keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.23614128876384827, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.24123144299167962, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(movie),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.27505610802959723, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(production_company),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.30529274131083217, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(has_keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.3101548016542663, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(production_company),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.31367533819191323, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.31903532772588683, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,strafzettel), movie.title),movie.title))", "score": -0.33469529848989893, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.3506473547638117, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.36187578283400895, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,strafzettel), movie.title),movie.title))", "score": -0.36747567398777076, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 80, "beams": [{"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))", "score": -0.03100845824337739, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))", "score": -0.3319781487043656, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,hi), movie.runtime),movie.runtime))", "score": -0.595033399773456, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.title))", "score": -0.6043616426304652, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,hi), movie.runtime),movie.runtime))", "score": -0.6757372160918749, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))", "score": -0.6817277973786986, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.status))", "score": -0.7086332333401515, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.title),movie.runtime))", "score": -0.7234614617318584, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,hi), movie.runtime),movie.runtime))", "score": -0.7426387593277468, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,=,hi), movie.runtime),movie.runtime))", "score": -0.7773474976547732, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,hi), movie.runtime),movie.runtime))", "score": -0.782649390412189, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.vote_average))", "score": -0.7850524080113246, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,hi), movie.runtime),movie.runtime))", "score": -0.7915665432938113, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.status),movie.runtime))", "score": -0.8168034083337261, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),spoken_language.movie_id,=,hi), movie.runtime),movie.runtime))", "score": -0.8175233528145327, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 81, "beams": [{"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1959),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.20113436559331738, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,1959),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2637220177434666, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1959),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.265496670497872, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,1959),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.31894937838830417, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,=,1959),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3207240311427096, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1959),getData(company),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.32675264447263885, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,>,m),getData(company),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3331974829635714, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,>=,1959),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3409073492841768, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1959),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.34360223660492034, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1959),getData(company),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.426629509024136, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,>,1959),getData(company),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.43307434751506846, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,1959),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,=,m),production_company.movie_id,movie.id), company.name),company.name))", "score": -0.48394393463329755, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1959),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,=,1959),production_company.movie_id,movie.id), company.name),company.name))", "score": -0.485159462454345, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,m),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,<,1959),production_company.movie_id,movie.id), company.name),company.name))", "score": -0.48653429868771186, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1959),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,<,1959),production_company.movie_id,movie.id), company.name),company.name))", "score": -0.48774983788776904, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 82, "beams": [{"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)", "score": -0.051123424392040796, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(filter(getData(movie),movie.budget,=,112000000),movie.runtime)", "score": -0.49954589483445716, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(filter(getData(movie),movie.budget,<=,112000000),movie.runtime)", "score": -0.5670854049504154, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,112000000), movie.id),movie.runtime)", "score": -0.5893287956048794, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(filter(getData(movie),movie.budget,<,112000000),movie.runtime)", "score": -0.712394364592786, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<,112000000), movie.id),movie.runtime)", "score": -0.7238692422146707, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,112000000), movie.id),movie.runtime)", "score": -0.7371774504878565, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.vote_average)", "score": -0.7729499161863836, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.runtime),movie.runtime)", "score": -0.7894642644600754, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),genre.name,<,112000000), movie.id),movie.runtime)", "score": -0.795435562775256, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,<,112000000), movie.id),movie.runtime)", "score": -0.8180382456617239, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,<,112000000), movie.id),movie.runtime)", "score": -0.907453323558641, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,<,112000000), movie.id),movie.runtime)", "score": -0.9322875468571864, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.vote_count)", "score": -0.9497018678605429, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),oscar.year)", "score": -0.9597537468672752, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 83, "beams": [{"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.03305886924499646, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.3969941907012175, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.person_id,movie.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.41927929655273904, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,person.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.44310683155940594, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.4575080859870209, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.46539193741092744, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,movie.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.4797931918385424, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.name))", "score": -0.48765090719098225, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.5013892520801164, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.person_id,person.id),person.id,crew.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.5020482303181534, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.movie_id,person.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.5036207268452093, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.person_id,movie.id),person.id,crew.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.5243332830079742, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.movie_id,movie.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.5259057817501009, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),movie.revenue))", "score": -0.6009376110159792, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_place))", "score": -0.6038024486624636, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 84, "beams": [{"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.08031273254891858, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.24331559607526287, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.3168871689144231, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.4578834844208674, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.4753581812373069, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.48096679105830004, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.49917912849923596, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1975-10-25), person.death_place),person.death_place))", "score": -0.5322518892935477, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.birth_place))", "score": -0.5411554192542098, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.birth_place),person.death_place))", "score": -0.5551190398982726, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,1975-10-25), person.death_place),person.death_place))", "score": -0.5644112773588859, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.5711963238294977, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_day))", "score": -0.582025459909346, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,1975-10-25), person.death_day),person.death_place))", "score": -0.5929474093217257, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.birth_place))", "score": -0.5986852978773334, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 85, "beams": [{"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.19078189154787623, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.2538909284170317, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.2696421732883238, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.category),oscar.category))", "score": -0.27794124133888665, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.year,=,Libby Villa), oscar.category),oscar.category))", "score": -0.280981417239705, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.28862125043390674, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),person.name,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.32713573084796854, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.32813304767646806, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.33275121015747927, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.category,=,Libby Villa), oscar.category),oscar.category))", "score": -0.3455918889475223, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.348805128956867, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),language.name,=,Libby Villa), oscar.category),oscar.category))", "score": -0.351104810476021, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.3517302873030622, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.3674815321743543, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.sub_category,=,Libby Villa), oscar.category),oscar.category))", "score": -0.3847402406852935, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 86, "beams": [{"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "score": -0.08847588139135522, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.12395864725682115, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), movie.popularity),movie.popularity))", "score": -0.20127553957213004, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.26890233970548166, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),getData(movie),oscar_nominee.movie_id,movie.id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.26996813524206026, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.person_id,movie.id),oscar.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.28035675069782523, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.28314450246737105, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.29496544567689587, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.30428262363022923, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.person_id,movie.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3064198566692395, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),getData(movie),oscar_nominee.person_id,movie.id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.31111824429909035, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,movie.id),oscar.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3157370182928146, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3303457272141026, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "score": -0.3345573527227001, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3533404263355479, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 87, "beams": [{"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.02778386506551346, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<=,2006-01-10), movie.id),movie.vote_count)", "score": -0.49422427227723126, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.release_date,=,2006-01-10),getData(movie),movie.release_date,movie.id), movie.id),movie.vote_count)", "score": -0.590743208911762, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,crew.movie_id),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.619745671374063, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.6283600953686479, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>=,2006-01-10), movie.id),movie.vote_count)", "score": -0.6315823724772919, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.revenue)", "score": -0.6545783447134166, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.vote_count),movie.vote_count)", "score": -0.6639586709447803, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.runtime)", "score": -0.6976568341367757, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.6988301886630931, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.release_date,=,2006-01-10),getData(movie),movie.id,movie.id), movie.id),movie.vote_count)", "score": -0.7039725204459863, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_average)", "score": -0.7277450932757334, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),oscar.number)", "score": -0.7637273217251103, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.budget)", "score": -0.7643274665855829, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.runtime),movie.vote_count)", "score": -0.8621153930913211, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 88, "beams": [{"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(getData(oscar),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.11147282915771939, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.15693822454272174, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,=,1948), movie.release_date),movie.release_date))", "score": -0.2297883810882109, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(getData(oscar),oscar.year,=,1948), movie.release_date),movie.release_date))", "score": -0.2857248288637493, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.2930769012168757, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,1948), movie.release_date),movie.release_date))", "score": -0.31748797449200505, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>=,1948), movie.release_date),movie.release_date))", "score": -0.3336547196434055, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<,1948), movie.release_date),movie.release_date))", "score": -0.36249451700156327, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<=,1948), movie.title),movie.release_date))", "score": -0.3762835435628828, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.431587014042614, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,=,1948), movie.title),movie.release_date))", "score": -0.44913370010837195, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,1948), movie.release_date),movie.release_date))", "score": -0.44973173651316617, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.4627788976883379, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,<=,1948), movie.release_date),movie.release_date))", "score": -0.4663203647535701, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<=,1948), movie.release_date),movie.title))", "score": -0.4723095975385794, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 89, "beams": [{"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.title),movie.popularity))", "score": -0.06953529612655984, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.release_date),movie.popularity))", "score": -0.2574685026847874, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.title),movie.release_date))", "score": -0.32637337566848146, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.runtime),movie.popularity))", "score": -0.36577501492138254, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.release_date),movie.release_date))", "score": -0.514306582226709, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.status),movie.popularity))", "score": -0.549699034258083, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.runtime),movie.release_date))", "score": -0.6226130944633042, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.id),movie.popularity))", "score": -0.6317803521596943, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.title),movie.status))", "score": -0.6595907580995117, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,>=,1980-09-19), movie.title),movie.popularity))", "score": -0.6598937305437513, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,=,1980-09-19), movie.title),movie.popularity))", "score": -0.6785463906780933, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,>=,1980-09-19), movie.title),movie.release_date))", "score": -0.7001845626715714, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.title),movie.revenue))", "score": -0.7145902288102661, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.title),movie.id))", "score": -0.724893785729364, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.budget),movie.popularity))", "score": -0.7456960936033283, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 90, "beams": [{"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.021327388927602442, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,=,The Last Legion), movie.budget),movie.budget))", "score": -0.548508432604812, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.original_language,=,The Last Legion), movie.budget),movie.budget))", "score": -0.5713820960753742, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,The Last Legion), movie.budget),movie.budget))", "score": -0.585564167227858, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,The Last Legion), movie.budget),movie.budget))", "score": -0.5862413302420464, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.title))", "score": -0.5874782872742799, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget), movie.budget),movie.budget))", "score": -0.5906099636564389, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.5959084327779924, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.5975859641403076, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.id),movie.vote_average,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6095444181551181, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.movie_id),movie.vote_average,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6105975558769307, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.person_id), movie.budget),movie.budget))", "score": -0.6181719309344623, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,movie.budget), movie.budget),movie.budget))", "score": -0.6224197590402958, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6527024218703446, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6881126472617325, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 91, "beams": [{"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(spoken_language),person.id,has_genre.genre_id),language.name,=,Jesse Films Inc.),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.44701246533724953, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(cast),person.id,has_genre.genre_id),language.name,=,Jesse Films Inc.),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.4533860526500295, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(spoken_language),person.id,has_genre.genre_id),language.name,=,Jesse Films Inc.),getData(language),has_genre.genre_id,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.46980136690612256, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(cast),person.id,has_genre.genre_id),language.name,=,Jesse Films Inc.),getData(language),has_genre.genre_id,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.4761749542189026, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(language),spoken_language.movie_id,movie.id),language.name,=,Jesse Films Inc.),movie.revenue),movie.original_language))", "score": -0.49215704808656263, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(spoken_language),person.id,spoken_language.iso_639_1),language.name,=,Jesse Films Inc.),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.4989342934520221, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(cast),person.id,spoken_language.iso_639_1),language.name,=,Jesse Films Inc.),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.5053078807648022, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),getData(spoken_language),person.id,cast.person_id),getData(language),spoken_language.movie_id,movie.id),movie.revenue),movie.original_language))", "score": -0.5131613577634154, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(language),spoken_language.movie_id,movie.id),genre.name,=,Jesse Films Inc.),movie.revenue),movie.original_language))", "score": -0.5168762011356212, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(language),spoken_language.movie_id,movie.id),movie.original_language,=,Jesse Films Inc.),movie.revenue),movie.original_language))", "score": -0.5211736280007101, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(spoken_language),person.id,spoken_language.iso_639_1),language.name,=,Jesse Films Inc.),getData(language),has_genre.genre_id,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.5217231950208951, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),getData(spoken_language),person.id,cast.person_id),getData(language),cast.movie_id,movie.id),movie.revenue),movie.original_language))", "score": -0.5224487068827944, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(cast),person.id,spoken_language.iso_639_1),language.name,=,Jesse Films Inc.),getData(language),has_genre.genre_id,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.5280968010925566, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(spoken_language),person.id,cast.person_id),language.name,=,Jesse Films Inc.),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.5328132700798237, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,has_genre.genre_id),language.name,=,Jesse Films Inc.),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.5453394884968803, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 92, "beams": [{"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.1707528640333386, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))", "score": -0.2589450409611323, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.26710784290417894, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.28274532738821057, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.284927686085879, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.2955541019123211, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.32580983802610736, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.33121629658579643, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.34148871210212456, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,spoken_language.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.3524603058585871, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.3576874870527582, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.36734294550863195, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))", "score": -0.37877725589407557, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))", "score": -0.37990502821358624, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.3800648251324584, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 93, "beams": [{"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.13760466517192585, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.20642397849797514, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.23994480748027625, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.2459506053586991, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.27418267375913435, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.runtime),movie.runtime)", "score": -0.3115834528847225, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id), movie.id),movie.runtime)", "score": -0.33614685601988553, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.3482907476670495, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.3613276281419472, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(genre),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.3666870923545357, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.37175708096304205, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,oscar_winner.oscar_id), movie.id),movie.runtime)", "score": -0.38065885180356435, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.runtime),movie.runtime)", "score": -0.3850082664195068, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.39101511629071317, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(oscar),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.39524969794701237, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 94, "beams": [{"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.027641756449156674, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,214), movie.original_language),movie.original_language))", "score": -0.3130063200260338, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.44664598742266093, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,214), movie.original_language),movie.original_language))", "score": -0.5729383909965691, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.5759607732791941, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,cast.movie_id),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.5802835433924526, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.616111394490872, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,214), movie.original_language),movie.original_language))", "score": -0.634857245710009, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.6440876430617324, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,<,214), movie.original_language),movie.original_language))", "score": -0.6527508166849878, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),language.name))", "score": -0.6961493121816602, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.title))", "score": -0.7053645478918042, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,<=,214), language.name),movie.original_language))", "score": -0.7195569994429395, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.7655603433431679, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.title),movie.original_language))", "score": -0.7942911462050688, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 95, "beams": [{"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.23147728495380482, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),genre.name,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.2771438592715042, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.2947385304173932, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3201699101120433, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),person.death_place,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.32490044155240216, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.32652401761358635, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.34626099011563566, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),movie.original_language,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3540707496342059, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.homepage,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3541080824385509, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),keyword.name,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3587406639233526, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),genre.name,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.36404402472066005, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3844819279478661, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.38490542319962234, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Fritz Rasp),getData(cast),movie.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3862457382137646, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),person.death_day))", "score": -0.5139009083961839, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 96, "beams": [{"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.runtime),movie.runtime))", "score": -0.07043524696928216, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))", "score": -0.19217176973324968, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,2491), movie.runtime),movie.runtime))", "score": -0.450743755842268, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,2491), movie.runtime),movie.runtime))", "score": -0.5724802786062355, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,!=,2491), movie.runtime),movie.runtime))", "score": -0.5739569538782234, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.vote_average),movie.runtime))", "score": -0.584441150589555, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>,2491), movie.runtime),movie.runtime))", "score": -0.6032208712349529, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,2491), movie.runtime),movie.runtime))", "score": -0.604937719697773, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.vote_count),movie.runtime))", "score": -0.7052163137632306, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.vote_average),movie.runtime))", "score": -0.7061776733535226, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.title),movie.runtime))", "score": -0.7215011371808941, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), oscar.year),movie.runtime))", "score": -0.7220582617956097, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2491), movie.runtime),movie.runtime))", "score": -0.7249573939989205, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.runtime),oscar.year))", "score": -0.74699135292758, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.release_date),movie.runtime))", "score": -0.7505569709974225, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 97, "beams": [{"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.name), person.name))", "score": -0.16193980543175712, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,!=,2014-01-01), person.name),person.name))", "score": -0.288935669552302, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_place,!=,2014-01-01),person.name), person.name))", "score": -0.3020957168773748, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,2014-01-01),person.name), person.name))", "score": -0.39477873413125053, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.name), person.gender))", "score": -0.48397910041967407, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.name,!=,2014-01-01),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.name),person.name))", "score": -0.5096594449611896, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_place,!=,2014-01-01), person.name),person.name))", "score": -0.5534948695858475, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.name), person.birth_day))", "score": -0.554636592103634, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,!=,2014-01-01), person.name),person.name))", "score": -0.577073155756807, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,!=,2014-01-01), person.name),person.gender))", "score": -0.6155340837722179, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_place,!=,2014-01-01),person.name), person.gender))", "score": -0.6241350118652917, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.name), oscar_winner.person_id))", "score": -0.6297691409126855, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),movie.revenue,!=,2014-01-01),person.name), person.name))", "score": -0.6792250928119756, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_place,!=,2014-01-01),person.name), person.birth_day))", "score": -0.6947925035492517, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,2014-01-01),person.name), person.gender))", "score": -0.7168180291191675, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 98, "beams": [{"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.017364035622449592, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,8.1), movie.title),movie.title))", "score": -0.45288616864127107, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.5566168417879563, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,8.1), movie.title),movie.title))", "score": -0.5760213181201834, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.5895280767288903, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.5990628283725528, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.person_id),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.6383771585408575, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.6398639055215027, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.6456859540332922, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.id),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.6536900505790613, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,8.1), movie.title),movie.title))", "score": -0.6650347754184622, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>,8.1), movie.title),movie.title))", "score": -0.6754945520369802, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,8.1), movie.title),movie.title))", "score": -0.7728487297717948, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.original_language),movie.title))", "score": -0.7756459478114266, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,8.1), movie.title),movie.title))", "score": -0.7991508249251638, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 99, "beams": [{"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.3675437537042654, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.category),oscar.sub_category))", "score": -0.3879720352095858, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.4042822516655572, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.category),oscar.year))", "score": -0.40974179621712725, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.number),oscar.category))", "score": -0.4117548358652561, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.41731394272427413, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.sub_category),oscar.category))", "score": -0.42044644480890536, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.42155995424689763, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.4224714141514634, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.4262811364631172, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), movie.title),oscar.category))", "score": -0.4341921335512518, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.sub_category))", "score": -0.44448947284196405, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), movie.title),oscar.category))", "score": -0.4451818542211912, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), movie.title),oscar.category))", "score": -0.4472238246099688, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.sub_category))", "score": -0.44857256851246624, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 100, "beams": [{"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.044033751049498436, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))", "score": -0.12708967460711812, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.28255983813926855, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),production_company.movie_id,production_company.company_id), movie.title),movie.title))", "score": -0.37359305275078886, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(production_company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.40185848998660995, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.name,production_company.company_id), movie.title),movie.title))", "score": -0.40511301497234975, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),oscar_nominee.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4061150778670597, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.company_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.42207443307618425, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,company.name), movie.title),movie.title))", "score": -0.42640574789509866, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4280186186572381, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id), movie.title),movie.title))", "score": -0.43235124618252346, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.43377971091079975, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4506068581419332, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4557353928078181, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),company.id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.45951392437124206, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 101, "beams": [{"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)", "score": -0.05479323197140335, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.3513945637021094, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.36069019651367984, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,fr), movie.id),movie.vote_count)", "score": -0.5002226414082904, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,fr), movie.id),movie.vote_count)", "score": -0.5095182742198608, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.5473330525276981, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.5565647661785492, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.5589610346023811, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.5658603989901196, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,=,fr), movie.id),movie.vote_count)", "score": -0.5821212380248941, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,fr), movie.vote_count),movie.vote_count))", "score": -0.582576121269085, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,=,fr), movie.id),movie.vote_count)", "score": -0.5914168708364645, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity,=,fr), movie.id),movie.vote_count)", "score": -0.6147825660097858, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.vote_count),movie.vote_count)", "score": -0.674840085091092, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(filter(getData(movie),movie.original_language,!=,fr),movie.vote_count)", "score": -0.6979737989726222, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 102, "beams": [{"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.11696692683835863, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.207108379156125, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.runtime),movie.vote_average))", "score": -0.36583856807192205, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.3658430942996347, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.4781762871898536, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_count),movie.vote_average))", "score": -0.5175509558721387, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.runtime),movie.vote_average))", "score": -0.6147147355331981, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_count))", "score": -0.6207784566759074, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.revenue),movie.vote_average))", "score": -0.6257778214021528, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.6960029640431458, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.id),movie.vote_average))", "score": -0.7099524544282758, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.runtime),movie.vote_average))", "score": -0.7181282530546014, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.popularity),movie.vote_average))", "score": -0.7258122967286909, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.7585952342960809, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_count),movie.vote_average))", "score": -0.7664271233334148, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 103, "beams": [{"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.05159558950499645, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.popularity)", "score": -0.256729782637079, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity)", "score": -0.3551135178948167, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.popularity)", "score": -0.3566388949544615, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.popularity)", "score": -0.3697926270834703, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.3935545930516545, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.id)", "score": -0.4121632347033079, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.4134590076743825, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.4172414144074951, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.4179530391814649, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.4322705323725705, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera), movie.id),movie.popularity)", "score": -0.4434306670839949, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),keyword.id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.44535962280592595, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.movie_id), movie.id),movie.popularity)", "score": -0.4461424789731433, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),cast.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.45235406053426763, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 104, "beams": [{"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)", "score": -0.048503550290553754, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.vote_count),movie.vote_count)", "score": -0.4638063626366553, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.vote_count),movie.vote_count))", "score": -0.5273119397843402, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,4.4), movie.id),movie.vote_count)", "score": -0.6744836036601448, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>,4.4), movie.id),movie.vote_count)", "score": -0.6952575745257146, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.revenue)", "score": -0.7628341273090391, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.runtime)", "score": -0.7771147347321989, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_average)", "score": -0.7793692974843842, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,4.4), movie.id),movie.vote_count)", "score": -0.7932830076229415, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>=,4.4), movie.id),movie.vote_count)", "score": -0.8080676041002, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.revenue),movie.vote_count)", "score": -0.8312270828980065, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.runtime),movie.vote_count)", "score": -0.8323019384017885, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.budget)", "score": -0.8614623328164248, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.title),movie.vote_count)", "score": -0.8903508921623523, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,!=,4.4), movie.id),movie.vote_count)", "score": -0.8953293784531831, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 105, "beams": [{"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.09852639936038683, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Entropy), movie.title),movie.title))", "score": -0.11204741228467405, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.19600020863892753, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Entropy),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.2468985486742768, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(production_company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.2877587633473425, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),getData(production_company),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.3037222100486751, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Entropy), movie.title),movie.title))", "score": -0.33347008063124417, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),merge(getData(production_company),getData(movie),production_company.company_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.3344002838891008, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),getData(production_company),movie.id,production_company.company_id), movie.title),movie.title))", "score": -0.35592032260378015, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),getData(production_company),company.id,production_company.movie_id), movie.title),movie.title))", "score": -0.36975646164835574, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(production_company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.3711364105022598, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id),company.name,=,Entropy), movie.title),movie.title))", "score": -0.3777806428956905, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),getData(movie),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.39463680425387304, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.movie_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.40182439653737245, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.company_id,movie.id), movie.title),movie.title))", "score": -0.40861362805362494, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 106, "beams": [{"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.21674671980204252, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.23601301632630164, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.24203836791838051, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.24980457914376072, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.2613046644426396, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.26907087566801985, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.2750962272600987, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.2801709701154558, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.29436252378435784, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.2994372666397149, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.30546261823179377, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.313228829457174, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.original_language,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.3246800131903519, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.32472892417010407, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,Little Fockers),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.3534207138821171, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 107, "beams": [{"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.05348071101531437, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.budget),movie.budget)", "score": -0.4240768446226761, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.48998774761661157, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.id),movie.budget)", "score": -0.529643247568233, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,movie.id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5385821851528048, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5429811505389774, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(cast),movie.id,movie.id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5704764066597712, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5824587844126589, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),language.iso_639_1,movie.id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5936645914186074, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),language.iso_639_1,movie.id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.6002586252028815, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.iso_639_1),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.6016498810150888, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.6046575857686021, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,5.3), movie.id),movie.budget)", "score": -0.6357782061273654, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,<,5.3), movie.id),movie.budget)", "score": -0.6617962876749623, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,<,5.3), movie.id),movie.budget)", "score": -0.7017036374305953, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 108, "beams": [{"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.status),movie.release_date))", "score": -0.20693740539661215, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.release_date),movie.release_date))", "score": -0.24342135028510803, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,costume design),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.2717107978507825, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,costume design),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.release_date))", "score": -0.2850929801314053, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.runtime),movie.release_date))", "score": -0.28899698265340723, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.popularity),movie.release_date))", "score": -0.29335400932270356, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), oscar.category),movie.release_date))", "score": -0.29678035181770146, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), oscar.year),movie.release_date))", "score": -0.29811984947069486, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.release_date))", "score": -0.29839923192865353, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.30081063316750545, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.release_date))", "score": -0.3049041395013016, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),movie.release_date))", "score": -0.3108769132801281, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,costume design),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar.id),oscar.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.37572483195411527, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,costume design),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.38493271436312454, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,costume design),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar.id),oscar.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id), movie.title),movie.release_date))", "score": -0.418689750760604, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 109, "beams": [{"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.20860891631379122, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.2650169540306598, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "score": -0.26803969067856437, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,5.11281), oscar.number),oscar.number))", "score": -0.2793618287462784, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.status,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.30192595329742694, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,5.11281), oscar.number),oscar.number))", "score": -0.3086574611074363, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3200506200188491, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "score": -0.3244477283954329, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),movie.popularity,=,5.11281),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.32467520882494727, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3419693199233705, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar_winner.oscar_id,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.35672244721804564, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.status,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.35833399101429547, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.36017731982577433, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.status,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "score": -0.36135672766220006, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.vote_average,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.36558283699821015, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 110, "beams": [{"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), keyword.name),keyword.name))", "score": -0.09039847761151032, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.1465793581726661, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_count,>,477), keyword.name),keyword.name))", "score": -0.1718013583630996, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,477), keyword.name),keyword.name))", "score": -0.3124482779892539, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), keyword.name),company.name))", "score": -0.32216760690596113, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,!=,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3233649219517339, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.32984323615366967, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.34266222337664676, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), keyword.name),oscar.number))", "score": -0.3564193894434781, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,!=,477), keyword.name),keyword.name))", "score": -0.37600623136444905, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,>,477), keyword.name),keyword.name))", "score": -0.3833945877721837, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,<,477), keyword.name),keyword.name))", "score": -0.39068116444254736, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),company.name))", "score": -0.3927125098761111, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_count,>,477), keyword.name),keyword.name))", "score": -0.3957758509815377, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),oscar.number))", "score": -0.4017320303471591, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 111, "beams": [{"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),keyword.name))", "score": -0.1555540356686434, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),keyword.name))", "score": -0.21055499373766545, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),person.death_place))", "score": -0.2471013860867512, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.24898608337890302, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), keyword.name),keyword.name))", "score": -0.25394830303221666, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.26084309190641247, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2915074610387577, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), country.name),keyword.name))", "score": -0.3039775657403413, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), person.death_place),keyword.name))", "score": -0.3051018735062337, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), keyword.name),keyword.name))", "score": -0.33358456599995007, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), person.death_place),person.death_place))", "score": -0.3435329631474713, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), keyword.name),person.death_place))", "score": -0.34549565345032446, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),oscar.number))", "score": -0.34575047077239923, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), person.death_place),company.name))", "score": -0.3553899716749807, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),person.name))", "score": -0.370301430202744, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 112, "beams": [{"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.23041138865635366, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2808138109869492, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2872709599306461, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),country.iso_3166_1,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.29724531748665356, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3331601685837924, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),person.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3558998365818741, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.3662319585061755, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,movie.id), company.name),company.name))", "score": -0.3710211374920151, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_company.movie_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3792152467796898, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,production_company.company_id), company.name),company.name))", "score": -0.38887993268682264, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_country.iso_3166_1),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.39007070841662783, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.3938343129636846, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),country.iso_3166_1,production_company.movie_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3999940974140923, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.4002914619073815, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), person.death_place),company.name))", "score": -0.40475466126328513, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 113, "beams": [{"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42), movie.status),movie.status))", "score": -0.19320008846298442, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,<,Camera), movie.status),movie.status))", "score": -0.2322586988197638, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42), movie.status),movie.status))", "score": -0.2810653243684771, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.status),movie.status))", "score": -0.2873296234701557, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.status),movie.status))", "score": -0.2899133530084155, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(crew),oscar.id,crew.person_id),getData(movie),crew.movie_id,movie.id),oscar.number,<,42), movie.status),movie.status))", "score": -0.2929511183032054, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,42), movie.status),movie.status))", "score": -0.29564285856560607, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.status),movie.status))", "score": -0.29806775097260335, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.status),movie.status))", "score": -0.30065148051086316, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(crew),oscar.id,crew.person_id),getData(movie),crew.movie_id,movie.id),oscar.category,<,Camera), movie.status),movie.status))", "score": -0.30418102697863725, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id),oscar.number,<,42), movie.status),movie.status))", "score": -0.30735612671459644, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42), movie.status),movie.status))", "score": -0.31995849551255173, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,<,Camera), movie.status),movie.status))", "score": -0.3201239258303625, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,=,42), movie.status),movie.status))", "score": -0.3210366247367791, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.status),movie.status))", "score": -0.33050773858590615, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 114, "beams": [{"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.12485991574907819, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.13200756137223182, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.16910872966596527, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.year),oscar.year)", "score": -0.2775955778327001, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.number)", "score": -0.2970795843808594, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.year),oscar.year)", "score": -0.3214631341297583, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.year),oscar.year)", "score": -0.33485098780113, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.number)", "score": -0.34755031515657847, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.id),oscar.number)", "score": -0.35445308975481, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(oscar),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.4317105036361509, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.44622422748857227, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.4492183508631183, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.year),oscar.number)", "score": -0.4498152464644814, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.4575409096317379, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.4583032509815497, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 115, "beams": [{"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.2178821951397599, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.236115213836042, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_count),movie.vote_average)", "score": -0.24084498700145185, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.259078005697734, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.26106295497663834, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "score": -0.2635081937049997, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.2798048728073329, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.2801914582504665, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.2874528423725093, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.298933376081161, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_count)", "score": -0.3041823662213457, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),movie.id,cast.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.3047938364738268, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.3052317404535169, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.vote_count),movie.vote_average)", "score": -0.31275135097532775, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "score": -0.3205535821849951, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 116, "beams": [{"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))", "score": -0.03155982702810434, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.title),movie.title))", "score": -0.2538425210673857, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,!=,no), movie.title),movie.title))", "score": -0.3686184438302007, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,!=,no), movie.title),movie.title))", "score": -0.5165763926115144, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,!=,no), movie.title),movie.title))", "score": -0.526346779188525, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,no), movie.title),movie.title))", "score": -0.5328371974064794, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,no), movie.title),movie.title))", "score": -0.5920864742949319, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),person.name,!=,no), movie.title),movie.title))", "score": -0.5923619942922921, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.iso_639_1,!=,no), movie.title),movie.title))", "score": -0.597934722734124, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(language),movie.original_language,!=,no), movie.title),movie.title))", "score": -0.6077421586851415, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,!=,no), movie.title),movie.title))", "score": -0.6291695090367284, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),spoken_language.movie_id,!=,no), movie.title),movie.title))", "score": -0.6313236805035558, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.original_language),movie.title))", "score": -0.6543341536547077, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,!=,no), movie.title),movie.title))", "score": -0.6756132694317785, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.title),movie.title))", "score": -0.7299137500122015, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 117, "beams": [{"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.10223382878757548, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.13619696516252588, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.3701752515480621, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.5646249147102935, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.sub_category,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6232504339859588, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6364865476384356, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6375588545835069, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6454086758737269, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6464809828187982, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),movie.original_language,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6472190890090477, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6552534434228217, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.category,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6602481694862945, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.release_date),movie.popularity))", "score": -0.6687362946540816, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.release_date))", "score": -0.6756345162139041, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.tagline,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6899044008896453, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 118, "beams": [{"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "score": -0.02139981311484007, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "score": -0.5113790068789967, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_count,>=,262),movie.status), movie.status))", "score": -0.5889606266791816, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>=,262), movie.status),movie.status))", "score": -0.7155956980932388, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.popularity),movie.status))", "score": -0.7602502165755141, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,262), movie.status),movie.status))", "score": -0.7693959117677878, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.number,>=,262), movie.status),movie.status))", "score": -0.7708579656828078, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.popularity))", "score": -0.7783757022043574, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,262), movie.status),movie.status))", "score": -0.784056508615322, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,262), movie.status),movie.status))", "score": -0.800681566928688, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,262), movie.status),movie.status))", "score": -0.8198784232881735, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(oscar),movie.vote_count,>=,262), movie.status),movie.status))", "score": -0.840148965267872, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), oscar.sub_category),movie.status))", "score": -0.8564359603842604, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),country.name))", "score": -0.8642838767191279, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), country.name),movie.status))", "score": -0.8771729527434218, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 119, "beams": [{"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.12705847820558444, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),movie.id,language.iso_639_1), language.name),language.name))", "score": -0.24808544920097148, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,production_country.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.24959892516485105, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.28047276229068185, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1489),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.2994084631258059, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_count,>,1489), language.name),language.name))", "score": -0.30812185689460136, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.3118829633207804, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,1489), language.name),language.name))", "score": -0.3165464556100688, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),keyword.name))", "score": -0.3329231240342173, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),cast.person_id,language.iso_639_1), language.name),language.name))", "score": -0.33817851256376175, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),has_genre.genre_id,language.iso_639_1), language.name),language.name))", "score": -0.3437717614220795, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,cast.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.35414320830873985, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(production_country),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.360049662649577, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,has_genre.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3617995210082641, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,production_country.movie_id),getData(language),movie.id,language.iso_639_1), language.name),language.name))", "score": -0.3706258961602381, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 120, "beams": [{"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.14923612522738872, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,cinematography),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.22124554713782735, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.2397740165296659, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.24525394716910234, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,>=,cinematography),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.25973421428197846, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.2652733053322076, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.2741040199857468, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.2803651880220274, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.28657443456187665, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.29409242316336665, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.30371575927823186, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.31049837850371487, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.32430319229719134, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,cinematography), person.birth_place),person.birth_place))", "score": -0.3356598160080897, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),oscar.id,oscar.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.34273950334726117, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 121, "beams": [{"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)), movie.id),movie.runtime)", "score": -0.20659635069780705, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.20754009767724607, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)),oscar.year),movie.runtime))", "score": -0.24090496506935655, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,!=,documentary (feature)),oscar.year),movie.runtime))", "score": -0.30809810738717913, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,!=,documentary (feature)), movie.id),movie.runtime)", "score": -0.3356622927016225, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,>,documentary (feature)),oscar.year),movie.runtime))", "score": -0.33698887365030333, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.year,!=,documentary (feature)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year),movie.runtime))", "score": -0.3844234067663592, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,>,documentary (feature)), movie.id),movie.runtime)", "score": -0.40085935305223236, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,>,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.40180310003167136, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,!=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.4129053783366529, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)), oscar.year),movie.runtime))", "score": -0.41830847822221195, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,!=,documentary (feature)), oscar.year),movie.runtime))", "score": -0.42047732183589176, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)), oscar.id),movie.runtime)", "score": -0.42267201169527036, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,>,documentary (feature)),oscar.year),movie.runtime))", "score": -0.4310099752138824, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)),oscar.number),movie.runtime))", "score": -0.4471131346091948, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 122, "beams": [{"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.058171679732560246, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,197),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.15902325647576848, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.25113221482620834, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),person.name))", "score": -0.3097379993380388, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.3357650094487094, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3429001738426159, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.36307159733042627, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),oscar.number))", "score": -0.36500444269320415, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),language.name))", "score": -0.36672681091493126, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,197),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.36800079565908483, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,197),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3692840316467027, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),production_company.company_id,keyword.id), keyword.name),keyword.name))", "score": -0.3802844882762144, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,oscar.id), keyword.name),keyword.name))", "score": -0.3823387704689799, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),person.death_place))", "score": -0.38318365331958615, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(company),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.39329267937654655, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 123, "beams": [{"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.status))", "score": -0.10564113114378415, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,nb), movie.title),movie.status))", "score": -0.26507199268164766, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,nb), movie.title),movie.status))", "score": -0.2903500314025961, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))", "score": -0.29938144687912427, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,nb), movie.title),movie.title))", "score": -0.3770499583977135, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,nb), movie.release_date),movie.status))", "score": -0.39551619790667725, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.original_language),movie.status))", "score": -0.40120007735094987, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,nb), movie.title),movie.title))", "score": -0.4023279971186619, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,nb), movie.release_date),movie.status))", "score": -0.42079423662762566, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.original_language,!=,nb), movie.title),movie.status))", "score": -0.4258782008229904, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.original_language))", "score": -0.43474150900146924, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,nb), movie.original_language),movie.status))", "score": -0.43804309534033886, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,nb), movie.status),movie.status))", "score": -0.4382814192447589, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.original_language,!=,nb), movie.title),movie.status))", "score": -0.4511562395439388, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,nb), movie.original_language),movie.status))", "score": -0.4633211163407204, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 124, "beams": [{"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.07148561544839972, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(cast),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.18723609050397746, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(movie),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.26906841035039003, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.28269067696300215, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.2877628464597828, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(has_keyword),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.29480544276539083, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),movie.id,language.iso_639_1), language.name),language.name))", "score": -0.31068753741030786, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.31202059632170376, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,cast.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3196242308440666, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(oscar_winner),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3205698002945723, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,oscar_winner.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3294213297912801, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,>,122), language.name),language.name))", "score": -0.34148548010498925, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,has_keyword.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3552072000886946, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,movie.vote_average),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.37432480278221464, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),cast.person_id,language.iso_639_1), language.name),language.name))", "score": -0.3835163910655284, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 125, "beams": [{"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))", "score": -0.011048092779674334, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))", "score": -0.5793896356699406, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.release_date))", "score": -0.6321142272026918, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.release_date),movie.budget))", "score": -0.692143582895369, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.title))", "score": -0.7100492671997927, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.original_language))", "score": -0.7538111762078188, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.revenue))", "score": -0.7767750577004335, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.revenue),movie.budget))", "score": -0.7931159373074479, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2014-01-07), movie.budget),movie.budget))", "score": -0.7993076247330464, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),genre.name))", "score": -0.80577432670907, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2014-01-07), movie.budget),movie.budget))", "score": -0.8059282702561177, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.title),movie.budget))", "score": -0.8543176289349503, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,2014-01-07), movie.budget),movie.budget))", "score": -0.9224736555879645, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,=,2014-01-07), movie.budget),movie.budget))", "score": -0.933440194970899, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,2014-01-07), movie.budget),movie.budget))", "score": -0.9550322755640082, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 126, "beams": [{"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)", "score": -0.05747700003603775, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,<,151), movie.id),movie.revenue)", "score": -0.33363726968134017, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,>,151), movie.id),movie.revenue)", "score": -0.684180808203279, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,151), movie.revenue),movie.revenue))", "score": -0.7300196264804981, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,!=,151), movie.id),movie.revenue)", "score": -0.7545539005827007, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.revenue),movie.revenue)", "score": -0.8029151930800799, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.budget)", "score": -0.8037866728290791, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,>,151), movie.id),movie.revenue)", "score": -0.8254294961994342, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.popularity)", "score": -0.8309113061648147, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,151), movie.revenue),movie.revenue))", "score": -0.8398179233008705, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.vote_average)", "score": -0.8532423504622935, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,151), movie.vote_average),movie.revenue))", "score": -0.8614202707940422, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>,151), movie.id),movie.revenue)", "score": -0.8630252278382667, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.vote_count)", "score": -0.8654929880707325, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),cast.person_id)", "score": -0.8995322686485676, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 127, "beams": [{"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.09010678755898632, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.1022666278794904, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.revenue,<,25035950),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.2582420675858813, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.26652136094910706, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3395261131806787, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.3656373502945247, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,!=,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.37654544018438174, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),has_genre.genre_id,language.iso_639_1), language.name),language.name))", "score": -0.3794829979024071, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,>,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3825574315354433, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(has_genre),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3902691514637967, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.3924949604788693, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.39679414025456344, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.4069181606799713, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(cast),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.40924581425135864, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(genre),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.4170107581793207, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 128, "beams": [{"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.status))", "score": -0.015946208743116586, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,85), movie.status),movie.status))", "score": -0.5814694884575147, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), country.name),movie.status))", "score": -0.6770018730421725, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),country.name))", "score": -0.6881875982617203, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.popularity),movie.status))", "score": -0.7118788752813998, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,>,85), movie.status),movie.status))", "score": -0.7413764692137192, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.original_language),movie.status))", "score": -0.7512050066252414, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), production_country.movie_id),movie.status))", "score": -0.7550353203077975, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), person.birth_place),movie.status))", "score": -0.7618583235998813, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),production_country.movie_id))", "score": -0.7873417129849258, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))", "score": -0.7914246443069715, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.release_date),movie.status))", "score": -0.7990771327276889, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.title))", "score": -0.8040804853771988, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),production_country.iso_3166_1))", "score": -0.8063179841374222, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.popularity))", "score": -0.8148615351055923, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 129, "beams": [{"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.1780479224999041, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.20118474524941557, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.21562877048034723, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.237507503861266, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.2387655932298587, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.24201424274013125, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.2606443266107775, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.27508835184170916, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.27959509072057437, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.2880546944388557, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.29822517459122067, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.3014738241014932, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.31119152272604433, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.3112736043919878, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,1886-10-12),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.38380476037531425, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 130, "beams": [{"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.026286649757375657, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.runtime),movie.runtime)", "score": -0.3300025212227661, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "score": -0.35552702546007153, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(country),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.37307987191415304, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),production_company.movie_id,production_company.company_id), movie.id),movie.runtime)", "score": -0.3741507245747702, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(genre),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.3765200731947909, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.release_date),movie.runtime)", "score": -0.39494390608508784, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(production_company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.3975587855674428, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),country.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.4024216743835852, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id), movie.id),movie.runtime)", "score": -0.406090438535138, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),oscar_nominee.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.40975434055185, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.runtime)", "score": -0.41208419067085544, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,company.name), movie.id),movie.runtime)", "score": -0.4172491704152489, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_company.company_id), movie.id),movie.runtime)", "score": -0.41826434458557304, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),person.death_place,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.42222048537709583, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 131, "beams": [{"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))", "score": -0.018342769231821876, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,132), movie.vote_count),movie.vote_count))", "score": -0.38012220104428707, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))", "score": -0.5508020214474527, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,132), movie.vote_count),movie.vote_count))", "score": -0.5991597934553283, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.title))", "score": -0.6908684928130242, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,132), movie.vote_count),movie.vote_count))", "score": -0.7465686961004394, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), oscar.number),movie.vote_count))", "score": -0.7691923491584021, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),oscar.number))", "score": -0.7834141809653374, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.title),movie.vote_count))", "score": -0.8079198114501196, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.runtime))", "score": -0.8200000483702752, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.runtime),movie.vote_count))", "score": -0.8468141071425634, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,<,132), movie.vote_count),movie.vote_count))", "score": -0.8508091225958196, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<=,132), movie.vote_count),movie.vote_count))", "score": -0.8871886235938291, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,132), movie.vote_count),movie.vote_count))", "score": -0.937906752275012, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_average))", "score": -0.9457051117133233, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 132, "beams": [{"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.22041311546527803, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.224605291137593, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.23853159814897223, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.2427237738212872, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar.number), oscar.id),oscar.number)", "score": -0.2817082209895171, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.284465903442131, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.28865807911444596, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar.number), oscar.id),oscar.number)", "score": -0.2998267036732113, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,>,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.3025843861258252, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,>,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.3067765617981402, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.oscar_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.3105988874716358, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.3147375841562657, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.oscar_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.3147910631439508, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,6.2),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.31719187906042634, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(movie),movie.vote_average,>,6.2),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.3203782270673794, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 133, "beams": [{"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),movie.popularity))", "score": -0.05460782257250685, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,26500000), movie.popularity),movie.popularity))", "score": -0.32934014779857534, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,26500000), movie.popularity),movie.popularity))", "score": -0.36868821365169424, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))", "score": -0.36883394700817007, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),movie.release_date))", "score": -0.4258852200709953, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,26500000), movie.popularity),movie.popularity))", "score": -0.4310945449524297, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,26500000), movie.popularity),movie.popularity))", "score": -0.6097802398853673, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),movie.status))", "score": -0.6718397336208, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.status),movie.popularity))", "score": -0.6865967288740649, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,null,26500000), movie.popularity),movie.popularity))", "score": -0.6979184625797643, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,26500000), movie.popularity),movie.release_date))", "score": -0.7006175452970638, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),movie.revenue))", "score": -0.7076615886890067, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.release_date),movie.popularity))", "score": -0.7112684026487841, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),movie.original_language))", "score": -0.725578268071331, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),person.gender))", "score": -0.7274945574008598, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 134, "beams": [{"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.02985201238122717, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,19), movie.title),movie.title))", "score": -0.22105642212694562, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,<,19), movie.title),movie.title))", "score": -0.25342486613549936, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<=,19), movie.title),movie.title))", "score": -0.3412001291850949, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.360198339559035, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19), movie.title),movie.title))", "score": -0.38586634575406087, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,!=,19), movie.title),movie.title))", "score": -0.390159681011201, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.3918728508742807, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar_nominee),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.39558378567390984, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.40088977942255477, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),keyword.name,<,19), movie.title),movie.title))", "score": -0.4025829890181723, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.41107382018899774, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.41368418490959546, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.41860031996923497, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar_nominee.movie_id,<,19), movie.title),movie.title))", "score": -0.418809534935219, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 135, "beams": [{"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.09220852884124185, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>=,2000-01-01), company.name),company.name))", "score": -0.15468916561172247, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.17177450557817023, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,2000-01-01), company.name),company.name))", "score": -0.23425514234865083, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.34098469894658145, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,!=,2000-01-01), company.name),company.name))", "score": -0.3661073750890702, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>,2000-01-01), company.name),company.name))", "score": -0.37913140034659115, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01),production_company.movie_id,movie.id),person.id,production_company.company_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.38474098018393543, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>,2000-01-01), company.name),company.name))", "score": -0.3945784894073795, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01),production_company.movie_id,movie.id),person.id,production_company.movie_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.40148275489041124, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>=,2000-01-01), company.name),company.name))", "score": -0.40346533571706206, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01),production_company.movie_id,company.id),person.id,production_company.company_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.41688132720027876, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.4170782018458104, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.4205506756835098, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,>,2000-01-01), company.name),company.name))", "score": -0.42171050322797915, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 136, "beams": [{"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))", "score": -0.23741701443310548, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))", "score": -0.2680813568018137, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.name),person.name))", "score": -0.2744511873544081, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,spoken_language.movie_id), person.name),person.name))", "score": -0.3025938576101877, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.name),person.name))", "score": -0.3051155297231163, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,spoken_language.movie_id), person.name),person.name))", "score": -0.33325819997889594, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(person),cast.person_id,person.id),movie.status,!=,Rumored), person.name),person.name))", "score": -0.33804576657050356, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))", "score": -0.35031875108730254, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,spoken_language.movie_id),getData(person),cast.person_id,person.id),movie.status,!=,Rumored), person.name),person.name))", "score": -0.350936950013483, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Rumored),getData(spoken_language),movie.id,spoken_language.movie_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.36038299674818897, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Rumored),getData(spoken_language),movie.id,spoken_language.movie_id),getData(person),cast.person_id,person.id), country.name),person.name))", "score": -0.36724758109886724, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.name))", "score": -0.3855526650350097, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.name),person.name))", "score": -0.3873529420752769, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), language.name),person.name))", "score": -0.3927887702774183, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))", "score": -0.40180853219119045, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 137, "beams": [{"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.12010897982825018, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.13947103829611, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,!=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.17610040701698174, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,!=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.19546246548484156, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.24296746887726817, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.28774022666013277, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,!=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.29895889606599974, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.3071022851279926, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),keyword.name))", "score": -0.36042558857853874, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,!=,16.4734), language.name),language.name))", "score": -0.38014228533209066, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),language.name))", "score": -0.38124739978907346, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,<,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3932649267493628, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),oscar.category))", "score": -0.3940870813115993, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.original_language))", "score": -0.4006094582569333, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.4105987157091508, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 138, "beams": [{"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.death_place))", "score": -0.05490933146211319, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))", "score": -0.3154865854594391, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.name))", "score": -0.4320670317101758, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.name),person.death_place))", "score": -0.4921067298564594, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,f), person.death_place),person.death_place))", "score": -0.5262905088893604, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,<,f), person.death_place),person.death_place))", "score": -0.5643464976164978, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_day),person.death_place))", "score": -0.5892050803813618, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.death_day))", "score": -0.6055123458791059, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.birth_place))", "score": -0.6334221611905377, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.gender))", "score": -0.6468351136136334, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.death_place))", "score": -0.6515532673511188, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),keyword.name))", "score": -0.6826884399342816, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),genre.name))", "score": -0.6879818092274945, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.name))", "score": -0.6926442857075017, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.gender),person.death_place))", "score": -0.6954330743465107, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 139, "beams": [{"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.04011950972259213, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.24071321611667854, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,0.217538),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.28060087741331197, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.year),oscar.sub_category))", "score": -0.28223532805665424, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.32962873639221324, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.number))", "score": -0.331985996595164, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.year))", "score": -0.34394075176976846, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.number),oscar.sub_category))", "score": -0.3453058736394027, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.36509162670890705, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.category))", "score": -0.36666280693010195, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,has_keyword.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.3730961839894159, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.3749425309203918, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.category),oscar.sub_category))", "score": -0.3890277220617441, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.39204716019224806, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,!=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.4026633377989193, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 140, "beams": [{"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.15969819467142962, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_place),person.death_place))", "score": -0.23134138584610825, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_place),person.death_place))", "score": -0.23736106242663305, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.25162504432041577, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_day),person.death_place))", "score": -0.25481745112861226, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_day),person.death_place))", "score": -0.2608371277091371, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_place),person.death_place))", "score": -0.3246944753231295, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_place),person.death_place))", "score": -0.32484410779014733, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_day),person.death_place))", "score": -0.34817054060563357, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_day),person.death_place))", "score": -0.3483201730726514, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_place),person.death_place))", "score": -0.3507264311332722, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.3572548583824351, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ro),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.3610562433857326, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_day),person.death_place))", "score": -0.3742024964157762, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.3826834599001643, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 141, "beams": [{"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,germany), movie.id),movie.vote_average)", "score": -0.07049209704481774, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,germany), movie.id),movie.vote_average)", "score": -0.12227234378925271, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.25035853598884483, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,germany), movie.vote_average),movie.vote_average)", "score": -0.27104977392890944, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.297034191133993, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.vote_average)", "score": -0.3126688548666067, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "score": -0.3731133817355748, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,germany),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.3779686792769488, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.38570936600545597, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.4055286120852431, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,germany), movie.vote_average),movie.vote_average)", "score": -0.40590831093870705, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.41084182178857187, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(merge(getData(has_keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,germany), movie.id),movie.vote_average)", "score": -0.41151728657893893, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,germany),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.41637329072706125, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.4268941495057059, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 142, "beams": [{"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.12509410422606945, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.13092507448953214, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,>=,5.93923), movie.original_language),language.name))", "score": -0.25422713669230823, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,>=,5.93923), language.name),language.name))", "score": -0.2557870427565721, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.popularity,>=,5.93923), movie.original_language),language.name))", "score": -0.27127567939754493, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.popularity,>=,5.93923), language.name),language.name))", "score": -0.27931152676908133, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.3394221958133976, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.33953362606075616, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.34525316607686024, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,<=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.35480233989499294, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),movie.id,language.iso_639_1), language.name),language.name))", "score": -0.3636063184654591, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,!=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.36404132958726493, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),movie.id,language.iso_639_1), language.name),language.name))", "score": -0.3694372887289218, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,5.93923),getData(spoken_language),movie.id,production_country.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.38751162904030945, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>=,5.93923),getData(spoken_language),movie.id,production_country.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.39334259930377213, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 143, "beams": [{"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.17394016346368518, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,!=,sound editing), movie.id),movie.popularity)", "score": -0.2178043656696168, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.21849723331013193, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.popularity)", "score": -0.24746266537056014, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)", "score": -0.25025666709793976, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.popularity),movie.popularity)", "score": -0.26451275609409425, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,!=,sound editing), movie.id),movie.popularity)", "score": -0.2655315298063283, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)", "score": -0.28097374030038413, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,!=,sound editing), movie.id),movie.popularity)", "score": -0.2891931533852148, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.popularity),movie.popularity)", "score": -0.2952298292965387, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.3072498890007983, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.35180695884724505, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.popularity)", "score": -0.3807723909076733, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,sound editing), movie.id),movie.popularity)", "score": -0.3850153687752839, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.number,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)", "score": -0.3979090963653482, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 144, "beams": [{"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.status),movie.status))", "score": -0.12004402158159101, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.status))", "score": -0.13245890456653034, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.status),movie.title))", "score": -0.15218927615740435, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.16460415914234366, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))", "score": -0.2786163774416116, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand),getData(movie),production_country.movie_id,movie.id), movie.status),movie.status))", "score": -0.30726426911135934, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.status),movie.release_date))", "score": -0.31652175971578295, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.release_date))", "score": -0.3289366427007223, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), country.name),movie.status))", "score": -0.3460842771050837, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.title),movie.status))", "score": -0.3508769795861712, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), country.name),movie.title))", "score": -0.37822953168089707, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.title))", "score": -0.38468205764279034, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), oscar.sub_category),movie.status))", "score": -0.38844929715999027, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.status),movie.runtime))", "score": -0.3919044311460809, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.runtime))", "score": -0.40431931413102024, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 145, "beams": [{"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.3212655717373327, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),person.id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.3534840639189816, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.3675174823773934, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,cast.person_id),getData(company),production_company.company_id,company.id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.3721437984348983, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(production_company),spoken_language.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.37254792265005177, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.37716431849350035, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.3800037604513819, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.39202574289486714, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.3920752329772084, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.39351306940757425, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,cast.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),cast.movie_id,movie.id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.39398845872177374, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.3949658618367938, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.398055966579584, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,cast.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),cast.movie_id,company.id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.40763214782483814, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,cast.person_id),getData(company),production_company.company_id,company.id),language.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.4386266916949247, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 146, "beams": [{"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.12806090197409503, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.21831080174888484, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.original_language,=,Sense and Sensibility),movie.original_language), movie.original_language))", "score": -0.31404854963329853, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))", "score": -0.37333830307034077, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Sense and Sensibility), movie.id))", "score": -0.6666631657605671, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.6683452562137973, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,Sense and Sensibility), movie.id))", "score": -0.6879581914317269, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Sense and Sensibility), movie.original_language))", "score": -0.6982448032374918, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sense and Sensibility), movie.title),movie.original_language))", "score": -0.7116160432051402, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,Sense and Sensibility), movie.original_language))", "score": -0.7195398289086515, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),keyword.name,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.7243947819515597, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.tagline,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.7271089390560519, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sense and Sensibility), movie.original_language),language.name))", "score": -0.7418049019470345, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.7501544193073642, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.original_language,=,Sense and Sensibility),movie.original_language), language.name))", "score": -0.766251899774943, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 147, "beams": [{"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))", "score": -0.09234224232204724, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,<,2.2),movie.revenue), movie.revenue))", "score": -0.20798184203158598, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_count,<,2.2),movie.revenue), movie.revenue))", "score": -0.48279185632418375, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count,<,2.2), movie.revenue),movie.revenue))", "score": -0.565235869114285, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average,<,2.2), movie.revenue),movie.revenue))", "score": -0.5714625662177771, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,2.2), movie.revenue),movie.revenue))", "score": -0.5889272738277214, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.revenue,<,2.2), movie.revenue),movie.revenue))", "score": -0.6094818653250782, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.person_id,movie.id),movie.id,cast.movie_id),movie.vote_average,<,2.2), movie.revenue),movie.revenue))", "score": -0.6189834958788647, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.vote_average,<,2.2), movie.revenue),movie.revenue))", "score": -0.6290539522912864, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,2.2), movie.revenue),movie.revenue))", "score": -0.7043933762033703, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.budget),movie.revenue))", "score": -0.728069094431703, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,<=,2.2),movie.revenue), movie.revenue))", "score": -0.7590018426271854, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,2.2), movie.revenue),movie.revenue))", "score": -0.7642316866695182, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(distinct(extractValues(merge(filter(getData(movie),movie.vote_average,<,2.2),merge(getData(cast),getData(cast),cast.person_id,movie.id),movie.id,cast.movie_id),movie.revenue), movie.revenue))", "score": -0.7754116726688839, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(distinct(extractValues(merge(filter(getData(movie),movie.vote_average,<,2.2),merge(getData(cast),getData(person),cast.person_id,movie.id),movie.id,cast.movie_id),movie.revenue), movie.revenue))", "score": -0.8018783549642263, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 148, "beams": [{"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,assistant director), movie.original_language),movie.original_language))", "score": -0.2652848139528063, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.26626141309642765, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.28339341839178, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.28414438014543275, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.original_language),movie.original_language))", "score": -0.30875693626636885, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.original_language),movie.original_language))", "score": -0.32663990331537396, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.3300473953696639, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,assistant director), language.name),movie.original_language))", "score": -0.33433906336524505, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,assistant director), movie.original_language),movie.original_language))", "score": -0.3372200180092821, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),language.name,=,assistant director), movie.original_language),movie.original_language))", "score": -0.37362302420840043, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),person.name,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.41331466046026155, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,assistant director),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.41378023734492236, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar_winner.oscar_id,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.4178393978974338, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,assistant director), movie.original_language),movie.original_language))", "score": -0.4208181548919739, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),language.name,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.4298212655394159, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 149, "beams": [{"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.1377350637766315, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.title))", "score": -0.14567401951842648, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili), movie.title),movie.title))", "score": -0.20488689425383524, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),movie.original_language,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.2976203750342893, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili), movie.title),movie.original_language))", "score": -0.30233912963507287, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),movie.original_language,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.title))", "score": -0.30555933077608427, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.status))", "score": -0.3128429356519998, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.original_language))", "score": -0.3155166147879126, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili), movie.original_language),movie.title))", "score": -0.318359866672915, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.status))", "score": -0.32078189139379476, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.3234555705297076, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.3272462102242429, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili), oscar.category),movie.title))", "score": -0.33319407220643216, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.title))", "score": -0.33518516596603787, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili), movie.status),movie.title))", "score": -0.33794966986674746, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 150, "beams": [{"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.05189247505346324, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.2090395534558656, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.27553195647802714, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.330815162935725, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.status,=,Sweden), movie.title),movie.title))", "score": -0.3325566245145337, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_company),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.33481862303940163, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.34422125026111416, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.34493391885444313, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.35308672639775057, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),company.name,=,Sweden), movie.title),movie.title))", "score": -0.36446558862098033, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.iso_3166_1,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.3681499697048573, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),oscar.sub_category,=,Sweden), movie.title),movie.title))", "score": -0.37466505076053236, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),person.birth_place,=,Sweden), movie.title),movie.title))", "score": -0.37466551149527216, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Sweden), movie.title),movie.title))", "score": -0.37723922902030194, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.3831977174837336, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 151, "beams": [{"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)", "score": -0.11899953560896868, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.17631305790116752, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,!=,Italy), movie.id),movie.revenue)", "score": -0.22286271217964213, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.3100390230823039, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(merge(filter(getData(country),country.name,=,Italy),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.32086245470066443, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3523866851972212, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.3675838414123871, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),getData(movie),production_country.movie_id,movie.id), movie.title),movie.revenue)", "score": -0.3681609065654199, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.revenue),movie.revenue))", "score": -0.37014247315697624, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.revenue)", "score": -0.38896981987816387, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),getData(movie),production_country.movie_id,movie.id), movie.release_date),movie.revenue)", "score": -0.3921197830399772, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),merge(getData(movie),getData(movie),movie.id,movie.id),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.4020453801035457, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4330740842420935, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Italy),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.4360745782276205, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.popularity),movie.revenue)", "score": -0.4406712704740318, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 152, "beams": [{"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.0873498239525361, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "score": -0.2616044145507418, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(company),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.37670579859695863, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.3889310637660687, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.4049127022570114, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.release_date),movie.popularity))", "score": -0.4140232068457408, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(oscar),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.41785168954811525, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.popularity))", "score": -0.4509121012018001, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(genre),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.4519099325843854, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(country),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.46466639944992494, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.popularity),movie.release_date))", "score": -0.47111273677728605, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.revenue),movie.popularity))", "score": -0.49101668574121726, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.release_date))", "score": -0.49938621415657397, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), person.gender),movie.popularity))", "score": -0.5262396162600442, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.popularity))", "score": -0.5445594672732709, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 153, "beams": [{"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.sub_category),oscar.number))", "score": -0.14071590420106653, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.number),oscar.number))", "score": -0.14942301107742903, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.category),oscar.number))", "score": -0.21242348953860138, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), keyword.name),oscar.number))", "score": -0.23125882187552355, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.24572228924959014, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.2544590160535486, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.sub_category),oscar.number))", "score": -0.2965843129206245, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.number),oscar.number))", "score": -0.305291419796987, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,>,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3344658605596477, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.sub_category),keyword.name))", "score": -0.3558471694083959, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.sub_category),oscar.category))", "score": -0.3562913176975165, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.number),keyword.name))", "score": -0.3645542762847584, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.number),oscar.category))", "score": -0.36499842457387904, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.36812065491841495, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.category),oscar.number))", "score": -0.36829189825815933, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 154, "beams": [{"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.17367818564366813, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,>=,550000), person.gender),person.gender))", "score": -0.18453532890364877, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.budget,<=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.26386786001657286, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.budget,>=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.2830951668634805, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<=,550000),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.286658431002589, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.budget,<=,550000),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.gender),person.gender))", "score": -0.294999306174098, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.32427266901315466, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id),movie.budget,>=,550000), person.gender),person.gender))", "score": -0.3351298122731353, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,oscar_winner.movie_id),movie.budget,<=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3383695490326232, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.person_id),movie.budget,<=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3570227493828081, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,oscar_winner.movie_id),movie.budget,>=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3575968558795308, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,crew.movie_id),movie.budget,<=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.37558399826504646, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.person_id),movie.budget,>=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.37625003241770394, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<,550000),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3899243546644069, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000),person.gender), person.gender))", "score": -0.40023140097878235, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 155, "beams": [{"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),movie.budget),movie.vote_average))", "score": -0.16121047791915397, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,tape recorder),movie.budget),movie.vote_average))", "score": -0.18825996133160255, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,tape recorder),movie.budget),movie.vote_average))", "score": -0.19794212468181493, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,tape recorder),movie.budget),movie.vote_average))", "score": -0.2215073693576052, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(keyword),keyword.name,=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.budget),movie.vote_average))", "score": -0.22171666476483945, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(keyword),keyword.name,!=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.budget),movie.vote_average))", "score": -0.24936468311579493, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),movie.budget),movie.vote_average))", "score": -0.29132409874563675, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.budget),movie.vote_average))", "score": -0.298940043353112, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))", "score": -0.32448668747479514, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))", "score": -0.37687918742666643, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "avg(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,tape recorder), movie.id),movie.vote_average)", "score": -0.41145373039105976, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),movie.revenue),movie.vote_average))", "score": -0.4150198931885132, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))", "score": -0.4336613694260294, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,tape recorder),movie.revenue),movie.vote_average))", "score": -0.4370767018442391, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),movie.budget),movie.vote_count))", "score": -0.438682087276245, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 156, "beams": [{"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.010837119436473586, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.5255990582127952, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.530531188160703, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6291366360887685, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.title),movie.original_language))", "score": -0.6371266819915036, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6633712915599216, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),language.name))", "score": -0.6641967772884527, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,cast.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6683034165239201, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.6854344318053551, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.690366561753263, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,48000000), movie.original_language),movie.original_language))", "score": -0.696323832453345, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.7036196567496518, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.title))", "score": -0.7207605719013372, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,48000000), movie.original_language),movie.original_language))", "score": -0.7612416368356207, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,48000000), movie.original_language),movie.original_language))", "score": -0.767144463621662, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 157, "beams": [{"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),movie.vote_average))", "score": -0.1843150550048449, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),movie.vote_average))", "score": -0.3144373535797058, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), oscar.year),movie.vote_average))", "score": -0.4115811133306124, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),oscar.year))", "score": -0.42020877390314126, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),movie.runtime))", "score": -0.44486971884180093, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),oscar.sub_category))", "score": -0.458804033092747, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),movie.vote_count))", "score": -0.5212226727526286, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),movie.vote_average))", "score": -0.5945723073455156, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), oscar.year),movie.vote_average))", "score": -0.616790754316753, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),oscar.number))", "score": -0.6230024316828349, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), person.name),movie.vote_average))", "score": -0.6351635301034548, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.runtime),movie.vote_average))", "score": -0.6439753019731143, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), oscar.year),oscar.year))", "score": -0.6474748322289088, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),movie.runtime))", "score": -0.6637392915472446, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),oscar.year))", "score": -0.6698215879187046, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 158, "beams": [{"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,=,special effects), movie.popularity),movie.popularity))", "score": -0.2592534294751645, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,special effects), movie.popularity),movie.popularity))", "score": -0.287191817035565, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,=,special effects),movie.runtime),movie.popularity))", "score": -0.2983457482303729, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.31257071976812256, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,special effects),movie.runtime),movie.popularity))", "score": -0.3128672655004174, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,special effects), movie.popularity),movie.popularity))", "score": -0.3329229894648768, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))", "score": -0.34185999454061117, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,special effects), movie.popularity),movie.popularity))", "score": -0.3608613770252773, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,=,special effects), movie.popularity),movie.popularity))", "score": -0.3673792307959067, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.runtime),movie.popularity))", "score": -0.37210093973934355, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,special effects),movie.runtime),movie.popularity))", "score": -0.3761316607947746, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special effects),movie.runtime),movie.popularity))", "score": -0.38773601003299873, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,special effects),movie.runtime),movie.popularity))", "score": -0.39065322125870094, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,special effects), movie.popularity),movie.popularity))", "score": -0.39531764507559947, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.4044015397268173, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 159, "beams": [{"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.24102029096650454, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.25760597752042047, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.26217187839280287, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2623724869162841, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2692002265513204, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2762080974279204, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2789581734702, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2857859131052364, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2896920115749702, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.29756029337769996, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),crew.person_id,person.id),person.id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.30438803301273626, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.30627768902567837, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(person),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.30986476519872586, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.31104418893903385, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),None))", "score": -0.35421037822409035, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 160, "beams": [{"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.19970721610395709, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.person_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2065078771415357, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2473501586246454, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.24824488392638255, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.person_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2550455449639612, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,=,South Paris),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.25899176318372896, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_place,=,South Paris),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.2626393222077621, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,genre.id), genre.name),genre.name))", "score": -0.2806740770252033, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.person_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2851113794444052, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.person_id,genre.id), genre.name),genre.name))", "score": -0.28747473806278195, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(genre),oscar_nominee.person_id,genre.id), genre.name),genre.name))", "score": -0.2892246710573095, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.person_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.29772962431726774, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.30300010335420813, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(filter(merge(getData(person),merge(getData(has_genre),getData(movie),oscar_nominee.movie_id,movie.id),person.id,has_genre.genre_id),movie.status,=,South Paris),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),None))", "score": -0.30672604496141137, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(filter(merge(getData(person),merge(getData(has_genre),getData(movie),oscar_nominee.movie_id,movie.id),person.id,has_genre.genre_id),person.birth_place,=,South Paris),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),None))", "score": -0.3107370407931505, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 161, "beams": [{"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.032541026870221715, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))", "score": -0.23831532397312022, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,is),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.25829730074777946, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.30029772145580164, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),company.name))", "score": -0.3486077095028134, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3562102332212167, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,is), country.name),country.name))", "score": -0.38709770106249414, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),oscar.sub_category))", "score": -0.3905138731980611, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),person.birth_place))", "score": -0.3998408809461926, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,is), country.name),country.name))", "score": -0.41376040056387536, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,!=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.4184752452271315, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.4331642923279401, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,company.id),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.4383752342838382, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))", "score": -0.4407865517566705, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,production_country.movie_id),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.4430876646431522, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 162, "beams": [{"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.314995350583095, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.3170458799855047, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),oscar_winner.oscar_id,keyword.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.3258673850540036, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id), keyword.name),movie.title))", "score": -0.3287782708054053, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),movie.title))", "score": -0.33082880020781497, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id), keyword.name),oscar.sub_category))", "score": -0.34701505881741584, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3472092733945186, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),oscar_winner.oscar_id,keyword.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.34800690224572384, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),oscar.sub_category))", "score": -0.34906558821982553, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.3492598027969283, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(oscar),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.35106583820723064, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(oscar),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.3531163676096403, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),movie.title))", "score": -0.3609921936168289, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.keyword_id), keyword.name),movie.title))", "score": -0.36304272301923857, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(has_keyword),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),movie.title))", "score": -0.43198890248018057, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 163, "beams": [{"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.1368428501267771, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.15557051229913268, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.2466967600253909, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>=,160), genre.name),genre.name))", "score": -0.2597417464984997, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.2654244221977465, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>=,160), genre.name),genre.name))", "score": -0.2784694086708553, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.year,>=,160), genre.name),genre.name))", "score": -0.2812346676965772, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.category,>=,160), genre.name),genre.name))", "score": -0.2993100712419797, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.year,>=,160), genre.name),genre.name))", "score": -0.2999623298689328, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.status,>=,160), genre.name),genre.name))", "score": -0.30962379559699016, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.category,>=,160), genre.name),genre.name))", "score": -0.3180377334143353, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.status,>=,160), genre.name),genre.name))", "score": -0.3283514577693457, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.35417755901444725, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.number,>=,160), genre.name),genre.name))", "score": -0.36664256406913376, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>=,160), genre.name),genre.name))", "score": -0.3695956655342808, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 164, "beams": [{"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.07647732357145287, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.death_place))", "score": -0.3127469764149282, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.31748083131969906, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.3790749599284027, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.5070230524549122, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Duarte, Kalifornien), person.name),person.death_place))", "score": -0.5537504841631744, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.death_place),person.name))", "score": -0.5623804129718337, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),keyword.name))", "score": -0.5650402651226614, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.586207627231488, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.5914928095552932, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Duarte, Kalifornien), person.name),person.death_place))", "score": -0.615344612771878, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.6190714662847427, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.gender))", "score": -0.6289171324169729, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Duarte, Kalifornien), person.name),person.death_place))", "score": -0.6423215699733199, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),genre.name,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.6549969305342529, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 165, "beams": [{"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,cast.person_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.29294089709664967, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,crew.person_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3134093214391886, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,movie.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.314991449641328, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,cast.person_id),getData(company),production_company.movie_id,company.id), company.name),company.name))", "score": -0.3485738327865789, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,production_company.company_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.35676108468182444, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,movie.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.36318283895219894, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,movie.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.3655554043633296, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,crew.person_id),getData(company),production_company.movie_id,company.id), company.name),company.name))", "score": -0.36904226605862217, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,production_company.company_id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.3704525419212024, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,movie.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.37314272595631914, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(company),production_company.movie_id,company.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.3790233254621872, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.3811454868514018, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.38587445344733196, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.3946524011806924, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.39872524032473305, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 166, "beams": [{"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.13982776296325028, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.37739766491765153, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.status))", "score": -0.4029281818458421, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.status))", "score": -0.42892729048617184, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.4547026412960201, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.runtime))", "score": -0.4575684468184094, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.4611398773541408, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.revenue),movie.status))", "score": -0.47014534008635567, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.4769716967440597, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.status))", "score": -0.48023315822421075, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.runtime))", "score": -0.4830989637466, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.vote_count,=,Clare Niederpruem),movie.revenue),movie.status))", "score": -0.4914641857612878, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(cast),movie.id,movie.id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.4930607895606408, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.status))", "score": -0.5025022136722503, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(cast),movie.id,cast.person_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.5071376832585984, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 167, "beams": [{"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.18687733563312825, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),oscar.year)", "score": -0.3076509639288994, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,movie.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.32206595430833507, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), movie.id),movie.runtime)", "score": -0.3478949382216856, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.36525167812045334, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.3656654872796425, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.vote_average)", "score": -0.3865539387876384, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,cast.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.3866135626762036, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.40978255136169833, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.41017254238346684, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,has_genre.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.41107650645521626, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,=,52), movie.id),movie.runtime)", "score": -0.41317619104475906, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,crew.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.41522310245884975, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.oscar_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.4180400249530706, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), oscar.id),movie.runtime)", "score": -0.42103843520070167, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 168, "beams": [{"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "score": -0.24952514962814398, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),oscar.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.27693823424101827, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(getData(oscar_winner),oscar.sub_category,=,writing (original story)),getData(person),crew.person_id,person.id),oscar.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.2929245846975589, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,person.id),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "score": -0.3017169229043213, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.3060115766270279, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_nominee.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.3091481167100448, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(merge(getData(oscar),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "score": -0.3256564633223338, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.status,=,writing (original story)),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.3399865729328187, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.category,=,writing (original story)),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.341592449742526, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(getData(oscar_nominee),oscar.sub_category,=,writing (original story)),getData(person),crew.person_id,person.id),oscar.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.34317897990791874, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),country.name,=,writing (original story)),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.346738972870856, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.birth_place,=,writing (original story)),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.34775675234622166, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,=,writing (original story)),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.353185937255084, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.358696767308106, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.status,=,writing (original story)),oscar.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.3628415284339588, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 169, "beams": [{"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,<=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.18405127974484722, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.19097397709830993, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.19996526870626466, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,>=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.23373191909486943, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.26156120352155926, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<=,1948-06-03), oscar.category),oscar.sub_category))", "score": -0.2840401639517886, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1948-06-03), oscar.category),oscar.sub_category))", "score": -0.29303145555974336, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.3096241323180457, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.3195066045265068, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,<=,1948-06-03), oscar.category),oscar.sub_category))", "score": -0.3390475120643781, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_place,<=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.3439092514903637, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,<=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.3551245750316903, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,<=,1948-06-03), oscar.sub_category),oscar.category))", "score": -0.35994031740364557, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.3647553709534568, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.36756953332299325, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 170, "beams": [{"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3822379377441296, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3964415439261826, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(person),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.43916139315945146, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.44660379011460594, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(genre),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.45040414835536124, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(person),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4533649993415044, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(has_genre),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.458181876375166, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(spoken_language),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4582085351766581, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(genre),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4646077545374142, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.id),movie.revenue)", "score": -0.4664664664274246, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.47238548255721896, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.47241214135871107, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.id),movie.revenue)", "score": -0.48067008225038177, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,has_genre.genre_id),movie.release_date,=,2013-01-14), movie.id),movie.revenue)", "score": -0.4826468291324228, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,has_genre.genre_id), movie.id),movie.revenue)", "score": -0.48966995026820265, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 171, "beams": [{"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.08140131684194785, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.2183055921896434, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.285972144007084, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.32283638112182755, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.33245471499001744, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.3371887963345253, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.3437292130419454, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.35367750165099426, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(person),person.birth_day,>,1909-11-09),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.3695890302943185, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.3902719905335349, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.40103919305614594, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.4086257013449596, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.41975970520472006, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.42134405346843484, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.movie_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.4292117038640407, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 172, "beams": [{"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,9500000), movie.id),movie.vote_count)", "score": -0.22269726206521734, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_count),movie.vote_count))", "score": -0.3709092577046249, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,9500000), movie.id),movie.vote_count)", "score": -0.48006756027029457, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,=,9500000), movie.id),movie.vote_count)", "score": -0.5424033405784559, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,=,9500000), movie.id),movie.vote_count)", "score": -0.5816999043482012, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,9500000), movie.id),movie.vote_count)", "score": -0.593001084680032, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,9500000), movie.id),movie.vote_average)", "score": -0.5947031288648293, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.budget,=,9500000),movie.vote_count),movie.vote_count))", "score": -0.6266466934903292, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,9500000),getData(movie),movie.id,movie.id),movie.budget),movie.title))", "score": -0.6343829892109369, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.budget,=,9500000),movie.budget),movie.vote_count))", "score": -0.6359347139223246, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,9500000),getData(movie),movie.id,cast.movie_id),movie.budget),movie.title))", "score": -0.6648494418105252, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,9500000),getData(movie),movie.id,movie.id),movie.budget),movie.vote_count))", "score": -0.6872151347674443, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,9500000), movie.vote_count),movie.vote_count))", "score": -0.6884313187620137, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,9500000),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget),movie.title))", "score": -0.6913176395009561, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,9500000),getData(movie),movie.id,cast.movie_id),movie.budget),movie.vote_count))", "score": -0.7176815873670326, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 173, "beams": [{"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.1628649775766428, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.title,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.1931824885795778, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,has_genre.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.23886672144220653, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2496683816071809, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "score": -0.26385421200453774, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,has_genre.movie_id),movie.title,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2691842324451415, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,production_country.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.27040414728246076, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.title,>=,200000), country.name),country.name))", "score": -0.299496088843728, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,production_country.movie_id),movie.title,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3007216582853957, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,has_genre.movie_id),movie.original_language,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3256701254727446, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.release_date,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3306229308920989, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.33695398357153883, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_company.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.34009336004854496, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3464058907326987, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,production_country.movie_id),movie.original_language,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.35720755089767303, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 174, "beams": [{"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.birth_place),person.death_place))", "score": -0.25783228462431523, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.person_id,person.id), person.name),person.death_place))", "score": -0.29079470571480487, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.birth_place),company.name))", "score": -0.29188749291306054, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), oscar.category),person.death_place))", "score": -0.31129317941666146, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.person_id,person.id), person.name),company.name))", "score": -0.31237332357447617, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.death_place),person.death_place))", "score": -0.31290826732629407, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "score": -0.3145972192809899, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "score": -0.3347623159575023, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.person_id,person.id), person.death_place),company.name))", "score": -0.3361758371406612, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), oscar.category),company.name))", "score": -0.3453483877054067, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.death_place),company.name))", "score": -0.3469634756150393, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),company.name))", "score": -0.3688175242462476, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), country.name),person.death_place))", "score": -0.3690979167765203, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_place))", "score": -0.36984009428216025, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.birth_place),person.birth_place))", "score": -0.3715727622913799, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 175, "beams": [{"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.25394987616890174, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Released),getData(production_country),country.iso_3166_1,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2753880564391903, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))", "score": -0.28470679088682826, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))", "score": -0.2883103036098276, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2937228146760779, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.29374122211926335, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),country.name,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2991587964687758, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),country.iso_3166_1,production_country.movie_id),movie.title,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3057721950752613, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.movie_id,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.31116745317828953, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released), country.name),country.name))", "score": -0.34019697411984384, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released), country.name),country.name))", "score": -0.3438004868428432, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,!=,Released), country.name),country.name))", "score": -0.3476727142425192, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,!=,Released), country.name),country.name))", "score": -0.3512762269655186, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3513815668863518, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3582886285434573, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 176, "beams": [{"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.year),oscar.year))", "score": -0.10677372010542158, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<,4524), oscar.year),oscar.year))", "score": -0.17166268824285186, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.sub_category),oscar.year))", "score": -0.22765413315215033, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), movie.vote_average),oscar.year))", "score": -0.2465356098453153, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.2736171448821509, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<,4524), oscar.sub_category),oscar.year))", "score": -0.2925431012895806, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), movie.runtime),oscar.year))", "score": -0.3060364889878692, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.year),movie.vote_average))", "score": -0.30657041631418636, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<,4524), movie.vote_average),oscar.year))", "score": -0.3114245779827456, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.year),oscar.sub_category))", "score": -0.31715384769762067, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,=,4524), oscar.year),oscar.year))", "score": -0.31933722754295746, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.35169557305966503, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.year),movie.runtime))", "score": -0.35211603004213404, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), movie.status),oscar.year))", "score": -0.3622362923229369, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_count,<,4524), oscar.year),oscar.year))", "score": -0.36976694449578246, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 177, "beams": [{"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.03143300268493476, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,13000000), movie.status),movie.status))", "score": -0.34697897884689155, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,13000000), movie.status),movie.status))", "score": -0.4536813661798078, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>,13000000), movie.status),movie.status))", "score": -0.5717059398411948, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.5739473751127312, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.6149585084143105, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.6352588664700999, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),person.id,cast.movie_id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.646763284586031, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,13000000), movie.status),movie.status))", "score": -0.6507159933789808, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>,13000000), movie.status),movie.status))", "score": -0.7386400128125388, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,13000000), movie.status),movie.status))", "score": -0.7406836772679526, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.title),movie.status))", "score": -0.7437096928588289, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.7564912217130768, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), country.name),movie.status))", "score": -0.7594674324027437, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),genre.name,>,13000000), movie.status),movie.status))", "score": -0.7826063061474997, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 178, "beams": [{"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))", "score": -0.01398936862096889, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))", "score": -0.5976829540159088, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),language.name))", "score": -0.6457140598722617, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.title),movie.original_language))", "score": -0.6874574043831672, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1061), movie.original_language),movie.original_language))", "score": -0.709422079838987, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.title))", "score": -0.7406349931188743, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_count,>=,1061),movie.original_language), movie.original_language))", "score": -0.7521730395383202, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>=,1061), movie.original_language),movie.original_language))", "score": -0.7669798071074183, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,1061), movie.original_language),movie.original_language))", "score": -0.7965370351957972, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.number,>=,1061), movie.original_language),movie.original_language))", "score": -0.8155904347586329, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1061), movie.original_language),movie.original_language))", "score": -0.817214934148069, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), language.name),movie.original_language))", "score": -0.8194169023117865, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.vote_average))", "score": -0.8323121819921653, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),spoken_language.movie_id))", "score": -0.8531865630575339, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,1061), movie.original_language),movie.original_language))", "score": -0.8551560919659096, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 179, "beams": [{"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.014221524208551273, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,182016617), movie.budget),movie.budget))", "score": -0.5049849630740937, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,182016617), movie.budget),movie.budget))", "score": -0.5186986507324036, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.5848565854823407, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,182016617), movie.budget),movie.budget))", "score": -0.6255393804458436, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.movie_id),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.6336023209480682, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.6621845717891119, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.person_id),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.6635580887281722, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,cast.movie_id),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.664603101570055, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.6672372682718923, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.title))", "score": -0.6778753512480762, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.release_date))", "score": -0.6819757931807544, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.release_date),movie.budget))", "score": -0.7338517387106549, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.title),movie.budget))", "score": -0.8019481380179059, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),genre.name))", "score": -0.8317743652442005, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 180, "beams": [{"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.gender))", "score": -0.027140180769492872, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Marylebone, London), person.gender),person.gender))", "score": -0.451775656270911, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.birth_place),person.gender))", "score": -0.553479085865547, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))", "score": -0.5824205825047102, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.birth_place))", "score": -0.6195354850060539, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.death_place),person.gender))", "score": -0.6241940364270704, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Marylebone, London), person.gender),person.gender))", "score": -0.6595575075625675, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.name),person.gender))", "score": -0.6663857802777784, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Marylebone, London), person.gender),person.gender))", "score": -0.6775143008708255, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.name))", "score": -0.7238363415963249, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.death_place))", "score": -0.7327109963662224, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),genre.name))", "score": -0.7584495932824211, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),movie.popularity))", "score": -0.7779909760720329, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))", "score": -0.7828152684523957, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), genre.name),person.gender))", "score": -0.8004436597257154, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 181, "beams": [{"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.07605602310849206, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))", "score": -0.11079738067763349, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,28169671), country.name),country.name))", "score": -0.2730093536394782, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2757073096590644, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,28169671), country.name),country.name))", "score": -0.32272744486255706, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3611237409234379, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))", "score": -0.3701456267804001, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.name), country.name),country.name))", "score": -0.38024844015023906, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,!=,28169671), country.name),country.name))", "score": -0.3822569144698702, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),person.birth_place))", "score": -0.38794555805457187, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,=,28169671), country.name),country.name))", "score": -0.41289552657542, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,production_country.movie_id), country.name),country.name))", "score": -0.4196610011105492, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(production_country),movie.id,production_country.movie_id),getData(production_country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.4241058997102489, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,>,28169671),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.43080191952167507, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<=,28169671), country.name),country.name))", "score": -0.43168537880047475, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 182, "beams": [{"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.0665116262658936, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,35841901), company.name),company.name))", "score": -0.17700219404736398, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.2612959903484353, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,35841901), company.name),company.name))", "score": -0.2656474427919019, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<,35841901), company.name),company.name))", "score": -0.27753960892416774, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>=,35841901), company.name),company.name))", "score": -0.30537482734399773, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,!=,35841901),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.3192352342694422, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),genre.name))", "score": -0.33780359548493144, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),person.death_place))", "score": -0.3584364844089948, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>,35841901), company.name),company.name))", "score": -0.3668767306229939, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,35841901), company.name),company.name))", "score": -0.3717865581299057, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),person.death_day))", "score": -0.3752496519731468, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),oscar.category))", "score": -0.3816646744015124, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<,35841901),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.38730098695646864, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),production_company.company_id))", "score": -0.3878262218407469, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 183, "beams": [{"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.24224423483604018, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.2511228316210693, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.2511390918566969, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.26001768864172603, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.28742943341083643, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.29632429043149316, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.32305408073690645, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.3252042382955779, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.3319326775219356, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3319489377575632, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.334082835080607, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3408275345425923, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.3567030096225097, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.36558160640753884, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.36559786664316646, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 184, "beams": [{"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.1785521953793063, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.19486564133052278, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.22962643239669428, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.movie_id), country.name),country.name))", "score": -0.23138501891746785, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.movie_id), country.name),country.name))", "score": -0.2436103264647954, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.24593987834791076, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_nominee.movie_id), country.name),country.name))", "score": -0.24769846486868433, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_company.movie_id), country.name),country.name))", "score": -0.25060558122607635, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.2551676441974077, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id), country.name),country.name))", "score": -0.2599237724160119, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id), country.name),country.name))", "score": -0.2669190271772928, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,crew.movie_id), country.name),country.name))", "score": -0.2704575141410427, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,has_genre.movie_id), country.name),country.name))", "score": -0.2723572159210805, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.28473860630287173, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,crew.movie_id), country.name),country.name))", "score": -0.28677100666845784, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 185, "beams": [{"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.09584974367595164, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.10786846824491232, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,=,2100), country.name),country.name))", "score": -0.23833607865335915, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,=,2100), country.name),country.name))", "score": -0.25323764706979646, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,>=,2100), country.name),country.name))", "score": -0.2699524123258777, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>=,2100), country.name),country.name))", "score": -0.2826819568395604, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.37875655270882636, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), country.name),person.birth_place))", "score": -0.3807438312230209, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),person.birth_place))", "score": -0.38828094661518675, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), person.birth_place),country.name))", "score": -0.39354217343177605, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.3961205818160523, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.40454133576931584, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), person.birth_place),country.name))", "score": -0.410200149894562, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,oscar_winner.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.4110601704534687, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), oscar.sub_category),country.name))", "score": -0.41687151242023607, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 186, "beams": [{"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.04794519505054305, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.3482903582455189, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.40131157488123137, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,has_genre.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4024625309794157, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.42436434246640725, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4332282487818599, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4485298382632167, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,has_genre.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.45548374761512816, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.budget),movie.budget)", "score": -0.477926313233025, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),movie.id,has_genre.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.47853651520030405, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4862494756255885, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.49049221753140393, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget), movie.id),movie.budget)", "score": -0.5365668061546346, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget), movie.id),movie.budget)", "score": -0.5441231699398574, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),getData(movie),movie.id,movie.budget), movie.id),movie.budget)", "score": -0.5880533144316444, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 187, "beams": [{"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.21196410977219046, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_country),movie.id,production_country.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.28405413925135975, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),production_country.iso_3166_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.2906033385157461, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,production_country.movie_id), language.name),language.name))", "score": -0.29679101050075285, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.2970785842907673, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),has_genre.genre_id,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.3332832884858398, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,country.iso_3166_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.34490762596977464, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),language.name))", "score": -0.355860743820159, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_country),movie.id,production_country.movie_id),getData(country),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.35916665620891924, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),keyword.name))", "score": -0.36024596391141467, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_country),movie.id,production_country.movie_id),getData(language),production_country.iso_3166_1,language.iso_639_1), language.name),language.name))", "score": -0.3664452771753903, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),production_country.iso_3166_1,language.iso_639_1),movie.id,production_country.movie_id), language.name),language.name))", "score": -0.3754302392443085, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),production_country.iso_3166_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.37571781303432294, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_country),movie.id,production_country.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.38031314032383734, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,genre.id),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.3815414957146424, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 188, "beams": [{"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))", "score": -0.05301239622349385, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,m), person.death_place),person.death_place))", "score": -0.310968424208113, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.gender,=,m),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,=,m), person.death_place),person.death_place))", "score": -0.41108191074792105, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.gender,=,m), person.death_place),person.death_place))", "score": -0.4499307749828481, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,=,m), person.death_place),person.death_place))", "score": -0.46701911666017965, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,m), person.death_place),person.death_place))", "score": -0.47981413209640167, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_place))", "score": -0.5446423436660552, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_day))", "score": -0.5461075706552947, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,<,m), person.death_place),person.death_place))", "score": -0.5523201222677017, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,m), person.death_place),person.death_place))", "score": -0.5771421445679152, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.death_place))", "score": -0.5855206395644927, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.birth_place))", "score": -0.5913551254343474, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.gender,=,m),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,=,m), person.death_day),person.death_place))", "score": -0.6305160829744344, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.6670006509084487, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),company.name))", "score": -0.6811073823046172, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 189, "beams": [{"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.13142575073605944, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.status,=,de),movie.vote_average)", "score": -0.2899655571016918, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,de), movie.id),movie.vote_average)", "score": -0.45721214661531473, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,de), movie.id),movie.vote_average)", "score": -0.5387046930029952, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.5777990729767045, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.title,=,de),movie.vote_average)", "score": -0.6414946084893407, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,cast.movie_id),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.6476133746993608, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.6538500122272226, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,de), movie.vote_average),movie.vote_average))", "score": -0.655825664567601, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,de), movie.id),movie.vote_average)", "score": -0.6841648113801436, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,de), movie.id),movie.vote_average)", "score": -0.704544024185713, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,de), movie.vote_average),movie.vote_average))", "score": -0.7354922791000718, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "score": -0.7737303939276481, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.runtime)", "score": -0.8358728631480684, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.popularity)", "score": -0.8597596671026132, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 190, "beams": [{"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_average)", "score": -0.08092694727643868, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_average)", "score": -0.13864425289245572, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.26283991130389717, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.runtime)", "score": -0.26536658563188503, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.vote_average)", "score": -0.27444034834495823, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.30558414635371134, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.runtime)", "score": -0.3230838912479021, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.year,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_average)", "score": -0.3317911623596762, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.vote_average)", "score": -0.3321576539609753, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_count)", "score": -0.35799548595594766, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.3801195260581313, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography), movie.id),movie.vote_average)", "score": -0.3966757714380803, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.number,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_average)", "score": -0.4018123646061151, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_count)", "score": -0.41571279157196467, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.4518508250889854, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 191, "beams": [{"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.05042198377486784, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1927-07-04), person.name),person.name))", "score": -0.2890604611748131, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1927-07-04), person.name),person.name))", "score": -0.3209314819687279, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.41569799722553596, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.5067023894734133, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.5555583501879493, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.5664137978111834, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,<=,1927-07-04), person.name),person.name))", "score": -0.5807356541312069, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,>=,1927-07-04),person.name), person.name))", "score": -0.5923372369434219, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.5926452185375756, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,person.id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.6142508879501758, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>=,1927-07-04), person.name),person.name))", "score": -0.625895116783795, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.6673015915002907, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1927-07-04), person.name),person.name))", "score": -0.6928371962421807, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1927-07-04), person.name),person.name))", "score": -0.6964457210415276, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 192, "beams": [{"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_count),movie.vote_count))", "score": -0.2714227251453849, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_count),movie.vote_average))", "score": -0.3055672459049674, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.revenue),movie.vote_count))", "score": -0.3178448490543815, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.revenue),movie.vote_average))", "score": -0.351989369813964, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_average),movie.vote_count))", "score": -0.409179311220214, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.runtime),movie.vote_count))", "score": -0.4221667460842582, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_average),movie.vote_average))", "score": -0.4433238319797965, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.runtime),movie.vote_average))", "score": -0.4563112668438407, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Whipped), movie.vote_count),movie.vote_count))", "score": -0.4846948906524631, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_count),movie.vote_count))", "score": -0.5131746797487722, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Whipped), movie.vote_count),movie.vote_average))", "score": -0.5188394114120456, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Whipped), movie.revenue),movie.vote_count))", "score": -0.5311170145614597, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.id),movie.vote_count))", "score": -0.54995266718106, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Whipped), movie.revenue),movie.vote_average))", "score": -0.5652615353210422, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.id),movie.vote_average))", "score": -0.5840971879406425, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 193, "beams": [{"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.13308322217840282, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),has_keyword.movie_id,None), None),None))", "score": -0.1584419922744327, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.17950703004227686, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,cast.person_id), person.death_place),person.death_place))", "score": -0.2020661742700344, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(filter(getData(movie),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,None),None,None), None),None))", "score": -0.21886655988773862, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,has_keyword.keyword_id), person.death_place),person.death_place))", "score": -0.24252072421899004, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.person_id), person.death_place),person.death_place))", "score": -0.24848998213390844, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(person),movie.id,person.id),has_keyword.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.25322312227223737, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),has_keyword.movie_id,None), None),None))", "score": -0.2561902480474754, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(person),cast.person_id,person.id),keyword.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.25711367889429626, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,person.id),has_keyword.movie_id,None), None),None))", "score": -0.2751857474758213, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.person_id),has_keyword.movie_id,None), None),None))", "score": -0.2765884192753198, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,has_keyword.movie_id), person.death_place),person.death_place))", "score": -0.28052447054860047, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),has_keyword.movie_id,cast.movie_id), person.death_place),person.death_place))", "score": -0.2844388585883864, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),oscar_nominee.person_id,cast.movie_id), person.death_place),person.death_place))", "score": -0.28771524739119225, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 194, "beams": [{"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.09071899335028354, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.09460419220494029, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.24166197160376235, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.30533713211382457, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3068039697606586, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.33603129129185705, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.3800389253882578, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.38392412424291456, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), movie.title),company.name))", "score": -0.38400561725377585, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), movie.title),company.name))", "score": -0.3878908161084326, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), person.death_place),company.name))", "score": -0.39846645044242496, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), person.death_place),company.name))", "score": -0.4023516492970817, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.homepage,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.4091459250834597, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),person.birth_day,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.4108439452462476, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),genre.name))", "score": -0.4126048440718896, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 195, "beams": [{"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.14499142532509907, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.2024110684900815, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.202688430803412, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.2502582557246034, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,production_country.movie_id), person.birth_place),person.birth_place))", "score": -0.28041103190736855, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.3007123028773588, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.30098966519068926, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.3038024770527188, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,production_country.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.3084816373526575, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,production_country.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.308758999665988, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.3123989768855537, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.31267633919888416, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.3260050125664084, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.death_place))", "score": -0.3355045258520642, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.354659218204802, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 196, "beams": [{"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.05739722088302837, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.17664188904798092, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.runtime,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.1873993718396399, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.title,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.24507715905813024, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.2604487998114775, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.36816886549449046, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.status,=,128), genre.name),genre.name))", "score": -0.39367613676600677, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.39566241665746743, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,128),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4070127052496113, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))", "score": -0.4073126800641063, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.43035716020612186, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.homepage,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.43171125960625206, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),person.death_place))", "score": -0.4359369070134607, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.43871695869773947, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,has_genre.movie_id),movie.status,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4403410682622023, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 197, "beams": [{"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))", "score": -0.03782364587823395, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.release_date),movie.release_date))", "score": -0.234024551245966, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,Released), movie.release_date),movie.release_date))", "score": -0.4818486855510855, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Released), movie.release_date),movie.release_date))", "score": -0.6740199015621329, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.release_date),movie.release_date))", "score": -0.6780495909188176, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))", "score": -0.6791590284337872, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,Released), movie.release_date),movie.release_date))", "score": -0.680873688790598, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.title))", "score": -0.7084988627029816, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>,Released), movie.release_date),movie.release_date))", "score": -0.7842130032513523, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,Released), movie.release_date),movie.release_date))", "score": -0.8189419792179251, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,Released), movie.release_date),movie.release_date))", "score": -0.8200426981929922, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.status))", "score": -0.8415085348678986, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.budget),movie.release_date))", "score": -0.856408581501455, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))", "score": -0.858154678811843, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Released), movie.release_date),movie.release_date))", "score": -0.8702208067043102, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 198, "beams": [{"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Documentary), movie.title),movie.title))", "score": -0.38396377439494245, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,has_genre.genre_id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.4438460009674466, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,movie.id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.44982052554347574, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Documentary), movie.title),movie.title))", "score": -0.4499213555692137, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(movie),cast.movie_id,movie.id),oscar.category,=,Documentary), movie.title),movie.title))", "score": -0.4571673623254798, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.46246751694399013, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(movie),cast.movie_id,movie.id),oscar.category,=,Documentary), movie.title),movie.title))", "score": -0.46455272755689625, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,has_genre.genre_id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.46733043921781725, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,movie.id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.4733049637938464, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Documentary), movie.title),movie.title))", "score": -0.47340579381958436, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(movie),cast.movie_id,movie.id),movie.title,=,Documentary), movie.title),movie.title))", "score": -0.480349124432684, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,has_genre.genre_id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.4819439793918437, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.category,=,Documentary), movie.title),movie.title))", "score": -0.4835356655239593, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.48595200835606156, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,has_keyword.keyword_id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.486514946465487, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 199, "beams": [{"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.id),oscar.number)", "score": -0.09221557545748711, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.category),oscar.number)", "score": -0.1586256125674972, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.number),oscar.number)", "score": -0.15939572345934153, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.gender,=,f), oscar.id),oscar.number)", "score": -0.23881911001116185, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.gender,=,f), oscar.number),oscar.number)", "score": -0.2883467669311872, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.3130338969074486, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.gender,=,f), oscar.category),oscar.number)", "score": -0.31595850715424173, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.movie_id), oscar.category),oscar.number)", "score": -0.3506617025826489, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.category),oscar.number)", "score": -0.3900755416767891, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.movie_id), oscar.category),oscar.number)", "score": -0.3913916700091395, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), person.death_day),oscar.number)", "score": -0.4054138779247449, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.40832507275573604, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.42125700381120373, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.42428258858888984, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),genre.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.id),oscar.number)", "score": -0.42978803124438014, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 200, "beams": [{"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.29427384921033256, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.title),oscar.number)", "score": -0.3008359431411307, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), language.name),oscar.number)", "score": -0.32726756572720006, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "score": -0.3285842920813809, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.34205589216398596, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.id),oscar.number)", "score": -0.3450920142450662, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.36372368383554715, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.title),oscar.number)", "score": -0.36393621691104105, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.title),movie.title))", "score": -0.3799142188248935, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.3935048565295335, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,movie.id), oscar.id),oscar.number)", "score": -0.3947209217144963, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.id),oscar.number)", "score": -0.39572700086800744, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "score": -0.39971174379873464, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,movie.id), movie.title),oscar.number)", "score": -0.4012830156452944, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,movie.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.43789373812355437, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 201, "beams": [{"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.03410305768920807, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.49700094115542015, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.5157271006169267, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.budget,=,27000000),movie.release_date), movie.release_date))", "score": -0.5161512752529234, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),crew.person_id,movie.id),movie.id,cast.movie_id),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.5178026042961066, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.5526732590818599, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.person_id,movie.id),movie.id,cast.movie_id),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.5559329219244693, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),person.birth_day))", "score": -0.5573829914137605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), person.birth_day),movie.release_date))", "score": -0.5623306588895503, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,27000000), movie.release_date),movie.release_date))", "score": -0.6472586266390863, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,27000000), movie.release_date),movie.release_date))", "score": -0.6981786958567682, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,27000000), movie.release_date),movie.release_date))", "score": -0.7024648742444697, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,27000000), movie.release_date),movie.release_date))", "score": -0.7214833967082086, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.runtime))", "score": -0.7241365815207246, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,27000000), movie.release_date),movie.release_date))", "score": -0.7440946655042353, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 202, "beams": [{"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.015453199030162068, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.39505938442735905, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.47414068517066427, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.49838895581762627, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.5452701770863924, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.555383048123459, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,spoken_language.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.5651036651038737, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.6066746343081332, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.6069333159597724, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.6144785170883474, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.6220977574097064, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,has_genre.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.6327950986448118, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,10.4764), movie.title),movie.title))", "score": -0.7047399281182152, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,10.4764), movie.title),movie.title))", "score": -0.7456447480835777, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,10.4764), movie.title),movie.title))", "score": -0.7772408074706618, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 203, "beams": [{"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.2568876341224314, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(filter(getData(country),country.name,=,Serbia and Montenegro),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),None))", "score": -0.2729527572947338, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),crew.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.28225667256427267, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(filter(getData(country),country.name,=,Serbia and Montenegro),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),crew.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),None))", "score": -0.29750612257823245, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),person.id,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.30992973122918116, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_place,=,Serbia and Montenegro), company.name),company.name))", "score": -0.31015933225672937, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),cast.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.32034870476261873, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.32036604217915693, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(filter(getData(country),country.name,=,Serbia and Montenegro),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_place,=,Serbia and Montenegro), company.name),None))", "score": -0.32418119472075835, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(filter(getData(country),country.name,=,Serbia and Montenegro),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),cast.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),None))", "score": -0.33398996015477117, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),person.id,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),crew.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.33529875220112587, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),crew.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_place,=,Serbia and Montenegro), company.name),company.name))", "score": -0.3355283706985706, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.34379488968479116, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_place,=,Serbia and Montenegro), company.name),company.name))", "score": -0.3538875781949595, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.original_language,=,Serbia and Montenegro), company.name),company.name))", "score": -0.3572098866619574, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 204, "beams": [{"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.04175858903909102, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5066431781848482, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5199371829245093, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5337895359564075, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5345812113339105, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),person.gender,movie.id),person.id,cast.person_id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5460333135773716, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5478752160735716, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,person.gender),getData(person),cast.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5575749125403255, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.56098940117012, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.gender,!=,m),getData(spoken_language),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.562947322417429, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.gender,!=,m),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5704027851300626, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),person.gender,movie.id),person.id,crew.person_id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5732331879282513, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),genre.name))", "score": -0.6448686950025149, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,m), person.death_place),person.death_place))", "score": -0.6591668131877668, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_day))", "score": -0.7151471011457033, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 205, "beams": [{"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.017100131342886016, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.40256837185206573, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.4586027559100665, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.461273096934187, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.5173074809921878, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1939-12-17), person.death_place),person.death_place))", "score": -0.540183288481785, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_day))", "score": -0.5792627359915059, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.5972316745591314, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.6002618864586111, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),genre.name))", "score": -0.6431012178945821, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,<,1939-12-17), person.death_place),person.death_place))", "score": -0.6800436360760826, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),company.name))", "score": -0.6855112935591023, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_day))", "score": -0.7284030446318768, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.birth_place),person.death_place))", "score": -0.7378924230288249, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1939-12-17), person.death_place),person.death_place))", "score": -0.7671786970167886, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 206, "beams": [{"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.id),movie.budget)", "score": -0.06078791283986294, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,!=,Viernheim), movie.id),movie.budget)", "score": -0.1440228612769406, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,!=,Viernheim), movie.id),movie.budget)", "score": -0.2506982369234786, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,!=,Viernheim), movie.id),movie.budget)", "score": -0.25701000483447034, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.id),movie.budget)", "score": -0.26633515123125356, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)", "score": -0.30315198035430896, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.id),movie.revenue)", "score": -0.30920253862440555, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.budget),movie.budget)", "score": -0.32798100111758827, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,!=,Viernheim), movie.id),movie.budget)", "score": -0.34957009966833125, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,!=,Viernheim), movie.id),movie.budget)", "score": -0.36290542276513665, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.id),movie.budget)", "score": -0.3833671307067142, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),crew.movie_id,!=,Viernheim), movie.id),movie.budget)", "score": -0.3867950480576014, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.id),movie.budget)", "score": -0.38733496875061046, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,!=,Viernheim), movie.id),movie.revenue)", "score": -0.39243748706148324, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,!=,Viernheim), movie.budget),movie.budget)", "score": -0.41121596869469634, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 207, "beams": [{"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))", "score": -0.020492646701313788, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,288), movie.runtime),movie.runtime))", "score": -0.45524158221451216, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))", "score": -0.4611884958212613, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,288), movie.runtime),movie.runtime))", "score": -0.5874334786531108, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,288), movie.runtime),movie.runtime))", "score": -0.5937061906770396, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,288), movie.runtime),movie.runtime))", "score": -0.6429206941720622, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,288), movie.runtime),movie.runtime))", "score": -0.6521169756051677, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), oscar.year),movie.runtime))", "score": -0.717771888103016, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.title))", "score": -0.7282075959701615, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.vote_average),movie.runtime))", "score": -0.7296797636408883, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.status))", "score": -0.7358408051986771, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,288), movie.runtime),movie.runtime))", "score": -0.7403742671922373, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.status),movie.runtime))", "score": -0.7558372620005684, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),oscar.year))", "score": -0.7780428606529313, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.vote_average))", "score": -0.7887511927146988, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 208, "beams": [{"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.015554489164060215, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.48626300709586406, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.514438212312497, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.5528240436258374, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.5744469456667723, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.5809992448968753, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.5886684890319884, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.6478825587320923, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,675), movie.original_language),movie.original_language))", "score": -0.6557630189381598, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), language.name),movie.original_language))", "score": -0.6635041566824598, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),language.name))", "score": -0.682492900701618, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,675), movie.original_language),movie.original_language))", "score": -0.6940382607899664, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,675), movie.original_language),movie.original_language))", "score": -0.6990540840815811, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.title),movie.original_language))", "score": -0.7071987927811278, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.title))", "score": -0.716173697324848, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 209, "beams": [{"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,writing), movie.title),movie.title))", "score": -0.12443359539246715, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.20301665436904864, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,writing), movie.title),movie.title))", "score": -0.2489702041572236, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(oscar_nominee),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.2522618189203045, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.2624904345414711, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.2730363070300658, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(oscar_nominee),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.2778833433064657, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.2781657914838184, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(oscar_nominee),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing), movie.title),movie.title))", "score": -0.2854906959333794, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.title),movie.title))", "score": -0.2954601889927959, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.298657831416227, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.30038811268224275, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.title),movie.title))", "score": -0.30115342491475316, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.30766022647484836, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.3160766566651437, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 210, "beams": [{"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.0620426224777475, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,>,1957-08-15),person.name), person.name))", "score": -0.362222239964467, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.45437567721819505, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1957-08-15),person.name), person.name))", "score": -0.47171200705633964, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.6606780876083291, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1957-08-15), person.name),person.name))", "score": -0.6715996862621978, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.6900431490122122, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.6937616947953308, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.name),person.name))", "score": -0.7339075687341392, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "score": -0.7637413741322234, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.death_place))", "score": -0.7666596396593377, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.gender))", "score": -0.7748220189241692, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.birth_place),person.name))", "score": -0.8023227455560118, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.gender),person.name))", "score": -0.8220395448151976, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1957-08-15), person.name),person.name))", "score": -0.8422654868336394, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 211, "beams": [{"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.031063390109920874, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.41040763320052065, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.4404793903686431, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.4466517889998392, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.450818957515224, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.45492753563138216, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.48153106832732057, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.death_place),person.birth_place))", "score": -0.4915628527814988, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.507476713461038, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.5116438819764227, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.5190908494361077, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.5752687083410077, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.death_place))", "score": -0.5907771989295725, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.648748113453621, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_day))", "score": -0.6713303729484323, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 212, "beams": [{"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.036472314153797925, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.3209865066455677, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.33584074182817303, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.43344511713664674, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.45433471505330286, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5139028420859905, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5160962512184326, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5181828668006027, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5260696698064357, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5260937886055405, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),country.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5362182669968495, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5394222437885846, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.popularity),movie.original_language))", "score": -0.5449732058365695, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Don Juan DeMarco), movie.title),movie.original_language))", "score": -0.5480619441950694, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Don Juan DeMarco), movie.original_language),movie.title))", "score": -0.5732224796665832, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 213, "beams": [{"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.14525250201778395, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.16691725764461182, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.name))", "score": -0.20613962345377831, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.name))", "score": -0.22650466951806356, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.24937480087161923, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.birth_day))", "score": -0.27769404217873156, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.birth_day))", "score": -0.28572366083814194, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.2861946077022057, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.name))", "score": -0.31026192230761357, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(getData(person),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,oscar_nominee.oscar_id), person.birth_day),person.name))", "score": -0.34299414973934805, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(getData(person),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,oscar_nominee.oscar_id), person.name),person.name))", "score": -0.37077368995463234, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(getData(oscar_winner),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,oscar_nominee.oscar_id), person.birth_day),person.name))", "score": -0.38031005059604944, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(filter(getData(oscar),oscar.category,=,writing),getData(person),person.id,person.id),oscar_nominee.movie_id,oscar_nominee.person_id), person.death_day),person.name))", "score": -0.4019615004680374, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(filter(getData(oscar),oscar.sub_category,=,writing),getData(person),person.id,person.id),oscar_nominee.movie_id,oscar_nominee.person_id), person.death_day),person.name))", "score": -0.41675308131249317, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(filter(getData(oscar),oscar.category,=,writing),getData(person),person.id,person.id),oscar_nominee.movie_id,oscar_nominee.oscar_id), person.death_day),person.name))", "score": -0.41970993975437515, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 214, "beams": [{"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.26782320309198127, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.27021257345233346, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.3269466740305526, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.3293360443909048, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.3363823354347144, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.3387717057950666, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3522655940993705, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(oscar_winner),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.3651701827358943, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(oscar_winner),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.3675595530962465, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_company.company_id), country.name),country.name))", "score": -0.37483876105649655, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,art direction (black-and-white)),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3766484813480452, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),filter(merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,=,art direction (black-and-white)),production_country.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.38220039467890504, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,art direction (black-and-white)),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3906393958077552, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,art direction (black-and-white)),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_country.movie_id), country.name),country.name))", "score": -0.39317461179050756, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),filter(merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,art direction (black-and-white)),production_country.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.41163168015571616, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 215, "beams": [{"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.runtime),movie.runtime))", "score": -0.15522967539966467, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), oscar.year),movie.runtime))", "score": -0.20808608178331495, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects), movie.runtime),movie.runtime))", "score": -0.21007174079841603, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "score": -0.2240361934541338, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.oscar_id,movie.id), movie.runtime),movie.runtime))", "score": -0.25415626633066, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,oscar.id), movie.runtime),movie.runtime))", "score": -0.2805318460839646, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.runtime),oscar.year))", "score": -0.282076614401532, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.oscar_id,oscar.id), movie.runtime),movie.runtime))", "score": -0.31065191896049077, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "score": -0.3142154850999099, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "score": -0.3314954478333135, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), oscar.year),oscar.year))", "score": -0.3349330207851822, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,oscar_nominee.oscar_id), movie.runtime),movie.runtime))", "score": -0.34876541509215625, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects), person.birth_day),movie.runtime))", "score": -0.35690055718229013, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects), movie.runtime),movie.runtime))", "score": -0.35808611184036404, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,movie.id), movie.runtime),movie.runtime))", "score": -0.36161548848748065, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 216, "beams": [{"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.16456125018240136, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.18265224325287296, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(getData(oscar_nominee),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.20575981726988235, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.21465275538699147, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.2249035035668857, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.2251047545166385, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.24299449663735728, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar_nominee.person_id,company.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.2439674269627771, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id), company.name),company.name))", "score": -0.2451661145590099, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.2495741422483867, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(getData(oscar_nominee),merge(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.25229108481852813, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.movie_id), company.name),company.name))", "score": -0.25271876364090223, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,movie.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.26628976957827266, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2708097497658003, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,movie.id), company.name),company.name))", "score": -0.29429073933234046, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 217, "beams": [{"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.09846820183156524, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.death_place))", "score": -0.3098661998665193, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.32762864366042255, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.3896953292251279, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.4333475279369618, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Middletown, Rhode Island), person.name),person.death_place))", "score": -0.4441909554781514, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.4495846653735498, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.45915412465245253, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.46704960076825436, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.4751490273880266, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.484036898505436, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.death_place),person.name))", "score": -0.4887885112693766, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.4917079536090969, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.5022820258891443, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Middletown, Rhode Island), person.name),person.death_place))", "score": -0.5092050276251742, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 218, "beams": [{"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.06294650773391963, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.revenue,=,33889159),getData(company),production_company.company_id,company.id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.2477574522075544, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.24884867342847727, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,!=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.26764920350393767, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.27497078885014803, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.revenue,!=,33889159),getData(company),production_company.company_id,company.id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.2750985748469629, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.2964011081583939, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,33889159), company.name),company.name))", "score": -0.30798913242689996, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,33889159), company.name),company.name))", "score": -0.3097617030146931, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.revenue,<,33889159),getData(company),production_company.company_id,company.id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.31426222590644276, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<,33889159), company.name),company.name))", "score": -0.3385537434450189, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.revenue,<=,33889159),getData(company),production_company.company_id,company.id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.3734151166879056, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(genre),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.3940728076026133, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>=,33889159), company.name),company.name))", "score": -0.39962915767203344, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),genre.name))", "score": -0.40488269897091905, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 219, "beams": [{"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))", "score": -0.021683270098947105, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.vote_count),movie.vote_count))", "score": -0.40117818022736174, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.runtime),movie.vote_count))", "score": -0.4964243834710942, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Released), movie.vote_count),movie.vote_count))", "score": -0.6246418049431668, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.title),movie.vote_count))", "score": -0.673129833290659, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))", "score": -0.675286590198084, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Released), movie.vote_count),movie.vote_count))", "score": -0.6825856258965359, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Released), movie.vote_count),movie.vote_count))", "score": -0.6830696156121121, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.title))", "score": -0.6872220839013607, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_count))", "score": -0.7095071440435277, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.runtime))", "score": -0.7350307906617672, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), oscar.number),movie.vote_count))", "score": -0.7594536905980931, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<=,Released), movie.vote_count),movie.vote_count))", "score": -0.7674663780362607, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_average))", "score": -0.7955940569390805, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),oscar.number))", "score": -0.8013321364869626, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 220, "beams": [{"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.07061496061494342, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.1530052173018773, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.2024392957096481, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(merge(merge(getData(oscar_nominee),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,None),None,None), None),None))", "score": -0.22533613002806177, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.24269349418971012, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.2683548498238271, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.27330954831735954, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.2777091304940883, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.29900483116362503, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,=,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.30573599439423327, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(merge(merge(getData(oscar_nominee),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,None),None,None), None),None))", "score": -0.308300100651975, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<=,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.3114151880020816, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,!=,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.3194183453578043, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.3210881135900637, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.3349627310677684, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 221, "beams": [{"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.034700651283254315, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.1567219808843281, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.status,=,Post Production), genre.name),genre.name))", "score": -0.33088567620372256, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.name), genre.name),genre.name))", "score": -0.34256580533511294, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),company.name))", "score": -0.39348066929556286, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.title,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3960518784226466, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(has_genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.39825751751509764, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3985509673343471, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3991458222614127, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.original_language,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.40497620400823514, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Post Production),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.41250776176002246, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4229596227211862, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), person.death_place),genre.name))", "score": -0.4234092868136425, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4270473491044461, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.42894703897503444, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 222, "beams": [{"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)", "score": -0.03891789978887716, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.id),movie.budget)", "score": -0.5229887167175221, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.budget),movie.budget)", "score": -0.5351799534235961, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.budget),movie.budget))", "score": -0.5669358190280036, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.revenue),movie.budget))", "score": -0.6701535325628356, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.4), movie.id),movie.budget)", "score": -0.7193253915010586, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.release_date),movie.budget)", "score": -0.7986330369723473, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "score": -0.8843272164594964, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.revenue)", "score": -0.8900792821655613, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.revenue),movie.budget)", "score": -0.911072769723197, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>,6.4), movie.id),movie.budget)", "score": -0.9260731375895035, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.popularity),movie.budget))", "score": -0.9302902861163602, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,6.4), movie.id),movie.budget)", "score": -0.9309085211205037, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,6.4), movie.id),movie.budget)", "score": -0.9516528968311587, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.popularity),movie.budget)", "score": -0.9591322175017226, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 223, "beams": [{"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,company.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.2535807532958451, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,=,150),getData(company),production_company.company_id,company.id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.2614256375978065, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.2644200583403589, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.26897831365135905, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.2850738615934162, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.2890197290770894, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<=,special achievement award (visual effects)),getData(company),production_company.company_id,company.id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.29441969389273853, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(company),oscar_nominee.oscar_id,company.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.29511280038241444, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.30178128392486064, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.3088155373180621, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.3139556032941453, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.33170443240565123, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,company.id),oscar.id,oscar_nominee.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.33182726548067576, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,company.id),movie.id,oscar_nominee.oscar_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.33627837949999945, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(company),production_company.company_id,company.id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.3476855368659368, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
