{"index": 0, "beams": [{"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))", "score": -0.2717623025891953, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,4.5), movie.title),movie.title))", "score": -0.3007569745896035, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.vote_count),movie.title))", "score": -0.38546174622752005, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.runtime),movie.title))", "score": -0.4027570471880608, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,4.5), movie.vote_count),movie.title))", "score": -0.4144564182279282, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,4.5), movie.runtime),movie.title))", "score": -0.431751719188469, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.45666747822859044, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,4.5),movie.vote_average), movie.title))", "score": -0.46112177838222124, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,>=,4.5),movie.vote_average), movie.title))", "score": -0.46828345526591875, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.49718299828459056, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.49941983443509286, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.5115064904344473, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.year,>=,4.5), movie.title),movie.title))", "score": -0.5184761420605355, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,4.5), movie.vote_average),movie.title))", "score": -0.5364755777164709, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.vote_average,>=,4.5), movie.vote_average),movie.title))", "score": -0.537708738677558, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 1, "beams": [{"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,el), movie.runtime),movie.runtime))", "score": -0.24634156534739304, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))", "score": -0.37432865212031174, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4081896705864493, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4105099218755553, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.42528792663110615, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4271522720349444, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4276081779202121, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),person.id,oscar_winner.person_id),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4294725233240504, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.44425052807960125, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.4445594684431717, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,oscar_winner.person_id),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.44657073063714825, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,el), movie.runtime),movie.runtime))", "score": -0.45337455116388004, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,el), movie.runtime),movie.runtime))", "score": -0.5176387817627983, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),country.name,=,el),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.runtime),movie.runtime))", "score": -0.518380767479883, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of the movies that are originally in Greek?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,el),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.runtime),movie.runtime))", "score": -0.5378313934796186, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,el), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 2, "beams": [{"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_country.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.2629599897434021, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.26363205364447706, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_country.movie_id,movie.id), country.name),country.name))", "score": -0.2896959662839244, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,164),production_country.movie_id,movie.id), country.name),country.name))", "score": -0.30543373001186214, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_country.movie_id,movie.id), country.name),country.name))", "score": -0.3082953295742589, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,=,Somerset),getData(production_country),person.id,cast.person_id),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3114593990058264, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.name,=,Somerset),getData(production_country),person.id,oscar_winner.person_id),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.31375180473626674, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_country.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.31451914194019276, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),movie.title,=,Somerset),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.32878835003986473, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,Somerset),production_country.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.33180258847347416, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),production_country.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3331185052305273, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_country.movie_id,production_country.movie_id), country.name),country.name))", "score": -0.3351177618397334, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),cast.movie_id,movie.id),movie.title,=,Somerset),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.34621289940070643, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_place,=,Somerset),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_country.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3468937460774327, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Is there any movie producing country which produced a movie with a higher runtime than 164 and for which anyone accomplished an oscar who died in Somerset?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),keyword.name,=,164),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.34889523085215624, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Somerset),getData(oscar_winner),person.id,oscar_winner.person_id),merge(filter(getData(movie),movie.runtime,>,164),getData(production_country),movie.id,production_country.movie_id),oscar_winner.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 3, "beams": [{"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.1942486280902956, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2127143677794529, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id), company.name),company.name))", "score": -0.2344634105570403, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))", "score": -0.26749050150078996, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,company.id), company.name),company.name))", "score": -0.2785767251914356, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,production_company.company_id), company.name),company.name))", "score": -0.2859210889897469, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,movie.id),country.name,=,Slovakia),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.28912085013307814, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2916856854147841, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_company),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3021724758626724, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3026417473700633, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,movie.id), company.name),company.name))", "score": -0.30656367657343986, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,company.id), company.name),company.name))", "score": -0.3116038161351853, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),getData(production_company),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_country.movie_id,movie.id), company.name),company.name))", "score": -0.3140883409989579, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Slovakia),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3160949540421625, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many slovakian companies produced and released their films in Slovakia?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id), company.name),company.name))", "score": -0.33886640219618536, "correct_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),filter(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.status,=,Released),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Slovakia),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 4, "beams": [{"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.10530772489070452, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.17999476587970842, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.19096183136020564, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>=,1980-07-12), movie.title),movie.title))", "score": -0.21161822136900618, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,>,1980-07-12), movie.title),movie.title))", "score": -0.2243969305605207, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.2329341089466557, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,=,1980-07-12), movie.title),movie.title))", "score": -0.27669654262419097, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.2802458777460549, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,>,1980-07-12), movie.title),movie.title))", "score": -0.31368097694637, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,>,1980-07-12), movie.title),movie.title))", "score": -0.31592861407280964, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1980-07-12),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3293962340410112, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1980-07-12), movie.title),movie.title))", "score": -0.3309312358742729, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1980-07-12),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.35957660051590096, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.oscar_id), movie.title),movie.title))", "score": -0.36989813534056787, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}, {"orig_question": "For which movies were oscars won by persons born after 1980-07-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.person_id),person.birth_day,>,1980-07-12), movie.title),movie.title))", "score": -0.38822439853401003, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1980-07-12),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 5, "beams": [{"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,new age), movie.id),movie.popularity)", "score": -0.11130767526233061, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.1476734965969976, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.popularity)", "score": -0.23425326143808484, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.23936093536426487, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.24585156754911247, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,new age),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.26947681774922044, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(cast),keyword.id,has_keyword.keyword_id),getData(movie),cast.movie_id,movie.id),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.27631870065588376, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,new age), movie.id),movie.popularity)", "score": -0.2987214954639828, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(movie),keyword.id,has_keyword.keyword_id),getData(movie),cast.movie_id,movie.id),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.31369547928153185, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.3337795152837847, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(cast),keyword.id,has_keyword.keyword_id),getData(movie),cast.movie_id,movie.id),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.33489090124259324, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(movie),movie.id,cast.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.34139285051206375, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(cast),keyword.id,has_keyword.keyword_id),getData(movie),spoken_language.movie_id,movie.id),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.34269425499064493, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.popularity)", "score": -0.3595837459097032, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,new age),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.3678471922846405, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 6, "beams": [{"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.11267793457698398, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.17639100006390218, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,movie.id), company.name),company.name))", "score": -0.19774150851225678, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.20516828253262134, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.23537500629368702, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(getData(production_company),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.24856064936379635, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,production_company.company_id), company.name),company.name))", "score": -0.2605157127782754, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.2738709700915071, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),oscar.id,production_company.company_id), company.name),company.name))", "score": -0.27874451886765617, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,company.id), company.name),company.name))", "score": -0.2793903626479081, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(getData(production_company),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.2916740400175569, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.292407818618341, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,movie.id), company.name),company.name))", "score": -0.2986210981788531, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,art direction (color)),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),company.name,=,art direction (color)),production_company.movie_id,production_company.company_id), company.name),company.name))", "score": -0.3045769129059363, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}, {"orig_question": "Are there any production companies that have worked on a movie that has been nominated in the category art direction (color)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (color)),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,production_company.company_id), company.name),company.name))", "score": -0.30752178381923045, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,art direction (color)), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 7, "beams": [{"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.12366712441510798, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.death_place))", "score": -0.24799387761659655, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.2595968042255581, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.birth_place))", "score": -0.2676267462181706, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.26819269682397134, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))", "score": -0.2780970472873581, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.30699971721692504, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.31364450562342683, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_day),person.birth_place))", "score": -0.31718160276916973, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,production_country.movie_id), person.birth_place),person.birth_place))", "score": -0.3399303428882041, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.gender),person.birth_place))", "score": -0.36938823583537655, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),cast.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.death_place))", "score": -0.3839235574270467, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),production_country.iso_3166_1,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.38634507289578, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.38745708166348564, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}, {"orig_question": "How many female actors from different birthplaces have played in movies that last longer than 242 minutes?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,242),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.3919534994196592, "correct_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.runtime,>,242),person.gender,=,f), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 8, "beams": [{"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.11056756397783554, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,!=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.1312236845651225, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,<,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.2199829562974655, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,<=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.36745252180008237, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,!=,Adventure),movie.revenue),movie.vote_count))", "score": -0.3996426948256124, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue,<,Adventure), movie.id),movie.vote_count)", "score": -0.4148634587007605, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "sum(distinct(filter(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget,<,Adventure), movie.id),movie.vote_count)", "score": -0.42995551508380675, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "sum(distinct(filter(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,<,Adventure), movie.id),movie.vote_count)", "score": -0.44812682383323105, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),person.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.4600789164397368, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(person),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.vote_count))", "score": -0.460409502614234, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "sum(distinct(filter(merge(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget,<,Adventure), movie.revenue),movie.vote_count)", "score": -0.46051312741487394, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(genre),genre.name,=,Adventure),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.4683873434275242, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue,<,Adventure), movie.budget),movie.vote_count)", "score": -0.4751343301829018, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "sum(distinct(filter(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue,<,Adventure), movie.id),movie.vote_count)", "score": -0.47719937013870445, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}, {"orig_question": "What's the vote count of the movie with the lowest revenue in the Adventure genre?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,Adventure),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.revenue))", "score": -0.4797427886959873, "correct_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Adventure),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 9, "beams": [{"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.id),oscar.number)", "score": -0.08485168631154721, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,77), oscar.id),oscar.number)", "score": -0.21009854898267175, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.category),oscar.number)", "score": -0.23053254981620175, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.id),oscar.number)", "score": -0.24536007335279802, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.number),oscar.number)", "score": -0.2620821978960152, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.runtime,<=,77), oscar.id),oscar.number)", "score": -0.2950205683222258, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.id),oscar.number)", "score": -0.32255389283306285, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,>=,77), oscar.id),oscar.number)", "score": -0.3260440918429627, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,77), oscar.category),oscar.number)", "score": -0.35577941248732625, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,=,77), oscar.id),oscar.number)", "score": -0.35600225121314116, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,77), oscar.id),oscar.number)", "score": -0.3706069360239226, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,77), oscar.number),oscar.number)", "score": -0.3873290605671398, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,77), oscar.category),oscar.number)", "score": -0.39104092750010433, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,has_keyword.movie_id),movie.runtime,<=,77), oscar.id),oscar.number)", "score": -0.41532548732975216, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers that have been won for movies with a runtime of maximum 77? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.runtime,<,77), oscar.id),oscar.number)", "score": -0.4202674216360021, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,<=,77),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 10, "beams": [{"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))", "score": -0.014606880758947227, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,2159280), movie.revenue),movie.revenue))", "score": -0.5045678737005801, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,2159280), movie.revenue),movie.revenue))", "score": -0.6527417677352787, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.budget))", "score": -0.7190061507644714, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))", "score": -0.7207024712770362, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,2159280), movie.revenue),movie.revenue))", "score": -0.7347374977907748, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.vote_count))", "score": -0.7415800390663208, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2159280), movie.revenue),movie.revenue))", "score": -0.7643721478889347, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.vote_count),movie.revenue))", "score": -0.7715578470742912, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.budget),movie.revenue))", "score": -0.7770905886209221, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,2159280), movie.revenue),movie.revenue))", "score": -0.7886791052660556, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>=,2159280), movie.revenue),movie.revenue))", "score": -0.805271186203754, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>=,2159280), movie.revenue),movie.revenue))", "score": -0.8425733226249577, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,2159280), movie.revenue),movie.revenue))", "score": -0.8827442946276278, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}, {"orig_question": "Find the revenue of the movies having the budget of at least 2159280.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),cast.movie_id))", "score": -0.8992440996589721, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,2159280), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 11, "beams": [{"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,Krush Groove), movie.id),movie.popularity)", "score": -0.21336355433596232, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.31535934291209844, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.3290499168829995, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.36321259934623473, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.37690317331713585, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4030151948964473, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.41670576886734845, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.41773482990952715, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4188086587739869, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.43142540388042827, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4433581098194139, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4508684513305837, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,movie.id),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.45525059787579625, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.4570488578937029, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}, {"orig_question": "What's the average popularity of the movie \"Krush Groove\"?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Krush Groove), movie.id),movie.popularity)", "score": -0.46455919940487267, "correct_code": "avg(distinct(filter(getData(movie),movie.title,=,Krush Groove), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 12, "beams": [{"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.023688035123996087, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.3649750784721774, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.43977018463518186, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.4822434596333631, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.48656935126659234, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,has_genre.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.4953516996700697, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.budget,movie.id),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.4967345551201588, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.5085868726813456, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.5296580154651566, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.5455564701078401, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.5570385464144975, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.5629656538784292, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,2.8),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.budget),movie.budget))", "score": -0.5654336964096088, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.budget),movie.vote_average,=,2.8), movie.budget),movie.budget))", "score": -0.585260151044736, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}, {"orig_question": "Which are the budgets of the movies which have average vote of 2.8?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.budget),movie.title))", "score": -0.6418229830833297, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 13, "beams": [{"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.status))", "score": -0.08828326348157134, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.status))", "score": -0.2171896252402803, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.release_date))", "score": -0.37637640941829886, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.title))", "score": -0.454367895014002, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.release_date))", "score": -0.5052827711770078, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_average),movie.status))", "score": -0.5343978110322496, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.runtime),movie.status))", "score": -0.5629542473325273, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.popularity))", "score": -0.5829567800828954, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.title))", "score": -0.5832742567727109, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.release_date),movie.status))", "score": -0.5932394865521928, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.original_language),movie.status))", "score": -0.6222650412091753, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2007-07-07), movie.status),movie.status))", "score": -0.6367391975218197, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.status),movie.runtime))", "score": -0.638162661678507, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.release_date,>,2007-07-07),movie.status), movie.status))", "score": -0.6989899950713152, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.title),movie.status))", "score": -0.7089409235486528, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 14, "beams": [{"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.04323427218933021, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,17500000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.17870990366774775, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),genre.name,!=,17500000), genre.name),genre.name))", "score": -0.264152392308791, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,!=,17500000), genre.name),genre.name))", "score": -0.3111748735244458, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,=,17500000), genre.name),genre.name))", "score": -0.33189048426993234, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), person.death_place),genre.name))", "score": -0.3329409691675012, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,>=,17500000), genre.name),genre.name))", "score": -0.3462051227815449, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,!=,17500000), genre.name),genre.name))", "score": -0.3659854198546269, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.39959601275118306, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.release_date,!=,17500000), genre.name),genre.name))", "score": -0.4059367569313759, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(has_genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.40979733998040274, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.4161139620388845, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), movie.original_language),genre.name))", "score": -0.423053188463125, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), oscar.category),genre.name))", "score": -0.42761230047750315, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "what are the genre names when the movie budget was not 17500000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,17500000), genre.name),genre.name))", "score": -0.4412344186803674, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,17500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 15, "beams": [{"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.013999342823808547, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.5835842971973761, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.title),movie.original_language))", "score": -0.6504750281092129, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),language.name))", "score": -0.6581441163070849, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6707643690148143, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.budget,=,48000000),movie.original_language), movie.original_language))", "score": -0.7167085733744898, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.title))", "score": -0.7568853496559313, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.7712786226984463, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,48000000), movie.original_language),movie.original_language))", "score": -0.773582707530295, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,48000000), movie.original_language),movie.original_language))", "score": -0.7744366036713473, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,48000000), movie.original_language),movie.original_language))", "score": -0.7761477338135592, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,48000000), movie.original_language),movie.original_language))", "score": -0.7956953154862276, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.original_language),movie.original_language))", "score": -0.7962804898488685, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.vote_average))", "score": -0.8323090075500659, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of the movies with a budget of 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),genre.name,=,48000000), movie.original_language),movie.original_language))", "score": -0.8334080683052889, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 16, "beams": [{"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.07712795850042993, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.17824786177023072, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,No Language), movie.id),movie.budget)", "score": -0.21317094985174126, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.budget),movie.budget)", "score": -0.30867501904565114, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.3196375882983557, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,=,No Language), movie.id),movie.budget)", "score": -0.31988033192255755, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,No Language), movie.id),movie.budget)", "score": -0.3380588646476994, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(spoken_language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.3534654659768884, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,No Language), movie.id),movie.budget)", "score": -0.37077606110540834, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.3786503972236853, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.3850642940104416, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.3938663009003781, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),spoken_language.movie_id,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.40268617890761427, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),has_genre.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)", "score": -0.40526297625120566, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the budgets from movies with No Language?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.budget),movie.budget)", "score": -0.4097949316728001, "correct_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,No Language), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 17, "beams": [{"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.04849129236788172, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.2150522867130821, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.27898043224677027, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.3144727390251697, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.335632755239554, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.3539864128387337, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.3586819242154534, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.37760846005722076, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.38807462300313167, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(spoken_language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.38852802225192606, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.3958778510495482, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),spoken_language.movie_id,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.4016255070772932, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.40738967780892105, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.id),movie.vote_average)", "score": -0.4219011984507053, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movies vote average from all movies with the language Bahasa indonesia?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia), movie.vote_average),movie.vote_average)", "score": -0.423863902237593, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Bahasa indonesia),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 18, "beams": [{"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.027431981790871845, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Rumored), company.name),company.name))", "score": -0.2103488424547968, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,=,Rumored),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.28410086711004917, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),production_company.company_id))", "score": -0.3852898390831255, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), movie.title),company.name))", "score": -0.3904138377770799, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),movie.title))", "score": -0.39811155527340725, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.40486236541859005, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.42306881698429666, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(production_company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.42397064501512144, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.movie_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.43434082349682823, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id), company.name),company.name))", "score": -0.43570616839641013, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,has_genre.movie_id), company.name),company.name))", "score": -0.44876952223712474, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(has_genre),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.44890106048246264, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4505285882300685, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(genre),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4550790121827496, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 19, "beams": [{"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.1849862660583317, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.2102148625351148, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.264906093720602, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.26694594361915175, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.2776582459629881, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.28638761914044153, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.2872849350784777, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.28961055091662247, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.29366608464318805, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.3102407599575345, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(person),person.birth_place,!=,Oxnard, Kalifornien),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.32272853465982076, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,crew.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.34622960957443905, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.3547283005002477, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.357124821033639, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}, {"orig_question": "Find the birth place of the movie personalities who were not born in Oxnard, Kalifornien.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))", "score": -0.36033292374745296, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Oxnard, Kalifornien), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 20, "beams": [{"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), keyword.name),person.name))", "score": -0.2621959544100639, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(keyword),has_keyword.movie_id,keyword.id),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(None),None,None),None,None), None),None))", "score": -0.2785761800688279, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evangelist),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.29722849939287777, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.2980458622289516, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),has_keyword.movie_id,has_keyword.keyword_id), person.name),person.name))", "score": -0.30371872350728135, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(keyword),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), keyword.name),person.name))", "score": -0.3205406542881675, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),has_keyword.movie_id,movie.id), person.name),person.name))", "score": -0.3281782746950667, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evangelist),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.movie_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,None), None),None))", "score": -0.3352119741284524, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evangelist),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,None), None),None))", "score": -0.3394505860337649, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))", "score": -0.3405190079000806, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),has_keyword.movie_id,has_keyword.keyword_id), keyword.name),person.name))", "score": -0.34074189204819677, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evangelist),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), keyword.name),person.name))", "score": -0.34095864481840554, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,evangelist),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.movie_id), keyword.name),person.name))", "score": -0.3414779029769163, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evangelist),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),has_keyword.movie_id,has_keyword.keyword_id), person.name),person.name))", "score": -0.34533229748532684, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}, {"orig_question": "Are there persons who won an oscar with the keyword name evangelist?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(keyword),has_keyword.movie_id,movie.id),keyword.name,=,evangelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),has_keyword.movie_id,None), None),None))", "score": -0.35478056015851794, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,evangelist), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 21, "beams": [{"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.18508704874835116, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(language),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.22094506392551366, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,None), None),None))", "score": -0.22944078896570727, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.26447887164477013, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,None), None),None))", "score": -0.264600021648344, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.27076297445587266, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,has_keyword.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.27679482396047084, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.28844542145166446, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.28933280079783325, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(movie),has_keyword.keyword_id,movie.id), movie.original_language),movie.original_language))", "score": -0.29151650299194803, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),has_keyword.movie_id,None), None),None))", "score": -0.29335667261478465, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.295936115898692, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.31095354085823945, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing),merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),has_keyword.movie_id,has_keyword.keyword_id),getData(spoken_language),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.31188280894080056, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,suicide bombing),merge(getData(spoken_language),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.3147769637050001, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 22, "beams": [{"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.06369123175770709, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,!=,5.1), keyword.name),keyword.name))", "score": -0.1742599671749039, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.211677172125003, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>=,5.1), keyword.name),keyword.name))", "score": -0.2587991213379245, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),oscar.number))", "score": -0.29319752495361945, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,<,5.1), keyword.name),keyword.name))", "score": -0.3248568760469867, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_average,!=,5.1), keyword.name),keyword.name))", "score": -0.3499174067518511, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), oscar.number),keyword.name))", "score": -0.36666718531942516, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),company.name))", "score": -0.38547929097703315, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(oscar),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.3868914886402086, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,keyword.id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.3987285604224049, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,!=,5.1), keyword.name),oscar.number))", "score": -0.40376626037081625, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(has_keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.4068594132908419, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.movie_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))", "score": -0.4071379700811359, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are there with a movie vote average bigger than 5.1?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,>,5.1), keyword.name),keyword.name))", "score": -0.4087291277495711, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,5.1), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 23, "beams": [{"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.045821826967859504, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(language),language.name,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))", "score": -0.21563917262942262, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.24348953882649943, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Espa\u00f1ol), movie.title),movie.title))", "score": -0.26203995427519833, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.2809647085448506, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.3288382301389223, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Espa\u00f1ol),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.34018721488102627, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.34443549085190794, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(oscar_winner),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.3756361068607462, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),country.iso_3166_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.38123023537908085, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))", "score": -0.3903433129675681, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(country),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.3970075127322624, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),person.id,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.3985294515301258, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.40767619819574874, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies that were translated in Espa\u00f1ol ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),language.name,=,Espa\u00f1ol),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.4111555002662709, "correct_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Espa\u00f1ol), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 24, "beams": [{"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.title,=,Joanna Foley), movie.title),movie.title))", "score": -0.14765615604628837, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "score": -0.2034173308622794, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),crew.movie_id,movie.id),movie.title,=,Joanna Foley), movie.title),movie.title))", "score": -0.23874335921254336, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.original_language,=,Joanna Foley), movie.title),movie.title))", "score": -0.2477980943860704, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.name,=,Joanna Foley),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.2579140632884655, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),oscar.category,=,Joanna Foley), movie.title),movie.title))", "score": -0.30531972796891876, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),country.name,=,Joanna Foley),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.31849029731359985, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),crew.movie_id,movie.id),movie.title,=,Joanna Foley), movie.title),movie.title))", "score": -0.32315828390205736, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),oscar.category,=,Joanna Foley), movie.title),movie.title))", "score": -0.32638198930530343, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),crew.movie_id,movie.id),oscar.category,=,Joanna Foley), movie.title),movie.title))", "score": -0.3272427354321164, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,Joanna Foley),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.3342471238597925, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,=,Joanna Foley), movie.title),movie.title))", "score": -0.3347936943312175, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),crew.movie_id,movie.id),movie.original_language,=,Joanna Foley), movie.title),movie.title))", "score": -0.34879384294298904, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),crew.movie_id,movie.id),country.name,=,Joanna Foley), movie.title),movie.title))", "score": -0.35389949642232865, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "In how many movies has Joanna Foley worked as crew?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.movie_id),crew.movie_id,movie.id),oscar.sub_category,=,Joanna Foley), movie.title),movie.title))", "score": -0.3739088797682643, "correct_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Joanna Foley),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 25, "beams": [{"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.046849368253927694, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime)", "score": -0.49657719778843973, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime))", "score": -0.5066886100539705, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.vote_average)", "score": -0.5711831192431184, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.status),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.6207116529655977, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.title)", "score": -0.7124798538621071, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.vote_count)", "score": -0.7223987288061516, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.runtime)", "score": -0.7290962640028062, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),oscar.year)", "score": -0.7663852243282182, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.runtime)", "score": -0.7924464869374275, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), oscar.id),movie.runtime)", "score": -0.8006580176317941, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.title))", "score": -0.842047899364843, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.status)", "score": -0.8556865668601463, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime))", "score": -0.8557588609255617, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie run time of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),oscar.number)", "score": -0.8857894652044986, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 26, "beams": [{"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.1), language.name),language.name))", "score": -0.10685044829984372, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,6.1), language.name),language.name))", "score": -0.1521849436237254, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,<=,6.1),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.17403894941148293, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,<,6.1),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.1999751964397256, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_average,<,6.1), language.name),language.name))", "score": -0.2884455958183916, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.1), movie.original_language),language.name))", "score": -0.29650297053782665, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_average,<=,6.1), language.name),language.name))", "score": -0.3094690637577959, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.1), language.name),genre.name))", "score": -0.3371781977569026, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,6.1), movie.original_language),language.name))", "score": -0.3418374658617083, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.1), language.name),movie.original_language))", "score": -0.3448400747144377, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,=,6.1), language.name),language.name))", "score": -0.3735146737488473, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,>=,6.1), language.name),language.name))", "score": -0.37729312390841696, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,6.1), language.name),genre.name))", "score": -0.3825126930807843, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<,6.1), language.name),movie.original_language))", "score": -0.3901745700383194, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "What are the spoken languages of movies with a vote average of at most 6.1?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,<=,6.1), language.name),language.name))", "score": -0.39532005380789453, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,<=,6.1),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 27, "beams": [{"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.0630856777549941, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,549),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.1566062515575664, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.3009571755479362, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.33163402724813984, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.keyword_id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.34568966001988355, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),company.name))", "score": -0.3477815790354702, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),oscar.number))", "score": -0.34966733088414, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(has_keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.3612579026584727, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,!=,549), keyword.name),keyword.name))", "score": -0.36447782546847524, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,keyword.id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.3710401891499335, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,!=,549),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.37942329267575237, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,549), keyword.name),keyword.name))", "score": -0.38641021672600817, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,>,549), keyword.name),keyword.name))", "score": -0.39107120012631436, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.keyword_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_count,>,549), keyword.name),keyword.name))", "score": -0.40567122919439447, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there movies with keywords and a vote count over 549?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,549), keyword.name),movie.title))", "score": -0.40649073868946156, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,549),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 28, "beams": [{"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.23141499444553287, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.23479905566787512, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.25078917378116156, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.2541732350035038, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,oscar.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.2733513894279351, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar.id),person.id,oscar_winner.person_id),person.gender,!=,m), person.birth_day),person.birth_day))", "score": -0.2927255687635637, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.2948853164448032, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.2982129598122345, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.3041552285263393, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.3074828718937706, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,movie.id), person.birth_day),person.birth_day))", "score": -0.3448675003504378, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.birth_day),person.birth_day))", "score": -0.36892941166562937, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar.id),person.id,oscar_winner.person_id),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.3754085991159903, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,oscar.id),person.id,oscar_winner.person_id),person.gender,!=,m),person.birth_day), person.birth_day))", "score": -0.3787362424834216, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}, {"orig_question": "Is there any birthday for persons who won the oscar and have a gender other than m with a oscar number less than 76?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))", "score": -0.3929993440163251, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),filter(getData(person),person.gender,!=,m),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,76), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 29, "beams": [{"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), oscar.year),oscar.year))", "score": -0.141535960908408, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.year),oscar.year))", "score": -0.16849050259376958, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.popularity,<=,127.085), oscar.year),oscar.year))", "score": -0.2031200995217257, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.popularity,>=,127.085), oscar.year),oscar.year))", "score": -0.225059025238308, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,oscar.id),movie.popularity,<=,127.085), oscar.year),oscar.year))", "score": -0.22635962624692627, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,oscar.id),movie.popularity,>=,127.085), oscar.year),oscar.year))", "score": -0.24829855196350858, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), oscar.year),oscar.year))", "score": -0.2564104596098912, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.year),oscar.year))", "score": -0.2833650012952527, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), oscar.year),movie.vote_average))", "score": -0.3263707992648232, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), oscar.sub_category),oscar.year))", "score": -0.3349776808297937, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.year),movie.vote_average))", "score": -0.35332534095018475, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), oscar.year),oscar.year))", "score": -0.35726476972350635, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.sub_category),oscar.year))", "score": -0.3619322225151552, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,>=,127.085), movie.vote_average),oscar.year))", "score": -0.3815448497991723, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.year),oscar.year))", "score": -0.3842193490650726, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 30, "beams": [{"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)", "score": -0.016787915606522714, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.vote_average),movie.vote_average)", "score": -0.48898612044143364, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),getData(movie),movie.id,movie.id), movie.id),movie.vote_average)", "score": -0.725245069102338, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.runtime)", "score": -0.7515898483097383, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_count)", "score": -0.7632444075036476, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,Illuminata), movie.id),movie.vote_average)", "score": -0.783092507523048, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),getData(movie),movie.id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.8006518458972388, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id), movie.id),movie.vote_average)", "score": -0.8411972165895999, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.id), movie.id),movie.vote_average)", "score": -0.8425535375582643, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.vote_count),movie.vote_average)", "score": -0.8454056968112008, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,cast.movie_id), movie.id),movie.vote_average)", "score": -0.8497366245305125, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,=,Illuminata),getData(movie),movie.id,cast.movie_id), movie.id),movie.vote_average)", "score": -0.8502171249302695, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),company.name,=,Illuminata), movie.id),movie.vote_average)", "score": -0.8672807634870171, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.runtime),movie.vote_average)", "score": -0.8697363064198885, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies with the title Illuminata?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.revenue),movie.vote_average)", "score": -0.875812702751379, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Illuminata), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 31, "beams": [{"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.36699147459447884, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.3927010122414944, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4046249551656601, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4141851389258021, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.41576335267744435, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,oscar_winner.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.43033449281267566, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,crew.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4350944953168095, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.43989467657281767, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,has_genre.genre_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.44092941554046733, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4414728903244599, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),person.gender,=,Mother and Child), movie.id),movie.runtime)", "score": -0.44589764342807325, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.4518186194969834, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.45821995531977083, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.45968192245105366, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}, {"orig_question": "What is the total duration of Mother and Child?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),person.id,crew.person_id),language.name,=,Mother and Child), movie.id),movie.runtime)", "score": -0.460803987594864, "correct_code": "sum(distinct(filter(getData(movie),movie.title,=,Mother and Child), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 32, "beams": [{"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.05933279021189628, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1448),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.13440302107729046, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,!=,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.22236727325485123, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,!=,1448),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3614802376600746, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>=,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.36963207760678224, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),oscar.number))", "score": -0.3708968631345974, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),company.name))", "score": -0.3778138383413555, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1448),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.4042085650547261, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.4071323845420048, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,has_keyword.movie_id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.41732732540610235, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))", "score": -0.41787193756369023, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(has_keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.4197539546428095, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.42706559013297596, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),production_company.company_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.42818054023790536, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1448),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),oscar.number))", "score": -0.42890641054110085, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 33, "beams": [{"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))", "score": -0.04865610099295736, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.revenue),movie.revenue))", "score": -0.17563105246881605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Released), movie.revenue),movie.revenue))", "score": -0.6002911838040745, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Released), movie.revenue),movie.revenue))", "score": -0.6904199036107457, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Released), movie.revenue),movie.revenue))", "score": -0.6923789890752232, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,Released), movie.revenue),movie.revenue))", "score": -0.7302104338341451, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.budget),movie.revenue))", "score": -0.7387287592318899, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))", "score": -0.7911256614606827, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<=,Released), movie.revenue),movie.revenue))", "score": -0.7918383582764363, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.budget))", "score": -0.7982512830094493, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.revenue),movie.revenue))", "score": -0.8498982104938477, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,Released), movie.revenue),movie.revenue))", "score": -0.8571853853100038, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.budget),movie.revenue))", "score": -0.8657037107077485, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.revenue))", "score": -0.8735314433033636, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.homepage,=,Released), movie.revenue),movie.revenue))", "score": -0.8755066157355031, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 34, "beams": [{"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.06287747302485514, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.20293306612802553, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.40797191166711855, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.523317091701756, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.homepage,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.5684611132128339, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.tagline,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.5783364703638654, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Fast Five), movie.original_language),movie.title))", "score": -0.7019232372513216, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Fast Five), movie.title),movie.original_language))", "score": -0.7071179440936248, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.category,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.7249048283083539, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.sub_category,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.7268641521914105, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.7285712888224225, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,Fast Five), movie.original_language),movie.original_language))", "score": -0.7369561895720835, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.741335452086787, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.7438703415209602, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),keyword.name,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.7461436475387018, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 35, "beams": [{"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.id),movie.runtime)", "score": -0.06055468374852783, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)", "score": -0.45426395569523437, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.runtime),movie.runtime)", "score": -0.6176101303787749, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.vote_average,=,7.2), movie.id),movie.runtime)", "score": -0.7131429857331879, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,7.2), movie.id),movie.runtime)", "score": -0.7410496771174332, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.runtime),movie.runtime))", "score": -0.7700581955650705, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,7.2), movie.id),movie.runtime)", "score": -0.7900985224742321, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,7.2), movie.id),movie.runtime)", "score": -0.7916766163036308, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(filter(getData(movie),movie.status,=,7.2),movie.runtime)", "score": -0.9042942587238741, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.release_date),movie.runtime)", "score": -0.9227172586174232, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.id),movie.vote_average)", "score": -0.9228628712285007, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),spoken_language.movie_id,=,7.2), movie.id),movie.runtime)", "score": -0.9350458620179743, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,7.2), movie.id),movie.id)", "score": -0.9753597499413874, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.revenue,=,7.2), movie.id),movie.runtime)", "score": -0.9781421978604635, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}, {"orig_question": "What is the average runtime of movies with a rating of 7.2?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,7.2), movie.id),movie.runtime)", "score": -0.9859227978513836, "correct_code": "avg(filter(getData(movie),movie.vote_average,=,7.2),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 36, "beams": [{"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))", "score": -0.04776149049939704, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.revenue))", "score": -0.32267460592629504, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_place))", "score": -0.45886192091347766, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.budget))", "score": -0.47215134271027637, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.birth_day))", "score": -0.5001294053399761, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),oscar_nominee.person_id))", "score": -0.5633447802865703, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,m), person.death_day),person.death_day))", "score": -0.5814788371098984, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), movie.budget),person.death_day))", "score": -0.5884877642856736, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_day))", "score": -0.6120113333927293, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.name))", "score": -0.6126284039819438, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), movie.revenue),person.death_day))", "score": -0.635032554553618, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),movie.release_date))", "score": -0.65434033044221, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,m), person.death_day),person.death_day))", "score": -0.670542290830781, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),cast.person_id))", "score": -0.7203146851861675, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}, {"orig_question": "Find the date of death of the male personalties.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_day),person.death_day))", "score": -0.7245415052639146, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 37, "beams": [{"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.09472125734597765, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.1093077709969433, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,cs),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.21006754672721606, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.3053668722566043, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),production_company.company_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.35892204268000133, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,spoken_language.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.3702060494773816, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,cs), keyword.name),keyword.name))", "score": -0.38550248060366293, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.status,!=,cs), keyword.name),keyword.name))", "score": -0.3875358802158562, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.3884070082232759, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.status,!=,cs), keyword.name),keyword.name))", "score": -0.3893944707552684, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,!=,cs), keyword.name),company.name))", "score": -0.3963977075770116, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.40033858489635743, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,company.id),movie.original_language,!=,cs), keyword.name),keyword.name))", "score": -0.40270833997355565, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),company.name))", "score": -0.4074792091630603, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}, {"orig_question": "Which keywords are assigned to movies in which the original language is not cs?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,!=,cs), keyword.name),keyword.name))", "score": -0.4082618610924773, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,!=,cs), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 38, "beams": [{"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.18416839725472042, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.20684060561326117, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.23214086862642624, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.25481307698496697, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.25691125302146817, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.movie_id), country.name),country.name))", "score": -0.27457242622253497, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(company),getData(production_country),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.name,=,Rainbow Film Company, The), country.name),country.name))", "score": -0.2775388518373443, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.2795834613800089, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id),company.name,=,Rainbow Film Company, The), country.name),country.name))", "score": -0.2829711172932867, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2877958005626583, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_country.movie_id), country.name),country.name))", "score": -0.2972446345810757, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_country),company.id,production_company.company_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.name,=,Rainbow Film Company, The), country.name),country.name))", "score": -0.30256481933121443, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_country),company.id,production_company.company_id),company.name,=,Rainbow Film Company, The),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.304883710502027, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(company),getData(production_country),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id),company.name,=,Rainbow Film Company, The), country.name),country.name))", "score": -0.3101250625678948, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}, {"orig_question": "In which country does Rainbow Film Company, The produce their movies?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.name,=,Rainbow Film Company, The), country.name),country.name))", "score": -0.32886784665343327, "correct_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Rainbow Film Company, The),merge(merge(merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),company.id,production_company.company_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 39, "beams": [{"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.09095059054012537, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.16566910910138252, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.22675184534851398, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(filter(getData(person),person.birth_day,=,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.2503521390528528, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), person.birth_day),movie.runtime)", "score": -0.3360902086502866, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(filter(getData(person),person.birth_day,<=,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.36097525408980485, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<=,1962-03-17), movie.id),movie.runtime)", "score": -0.3697805348962849, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.runtime),movie.runtime)", "score": -0.38538298212082117, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.release_date),movie.runtime)", "score": -0.39274391456957797, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)", "score": -0.3986805648790453, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(merge(filter(getData(person),person.birth_day,<,1962-03-17),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.4043334572835821, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,=,1962-03-17), movie.id),movie.runtime)", "score": -0.40673407992253424, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,<=,1962-03-17), movie.id),movie.runtime)", "score": -0.424075693346706, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.44863455707142325, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}, {"orig_question": "What is the average movie runtime of all movies having crew members with birthday before 1962-03-17?", "inferred_code": "avg(distinct(filter(merge(filter(getData(person),person.birth_day,<,1962-03-17),getData(crew),person.id,crew.person_id),person.birth_day,<,1962-03-17), movie.id),movie.runtime)", "score": -0.4564968700692331, "correct_code": "avg(distinct(merge(filter(getData(person),person.birth_day,<,1962-03-17),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 40, "beams": [{"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.18030385996826226, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.name),person.birth_day))", "score": -0.3051726701451116, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.43211822162993485, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_place))", "score": -0.44687610443361336, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),oscar.year))", "score": -0.46044963176973397, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),movie.release_date))", "score": -0.5002245264840894, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.name))", "score": -0.5118341999841505, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.522943291325646, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), oscar.year),person.birth_day))", "score": -0.5342755797100835, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),oscar.category,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.5414339746130281, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.death_day))", "score": -0.5489488201928907, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,M\u00e4nnedorf, Schweiz), person.name),person.birth_day))", "score": -0.5569870318067842, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.5775277346666471, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.5837010539615475, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the persons whos deathplace is M\u00e4nnedorf, Schweiz?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_day),person.birth_day))", "score": -0.5845804494159629, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,M\u00e4nnedorf, Schweiz), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 41, "beams": [{"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))", "score": -0.08096994841980631, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))", "score": -0.22983950656998786, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,1045), movie.vote_average),movie.vote_average))", "score": -0.43152488964187796, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,1045), movie.vote_average),movie.vote_average))", "score": -0.4625345041094988, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1045), movie.vote_average),movie.vote_average))", "score": -0.5277280082045763, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,<,1045), movie.vote_average),movie.vote_average))", "score": -0.5877460939918819, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,1045), movie.vote_average),movie.vote_average))", "score": -0.639315883639938, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1045), movie.vote_average),movie.vote_average))", "score": -0.6500934464966122, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,1045), movie.vote_average),movie.vote_average))", "score": -0.7168705899784982, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.revenue),movie.vote_average))", "score": -0.7203962397870782, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.popularity),movie.vote_average))", "score": -0.7743112718271732, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,1045), movie.vote_average),movie.vote_average))", "score": -0.7907358248303353, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_count))", "score": -0.7938151273228868, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,1045), movie.vote_average),movie.vote_average))", "score": -0.7958404411729134, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}, {"orig_question": "What ratings did movies with at most 1045 votes get?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.revenue),movie.vote_average))", "score": -0.8014091676268436, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1045), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 42, "beams": [{"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.original_language),movie.original_language))", "score": -0.18592157596140169, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.original_language))", "score": -0.3644544073322322, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.original_language),movie.title))", "score": -0.3713240885117557, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.original_language,!=,tr),movie.original_language), movie.original_language))", "score": -0.37481359286175575, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.original_language),movie.status))", "score": -0.37800821298151277, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.original_language))", "score": -0.3853446985707888, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.status),movie.original_language))", "score": -0.4396313168981578, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.original_language))", "score": -0.4454443468090673, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.original_language))", "score": -0.45154264068470396, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.status))", "score": -0.4526941275528866, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.popularity),movie.original_language))", "score": -0.4538898006546681, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,tr), movie.original_language),movie.original_language))", "score": -0.4566659378934041, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,language.iso_639_1),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.original_language))", "score": -0.4707153748307305, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), movie.original_language),movie.original_language))", "score": -0.48215339162892396, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}, {"orig_question": "Does there exist movies whose original language is not tr?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,tr), language.name),movie.original_language))", "score": -0.5075726145366142, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,tr), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 43, "beams": [{"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<,132), country.name),country.name))", "score": -0.02725411009492135, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,132),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3138902775370647, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.runtime,<,132), country.name),country.name))", "score": -0.33140301838811753, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,>,132), country.name),country.name))", "score": -0.33282042456329886, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<,132), person.birth_place),country.name))", "score": -0.3375293789226592, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.35003865753535446, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.runtime,<,132), country.name),country.name))", "score": -0.3575217310978989, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<=,132), country.name),country.name))", "score": -0.38708792412041493, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id),movie.runtime,<,132), country.name),country.name))", "score": -0.3939015942366282, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<,132), country.name),person.birth_place))", "score": -0.3976000116708038, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,132), country.name),country.name))", "score": -0.40127352146376316, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,<,132), country.name),country.name))", "score": -0.40892208432254323, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.iso_3166_1),movie.runtime,<,132), country.name),country.name))", "score": -0.41591265567408986, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<,132), genre.name),country.name))", "score": -0.418447609628804, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Is there any production country where a movie has been produced with a runtime less than 132?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,<,132), country.name),movie.status))", "score": -0.42160166896796303, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,132),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 44, "beams": [{"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.026569656548613717, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,=,7.1),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.20999709942247136, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3210326173437046, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.34863789163875675, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4067407370621398, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,genre.id), genre.name),genre.name))", "score": -0.4155506499934825, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(has_genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.42114903933906633, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),company.name))", "score": -0.4268258282106077, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4322598211919277, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.movie_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.44032360707922175, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.genre_id), genre.name),genre.name))", "score": -0.4455787531277275, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,has_genre.movie_id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.44739788616638904, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),person.death_place))", "score": -0.44851190358804266, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,company.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4610684175118287, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), person.death_place),genre.name))", "score": -0.46394306227450155, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 45, "beams": [{"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.15190646870452712, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.1564249651795395, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.22809838526406506, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.23261688173907744, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.person_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.24091584630321675, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.person_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.24543434277822912, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.person_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.3171077628627547, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.3175196877610728, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.person_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.32162625933776706, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.341335737194841, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,>,127869379), person.birth_day),person.birth_day))", "score": -0.3523323319802535, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,>,127869379), person.birth_day),person.birth_day))", "score": -0.35685082845526583, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), movie.release_date),person.birth_day))", "score": -0.36124161889597733, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),crew.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), person.birth_day),person.birth_day))", "score": -0.3633678285929609, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}, {"orig_question": "Is there a birthday for a male oscar nominee that starred in a movie with a revenue smaller than 127869378?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.revenue,<,127869379), movie.release_date),person.birth_day))", "score": -0.3657601153709897, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,f),movie.id,oscar_nominee.movie_id),movie.revenue,<=,127869379), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 46, "beams": [{"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.category))", "score": -0.20326901327828484, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.category))", "score": -0.2482403477339824, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.category))", "score": -0.25402674634151584, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.number))", "score": -0.2777282792571441, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.category))", "score": -0.2989980807972134, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.number))", "score": -0.3226996137128417, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.number))", "score": -0.3284860123203751, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), person.birth_place),oscar.category))", "score": -0.3586802922859226, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien),oscar.category), oscar.category))", "score": -0.3678831773527701, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.sub_category),oscar.category))", "score": -0.37344237511210165, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.category),oscar.number))", "score": -0.37345734677607273, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien),person.name), oscar.category))", "score": -0.3785780711020905, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.year),oscar.category))", "score": -0.38040145438584627, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien),person.birth_place), oscar.category))", "score": -0.3823966406251524, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}, {"orig_question": "Are there any oscar number where the persons death place is not Rancho Mirage, Kalifornien?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.category))", "score": -0.3973993765806388, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_place,!=,Rancho Mirage, Kalifornien), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 47, "beams": [{"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), language.name),language.name))", "score": -0.08576901716047475, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), movie.original_language),language.name))", "score": -0.11736506706622063, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), language.name),movie.original_language))", "score": -0.20882921277745684, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), movie.original_language),movie.original_language))", "score": -0.2404252626832027, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3431786916377122, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_genre.movie_id),movie.title,!=,The Road), language.name),language.name))", "score": -0.34633006837896013, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), language.name),genre.name))", "score": -0.36373311429815564, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_genre.movie_id),movie.title,!=,The Road), movie.original_language),language.name))", "score": -0.377926118284706, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,!=,The Road), movie.original_language),genre.name))", "score": -0.3953291642039015, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,>,The Road), language.name),language.name))", "score": -0.39900694825297717, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.title,!=,The Road), movie.original_language),language.name))", "score": -0.40102481878207746, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,production_country.movie_id),movie.title,!=,The Road), language.name),language.name))", "score": -0.4022515879312178, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_keyword.movie_id),movie.title,!=,The Road), language.name),language.name))", "score": -0.4096795534054944, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.title,!=,The Road), language.name),language.name))", "score": -0.4173150479864697, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "are there any language of movies where the movie title was not The Road?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,spoken_language.movie_id),movie.id,spoken_language.movie_id),movie.title,!=,The Road), language.name),language.name))", "score": -0.41829732121311075, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,The Road),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 48, "beams": [{"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.revenue),movie.revenue))", "score": -0.18623838943855658, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.vote_average),movie.revenue))", "score": -0.20810035916317518, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,=,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.221987496891352, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.23888444729587122, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,=,1962-06-30),movie.revenue),movie.revenue))", "score": -0.2648939511477344, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.revenue),movie.revenue))", "score": -0.2817909015522536, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.revenue))", "score": -0.29052109043395136, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,<,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.revenue),movie.revenue))", "score": -0.29308652570194377, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.3136896408915912, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,<,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.vote_average),movie.revenue))", "score": -0.3149484954265624, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.vote_count),movie.revenue))", "score": -0.3280626962189645, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,>,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.34006355048146414, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1962-06-30),movie.revenue),movie.revenue))", "score": -0.3565960951479736, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.birth_day,!=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.revenue),movie.revenue))", "score": -0.3733939029932644, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.death_day,=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.revenue),movie.revenue))", "score": -0.3748414241146273, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 49, "beams": [{"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.020399174803835116, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,187),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.27830350733899156, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.356683938069385, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.38107254166566795, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.38708648663423084, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,genre.id), genre.name),genre.name))", "score": -0.40662916431152846, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(has_genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4224311362437975, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.genre_id), genre.name),genre.name))", "score": -0.42539846981613083, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),person.death_place))", "score": -0.4323705850587951, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,production_company.movie_id), genre.name),genre.name))", "score": -0.4425219953892064, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,has_genre.movie_id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.44822649535102654, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.movie_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4515188749287419, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4523120203691732, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.name),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4585723912568266, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}, {"orig_question": "Are there no genres with movies having a runtime of less than 187?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,187),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.id),genre.name))", "score": -0.462722004712624, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,<,187), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 50, "beams": [{"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.04783245870871191, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Horror), movie.revenue),movie.revenue)", "score": -0.175437484282519, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(merge(filter(getData(genre),genre.name,!=,Horror),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.id),movie.revenue)", "score": -0.24263369589938635, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.25045382687662576, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.revenue),movie.revenue)", "score": -0.28082068799520715, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.32224033747351843, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(merge(filter(getData(genre),genre.name,!=,Horror),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.revenue),movie.revenue)", "score": -0.36766815357150534, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),genre.id,movie.id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.3738196919810333, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.408257561862194, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),person.death_place,!=,Horror), movie.id),movie.revenue)", "score": -0.4168279195158646, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,!=,Horror), movie.revenue),movie.revenue)", "score": -0.4332543343854078, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,Horror), movie.id),movie.revenue)", "score": -0.4366854660169726, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),oscar.category,!=,Horror), movie.id),movie.revenue)", "score": -0.4478126695882945, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.genre_id,movie.id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.4530404673378866, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of revenues of all movies that are not from the genre Horror?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,Horror), movie.id),movie.revenue)", "score": -0.45466833940225126, "correct_code": "sum(distinct(merge(merge(filter(getData(genre),genre.name,!=,Horror),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 51, "beams": [{"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.09470187125668189, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.0978732540734468, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.status,=,Rumored), keyword.name),keyword.name))", "score": -0.20450415084401338, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3296669662113694, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.3653437955352115, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),company.name))", "score": -0.37183563575264045, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,spoken_language.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3859072550012238, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),company.name))", "score": -0.386706723361437, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,production_company.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.39019712072191787, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,production_country.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.4042689520256813, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.41650305310957514, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),person.death_place))", "score": -0.426584697291164, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),country.name,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.4307508967130457, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),oscar.number))", "score": -0.430911244585369, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names if the movie status is Rumored ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.status,!=,Rumored),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.43322957063178924, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 52, "beams": [{"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.02077572281996254, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.37205388630850017, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), language.name),movie.original_language))", "score": -0.3725877715484709, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), movie.original_language),language.name))", "score": -0.5362027615354106, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), language.name),language.name))", "score": -0.5367366467753814, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.544320276454144, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.5604073879909265, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.vote_count,>,950), language.name),movie.original_language))", "score": -0.5609412732308972, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),language.name))", "score": -0.5771725822851295, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.5816532036361429, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,>,950), language.name),movie.original_language))", "score": -0.5821870888761136, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.6183733538132823, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.6206769394737897, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,>,950), movie.original_language),movie.original_language))", "score": -0.6446245162592464, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,>,950), language.name),movie.original_language))", "score": -0.6451584014992171, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 53, "beams": [{"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_count),oscar.number))", "score": -0.1725241768978382, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.vote_count),oscar.number))", "score": -0.17818664229052014, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_average),oscar.number))", "score": -0.2448944759968051, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.vote_average),oscar.number))", "score": -0.2505569413894871, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(movie),movie.vote_count,>,1952),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))", "score": -0.2918225214906234, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.revenue),oscar.number))", "score": -0.2934565998084581, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.revenue),oscar.number))", "score": -0.29911906520114007, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(movie),movie.vote_count,>,1952),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))", "score": -0.3005950527000307, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_count),oscar.number))", "score": -0.3069430262524505, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.vote_count),oscar.number))", "score": -0.314560125882295, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_count),movie.vote_count))", "score": -0.3246023003341991, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1952),movie.vote_count),movie.vote_count))", "score": -0.33026476572688107, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_average),movie.vote_count))", "score": -0.396972599433166, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.vote_average),oscar.number))", "score": -0.39703291745643365, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}, {"orig_question": "For which oscar edition after 1952 was the movie with the highest vote count nominated?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1952),movie.runtime),oscar.number))", "score": -0.4013137517971141, "correct_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),filter(getData(oscar),oscar.year,>,1952),oscar_nominee.oscar_id,oscar.id),movie.vote_count),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 54, "beams": [{"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),country.name))", "score": -0.055351277538683526, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.revenue,<,30127963),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,30127963), country.name),country.name))", "score": -0.22493025209903647, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),country.name))", "score": -0.27166551903363245, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,30127963), country.name),country.name))", "score": -0.27280258650982325, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,30127963), country.name),country.name))", "score": -0.2811875680953505, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),country.name))", "score": -0.28149653718431294, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),country.name))", "score": -0.2951303883251229, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.popularity,<,30127963), country.name),country.name))", "score": -0.30326615361026793, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.33749725329781644, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,30127963),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.33874158268946386, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,<,30127963), country.name),country.name))", "score": -0.342317852945951, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<=,30127963), country.name),country.name))", "score": -0.37188631530856736, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_average,<,30127963), country.name),country.name))", "score": -0.38037487914021095, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.revenue,<,30127963), country.name),country.name))", "score": -0.38531299960882914, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,=,30127963), country.name),country.name))", "score": -0.41682204070037804, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 55, "beams": [{"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.013069253102003131, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,ja), movie.runtime),movie.runtime))", "score": -0.425687957993037, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.4433621679035173, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,ja), movie.runtime),movie.runtime))", "score": -0.5553197195264987, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,ja), movie.runtime),movie.runtime))", "score": -0.5639139873704331, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.572993929436979, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.5815881972809134, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ja),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.vote_average),movie.runtime))", "score": -0.6017753381241876, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ja),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.runtime),movie.runtime))", "score": -0.6020357640056905, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))", "score": -0.6089921870516264, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.title))", "score": -0.6253845551182167, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,=,ja), movie.runtime),movie.runtime))", "score": -0.636899036315011, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,ja), movie.runtime),movie.runtime))", "score": -0.6429350868347683, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity,=,ja), movie.runtime),movie.runtime))", "score": -0.6589491630191174, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with the original language \"ja\"?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.release_date))", "score": -0.7081453063656227, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,ja), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 56, "beams": [{"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.03385427076569686, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))", "score": -0.25208346285531097, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.budget))", "score": -0.2776865680018259, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,Fantasy),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))", "score": -0.3439558947978082, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.popularity),movie.budget))", "score": -0.35321885417857474, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.title))", "score": -0.3693824372600745, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fantasy),movie.vote_average),movie.budget))", "score": -0.3747045299393423, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),has_genre.movie_id,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.3924933896431954, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.425461934281947, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(has_genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.4255707166197503, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),genre.id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.44517009286531106, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,Fantasy),movie.revenue),movie.budget))", "score": -0.4505308756335959, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.name,has_genre.genre_id),movie.vote_average),movie.budget))", "score": -0.45078831332501623, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.vote_average),movie.original_language))", "score": -0.4538386946110736, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}, {"orig_question": "What is the movie budget for the movie with the maximum vote average in the genre Fantasy?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,Fantasy),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.movie_id),movie.vote_average),movie.budget))", "score": -0.45462730026376885, "correct_code": "done(extractValues(max(merge(merge(filter(getData(genre),genre.name,=,Fantasy),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.vote_average),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 57, "beams": [{"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "score": -0.07745345849252772, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,105000000), movie.original_language),movie.original_language))", "score": -0.2729067074105842, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,105000000), movie.original_language),movie.original_language))", "score": -0.28802584279037546, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,105000000), movie.original_language),movie.original_language))", "score": -0.3476115630910499, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,105000000), movie.original_language),movie.original_language))", "score": -0.4697106944367988, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,105000000), movie.original_language),movie.original_language))", "score": -0.5581373440072639, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,null,105000000), movie.original_language),movie.original_language))", "score": -0.6709254847810371, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.title),movie.original_language))", "score": -0.7225486946263118, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.title))", "score": -0.7478045375755755, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.vote_average),movie.original_language))", "score": -0.7831333589710994, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>,105000000), movie.original_language),movie.original_language))", "score": -0.7981778356916038, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,105000000), movie.original_language),movie.original_language))", "score": -0.8290741417295067, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))", "score": -0.8361172121003619, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.popularity),movie.original_language))", "score": -0.8465162229695125, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of movies with a budget greater than 105000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,105000000), movie.original_language),movie.original_language))", "score": -0.8576521251088707, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,105000000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 58, "beams": [{"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.049164355790708214, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.343522894625058, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.44417132023954764, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,oscar_winner.person_id),getData(person),cast.person_id,person.id),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.46190892523190497, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.4703391432663342, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.47809939650485744, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.5385618999315408, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.5561412693678999, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.birth_place))", "score": -0.5579553340212442, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.5615193662815727, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.birth_place),person.death_place))", "score": -0.5813899990753271, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.5895367083721794, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),company.name))", "score": -0.5977929328219034, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))", "score": -0.6059115304087754, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}, {"orig_question": "Where did people die who weren't born in Milton, Ontario? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_place,!=,Milton, Ontario), person.death_place),person.birth_place))", "score": -0.6360330617088936, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Milton, Ontario), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 59, "beams": [{"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.057523542693217376, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.2627402953444065, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.49091270621000005, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),genre.name,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.537082195035656, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.5642165252809478, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(cast),person.id,has_genre.genre_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.6430654438061415, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),company.name,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.6526823070126598, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),person.id,has_genre.genre_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.686860958711785, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(has_genre),person.id,has_genre.genre_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.6926987370427541, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(person),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.7004289277968473, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(movie),cast.movie_id,movie.id),person.id,has_genre.genre_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.7005129873374639, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(crew),person.id,has_genre.genre_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.7011227907889989, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(cast),person.id,cast.person_id),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.7025595345306446, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,=,2008-11-17), movie.id),movie.vote_average)", "score": -0.7912428865584044, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the vote average for movies released on November 17th 2008? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.popularity)", "score": -0.8352823212682685, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2008-11-17), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 60, "beams": [{"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.09408325086405966, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.2876388586036324, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.2987090329586572, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.34539351321125195, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.3643581414495878, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Belgium), person.birth_day),person.birth_day))", "score": -0.42127450126281474, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.42211279605720725, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Belgium), person.death_day),person.birth_day))", "score": -0.42769730593136046, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.4404032858001301, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.4452643955444538, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,<,Belgium), person.birth_day),person.birth_day))", "score": -0.4528096796857426, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,movie.id),person.death_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.45405161098967434, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,=,Belgium), person.birth_day),person.birth_day))", "score": -0.48768250254145923, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Belgium), person.birth_day),movie.release_date))", "score": -0.4985743643628666, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,Belgium), person.birth_day),movie.release_date))", "score": -0.5147693830818342, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 61, "beams": [{"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.15235573343670694, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.title,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.3682507417324814, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.status,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.42800648428237764, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.original_language,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.4685086437013132, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.4961070400347691, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.5151781728285542, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.status,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.5270779925124985, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),country.name,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.5273833178804186, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.5386968029127844, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.original_language,=,Espa\u00f1ol),movie.popularity),movie.runtime))", "score": -0.5453424966575771, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.popularity),movie.runtime))", "score": -0.5463888228315233, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.550475699458223, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),getData(movie),movie.id,spoken_language.iso_639_1),movie.popularity),movie.runtime))", "score": -0.5665699199230544, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.popularity),movie.runtime))", "score": -0.5699074529157536, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the highest popularity between all the movies in Espanol ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Espa\u00f1ol),getData(movie),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.574830162534254, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Espa\u00f1ol),movie.popularity),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 62, "beams": [{"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.3527790563232419, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.3659605354630021, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.oscar_id,person.id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.37274238391660663, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.3781596321043392, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.38663795617171914, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.3901534788495549, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.oscar_id,person.id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.3940279744817959, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,oscar.id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.3955707270372875, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.year),movie.release_date))", "score": -0.3983967617475355, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.3994452226695285, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.39981943531147934, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), person.birth_place),movie.release_date))", "score": -0.4030378092331801, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.4114391004257363, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.41157827189828783, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,oscar.id),movie.popularity,>=,1.03114), oscar.sub_category),movie.release_date))", "score": -0.4168563486134688, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 63, "beams": [{"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.060354302419000305, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_place))", "score": -0.2417054798133904, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.4165000531502301, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.5215399539715383, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.name))", "score": -0.5358070458896691, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Bainbridge Island, Washington), person.death_day),person.death_place))", "score": -0.5978512305446202, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.6082317671620803, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_place))", "score": -0.6297256098296372, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.6457734916039044, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_place),person.death_day))", "score": -0.6584684990957612, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.birth_day))", "score": -0.6677493180759484, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),oscar_nominee.person_id))", "score": -0.668198439074331, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),genre.name,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.6927510115929181, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.69385136582423, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Bainbridge Island, Washington), person.death_day),person.death_place))", "score": -0.7164174230201792, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 64, "beams": [{"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))", "score": -0.014174621763231698, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.runtime,<,110), movie.budget),movie.budget))", "score": -0.46984542243216665, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,110), movie.budget),movie.budget))", "score": -0.5414239747697138, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.title))", "score": -0.6541770675466978, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.release_date))", "score": -0.7271689751432859, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.original_language))", "score": -0.7365983107374632, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,110), movie.budget),movie.budget))", "score": -0.7661579619525583, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,110), movie.budget),movie.budget))", "score": -0.7788978202515864, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.title),movie.budget))", "score": -0.7827331492808298, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.original_language),movie.budget))", "score": -0.822054333439155, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<,110), movie.budget),movie.budget))", "score": -0.8359996448634774, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))", "score": -0.8387753374372551, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.revenue))", "score": -0.8395867326544248, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.revenue),movie.budget))", "score": -0.8491073915865854, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}, {"orig_question": "What is the movie budget from movies that have a movie runtime less than 110?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.release_date),movie.budget))", "score": -0.8643966982272104, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,110), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 65, "beams": [{"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.10346103800367457, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.14838049735355677, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,!=,2015-10-30), language.name),language.name))", "score": -0.1974870611962168, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.release_date,!=,2015-10-30), language.name),language.name))", "score": -0.3170795500848831, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.3539831455153878, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.36900083940529954, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.37929938534846, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(cast),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3947407204857948, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3950115048693102, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.39564061634535336, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,!=,2015-10-30), language.name),movie.original_language))", "score": -0.3974742557143729, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),person.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.397989551908762, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),merge(getData(spoken_language),getData(genre),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.3999333249624015, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,!=,2015-10-30), language.name),language.name))", "score": -0.40641218958781555, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}, {"orig_question": "In how many different languages are the movies spoken that were not released on the 2015-10-30?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,!=,2015-10-30),getData(spoken_language),movie.id,spoken_language.movie_id),getData(genre),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.4073257300502713, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,!=,2015-10-30), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 66, "beams": [{"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.category))", "score": -0.04377120346647826, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.sub_category))", "score": -0.2133884241358164, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.sub_category),oscar.category))", "score": -0.2308714623553627, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,186), oscar.category),oscar.category))", "score": -0.24923972152725532, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,>=,186), oscar.category),oscar.category))", "score": -0.2566410884305947, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.number),oscar.category))", "score": -0.2886350171177145, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.number))", "score": -0.3130272379247187, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,=,186), oscar.category),oscar.category))", "score": -0.38081441696374596, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.year))", "score": -0.38441252159123035, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.sub_category),oscar.sub_category))", "score": -0.40048868302470086, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), company.name),oscar.category))", "score": -0.4070355342880133, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), movie.title),oscar.category))", "score": -0.41198552656737003, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.category))", "score": -0.41541432377621124, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), keyword.name),oscar.category))", "score": -0.4183600752209051, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<,186), oscar.category),oscar.sub_category))", "score": -0.4188569421965935, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 67, "beams": [{"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))", "score": -0.03356114393682219, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,48000000), movie.runtime),movie.runtime))", "score": -0.29516302412957884, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))", "score": -0.6194956171166268, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.runtime),movie.runtime))", "score": -0.6244588679692242, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.title))", "score": -0.663536701031262, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.release_date))", "score": -0.6781399582105223, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,48000000), movie.runtime),movie.runtime))", "score": -0.6938063091656659, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.title),movie.runtime))", "score": -0.7042836355103645, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,48000000), movie.runtime),movie.runtime))", "score": -0.7117446434276644, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.vote_average),movie.runtime))", "score": -0.7978565501107369, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.vote_count))", "score": -0.804039630718762, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), oscar.year),movie.runtime))", "score": -0.8114196466340218, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),genre.name,<=,48000000), movie.runtime),movie.runtime))", "score": -0.8232741725223605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.status),movie.runtime))", "score": -0.8322257207764778, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}, {"orig_question": "What are the runtimes of movies with a budget equal or smaller than 48000000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,48000000), movie.runtime),movie.runtime))", "score": -0.8368114006298129, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,48000000), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 68, "beams": [{"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.07744718511821702, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_place))", "score": -0.34304805082501844, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.3729630574939237, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.40656719632076505, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id), person.birth_place),person.birth_place))", "score": -0.453653344394602, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.4605113309728431, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,person.gender), person.birth_place),person.birth_place))", "score": -0.4630848326052556, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),person.gender,person.id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.4761736208068107, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.4788806274673489, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,f), person.birth_day),person.birth_place))", "score": -0.4883741225947905, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id), person.birth_place),person.birth_place))", "score": -0.4963473999359589, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,person.gender),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.4998185697437027, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(person),person.gender,person.id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.5007015789413016, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.5068269389127592, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}, {"orig_question": "Whats the different birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.gender,=,f), person.birth_place),person.birth_place))", "score": -0.5111448686749406, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 69, "beams": [{"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.23247021216728753, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.25538117300106095, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.3119613837460613, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3225084569563308, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_place),person.name))", "score": -0.33618795047848704, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3454194177901042, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_place),person.name))", "score": -0.35909891131226046, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.3614451498127451, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_day),person.name))", "score": -0.36714270635805757, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.birth_place),person.name))", "score": -0.36770170164134475, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(cast),person.id,oscar_winner.person_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.37603962044170175, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.name,=,Christopher J. Wood),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.name),person.name))", "score": -0.3826649768535109, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.38435612504447914, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_day),person.name))", "score": -0.3900536815897916, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}, {"orig_question": "How many persons are called Christopher J. Wood?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Christopher J. Wood),getData(oscar_winner),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.birth_place),person.name))", "score": -0.39061267687307877, "correct_code": "count(extractValues(distinct(filter(getData(person),person.name,=,Christopher J. Wood), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 70, "beams": [{"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,iodine),movie.revenue),movie.title))", "score": -0.17184392667346352, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.vote_count))", "score": -0.19413583462635284, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.title))", "score": -0.20597137468704654, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,iodine),movie.revenue),movie.vote_count))", "score": -0.25961261428519866, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.budget))", "score": -0.27449275779211213, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.2976510006754417, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.3205903808684027, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(keyword),keyword.name,!=,iodine),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.3312644204480305, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,iodine),movie.revenue),movie.title))", "score": -0.33165168165495335, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.vote_count))", "score": -0.347959493819906, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count),movie.vote_count))", "score": -0.3526240109795955, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.vote_count))", "score": -0.35316091899487256, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.vote_count))", "score": -0.3566502105686737, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.title))", "score": -0.35760674176766416, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,iodine),movie.revenue),movie.budget))", "score": -0.3613973975876124, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 71, "beams": [{"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.title))", "score": -0.040014564623561455, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))", "score": -0.33063269742342527, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.budget))", "score": -0.4380359664610296, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.release_date))", "score": -0.4751317516020208, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.vote_count),movie.title))", "score": -0.47792799361559446, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.revenue),movie.title))", "score": -0.5139992941221863, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.release_date),movie.title))", "score": -0.5658737231096893, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,98337295), movie.budget),movie.title))", "score": -0.6197640739665076, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.id),movie.title))", "score": -0.6446069289049774, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.original_language))", "score": -0.6626678720167547, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.original_language),movie.title))", "score": -0.6915811706385284, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.budget))", "score": -0.7286540992608934, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,98337295), movie.budget),movie.title))", "score": -0.7537057243571326, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.runtime),movie.title))", "score": -0.7584273029169708, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),company.name))", "score": -0.758580030505982, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 72, "beams": [{"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,<=,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.13522327005775825, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.1451860656764013, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,!=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.19978589674541364, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,=,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.20801640403399052, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.21285379591154158, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<=,56000),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.21620524716724845, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,>=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2845298563605373, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2867599188243369, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.28788053595445157, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,<,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.29724645806752514, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<=,56000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3223370601211092, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,=,56000),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3234167237195597, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<,56000),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3665356479885611, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,<=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.36731136225879235, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "from which countries are the movies with a budget up to  56000.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.title,<=,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.4005841983156182, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,<,56000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 73, "beams": [{"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))", "score": -0.016274744557449594, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_place))", "score": -0.541596391616622, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_day))", "score": -0.5650333053490613, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),genre.name))", "score": -0.5934429652115796, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.death_place))", "score": -0.6751465244742576, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),company.name))", "score": -0.6909726745507214, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), genre.name),person.death_place))", "score": -0.6967950252874289, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,<,f), person.death_place),person.death_place))", "score": -0.6971291346999351, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),movie.budget))", "score": -0.7303962594887707, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,f), person.death_place),person.death_place))", "score": -0.7691277574922424, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.gender))", "score": -0.7772969490906689, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.birth_place))", "score": -0.7932580596825574, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.gender),person.death_place))", "score": -0.7947883395536337, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,f), person.death_place),person.death_place))", "score": -0.8042494964029174, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of all female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_place),person.death_place))", "score": -0.8132970718725119, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 74, "beams": [{"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.14154326395509997, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.32251207117649006, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3226972915363149, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.32420956415241226, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3492732504658329, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.35097074344175516, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.356893896094302, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3585913890702242, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3693570277528051, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.37105452072872736, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.38365507538364485, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3853525545153742, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3961181931979551, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3976716943216161, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}, {"orig_question": "What's the birth place of Michele Proude?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.name,=,Michele Proude), person.birth_place),person.birth_place))", "score": -0.3978156861738773, "correct_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Michele Proude), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 75, "beams": [{"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.09171920844756846, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.1134510182308195, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(filter(getData(person),person.gender,=,m),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.18619389798413774, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.runtime),movie.runtime)", "score": -0.28539073768866086, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.29445774382921497, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.runtime),movie.runtime)", "score": -0.2958481762553653, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(filter(getData(person),person.gender,=,m),getData(crew),person.id,crew.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.2981272824052273, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(filter(getData(person),person.gender,=,m),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,m), movie.runtime),movie.runtime)", "score": -0.33861786116131165, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.3755492273706519, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,!=,m), movie.id),movie.runtime)", "score": -0.3990827749073154, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.runtime)", "score": -0.4217110584664776, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.42390184617381743, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,m), movie.id),movie.runtime)", "score": -0.42856597187041934, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.popularity,=,m), movie.id),movie.runtime)", "score": -0.430699949393292, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of movie runtime for movies that had female crew members?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,m), movie.id),movie.runtime)", "score": -0.4513868171083743, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.gender,!=,m),getData(movie),crew.movie_id,movie.id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 76, "beams": [{"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.29366623641919565, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.29967932962654964, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.32878696615838165, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.32920493224862374, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),cast.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3348000593657356, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.35175926735430224, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3577723605616562, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,spoken_language.iso_639_1),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.36276831795823417, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(movie),cast.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3643256619878097, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,person.gender),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.3676628666531525, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(spoken_language),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.37361262479093027, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(spoken_language),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.37962571799828426, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),production_country.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.37967276855274984, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),production_country.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)", "score": -0.38568586176010383, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity in which persons were involved who don't have the gender male?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.popularity),movie.popularity)", "score": -0.4009960701743849, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,m), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 77, "beams": [{"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))", "score": -0.00969236803757667, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,15.0481), movie.title),movie.title))", "score": -0.541059571723963, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))", "score": -0.5859300840493233, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,15.0481), movie.title),movie.title))", "score": -0.6445276322174323, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.original_language),movie.title))", "score": -0.7699382267292094, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,15.0481), movie.title),movie.title))", "score": -0.7706229701270786, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,<,15.0481), movie.title),movie.title))", "score": -0.7855209126701084, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,15.0481), movie.title),movie.title))", "score": -0.8188933744659153, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.original_language))", "score": -0.8253605244080973, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,15.0481), movie.title),movie.title))", "score": -0.8323261918831122, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), company.name),movie.title))", "score": -0.8770031891162944, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),company.name))", "score": -0.9014230248849344, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))", "score": -0.9114042625114962, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,15.0481), movie.title),movie.title))", "score": -0.9196189060439792, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}, {"orig_question": "Which different titles do the movies with a popularity less than 15.0481 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,<,15.0481), movie.title),movie.title))", "score": -0.9212051644553867, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,15.0481), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 78, "beams": [{"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,fa),getData(country),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2087329738811293, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,fa),getData(movie),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.22820965952323408, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,fa),getData(production_country),country.iso_3166_1,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.276449532752008, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,fa),getData(production_country),country.iso_3166_1,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.27830866387903197, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,fa),getData(country),production_country.movie_id,country.iso_3166_1),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2793230107419716, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,fa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2811405402444184, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,fa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2827131737073648, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.movie_id),country.name,=,fa),getData(country),production_country.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2974265621753558, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,fa),getData(movie),production_country.movie_id,country.iso_3166_1),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.29879971854862697, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,fa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.30570776147799034, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,fa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.30728039494093673, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,fa),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3571995291029014, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,fa),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3590586602299254, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,fa),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3660262688416955, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,fa),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.36788540889822385, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 79, "beams": [{"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.06312514105624524, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.16767564318709746, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(movie),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.20327672117297677, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(has_keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.2378160023753847, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.23911713532724393, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.24365607589202962, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(movie),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.2792571538779089, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.2904265371965487, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(production_company),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.3069638922261999, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(has_keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.3137964450901139, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.3339125475950527, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,strafzettel), movie.title),movie.title))", "score": -0.33400933580326525, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.34627629086199396, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,strafzettel), movie.title),movie.title))", "score": -0.3674743393627899, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with any keyword except \"strafzettel\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,strafzettel), movie.title),movie.title))", "score": -0.38461656031083064, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,!=,strafzettel),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 80, "beams": [{"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))", "score": -0.06642847613147751, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))", "score": -0.2779761653728201, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))", "score": -0.5251370787409542, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,hi), movie.runtime),movie.runtime))", "score": -0.634557000013956, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.title))", "score": -0.6597661018622603, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,hi), movie.runtime),movie.runtime))", "score": -0.708094488714778, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.status))", "score": -0.7161372542632307, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.title),movie.runtime))", "score": -0.7622055094707321, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,hi), movie.runtime),movie.runtime))", "score": -0.7841432007280673, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.vote_average))", "score": -0.7995902538550581, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,=,hi), movie.runtime),movie.runtime))", "score": -0.8116989644495334, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,hi), movie.runtime),movie.runtime))", "score": -0.8233451755968417, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.status),movie.runtime))", "score": -0.8253848236072372, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,hi), movie.runtime),movie.runtime))", "score": -0.8352126987902011, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}, {"orig_question": "Show Movie Runtime where Movie Original Language is Hindi", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.title),movie.runtime))", "score": -0.8431609164326801, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,hi), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 81, "beams": [{"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1959),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.18458543700806637, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,m),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.27532478712133357, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>=,1959),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.27753645563667695, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1959),getData(company),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.31302388541739995, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,>,1959),getData(company),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.32139502396630387, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1959),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3240013561355794, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,=,1959),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.33012347839224954, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,=,1959),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.33233514690759286, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,>,m),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3323723509213263, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,>=,1959),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3528616858493247, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1959),getData(company),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.41033871260719806, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,>,1959),getData(company),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.418709851156102, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1959),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.4213161804654355, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.revenue,>,1959),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.4296871019140977, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,>,1959),getData(company),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.oscar_id), company.name),company.name))", "score": -0.46804361938542766, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 82, "beams": [{"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)", "score": -0.04082498256638472, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(filter(getData(movie),movie.budget,=,112000000),movie.runtime)", "score": -0.5286034649309774, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,112000000), movie.id),movie.runtime)", "score": -0.5853004871789418, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(filter(getData(movie),movie.budget,<=,112000000),movie.runtime)", "score": -0.5910446550980532, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(filter(getData(movie),movie.budget,<,112000000),movie.runtime)", "score": -0.6955295955087708, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<,112000000), movie.id),movie.runtime)", "score": -0.7152462496752162, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,112000000), movie.id),movie.runtime)", "score": -0.7304820540089981, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.runtime),movie.runtime)", "score": -0.7592310163468127, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.vote_average)", "score": -0.781633956703765, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),genre.name,<,112000000), movie.id),movie.runtime)", "score": -0.7884846928075427, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,<,112000000), movie.id),movie.runtime)", "score": -0.8076202613223443, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,<,112000000), movie.id),movie.runtime)", "score": -0.8957261313077518, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,<,112000000), movie.id),movie.runtime)", "score": -0.9213499490493702, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.vote_count)", "score": -0.9525496200391882, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies with a budget of less than 112000000 Dollars?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),oscar.year)", "score": -0.9636952478831606, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<,112000000), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 83, "beams": [{"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.026670201812521555, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.49514630081692207, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.person_id,movie.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.49809032492166766, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.name))", "score": -0.5075744782952825, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.5155569334892789, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,person.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.5204499280364936, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.5233939521412392, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_place))", "score": -0.6181872581510106, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),movie.revenue))", "score": -0.6209239458112279, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.birth_day))", "score": -0.6225375031499425, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.name),person.death_day))", "score": -0.6559076415287564, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),genre.name,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.671671034899191, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.birth_day),person.death_day))", "score": -0.6856203185307095, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.6975589414505521, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.7086199950572336, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 84, "beams": [{"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.07552948364173062, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.25191083320532925, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.3243500671951291, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.46723563214713776, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.4880771984671748, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.5090768016234506, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1975-10-25), person.death_place),person.death_place))", "score": -0.5200641444243956, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.birth_place),person.death_place))", "score": -0.5460971817665268, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.birth_place))", "score": -0.5469485088542569, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,1975-10-25), person.death_place),person.death_place))", "score": -0.5596976867236663, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_day))", "score": -0.5750155910209287, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.5805456935800205, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,1975-10-25), person.death_day),person.death_place))", "score": -0.6078290251558504, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.birth_place))", "score": -0.611350924700394, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "What is the death place of persons who died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,1975-10-25), person.birth_place),person.death_place))", "score": -0.6183360100136197, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 85, "beams": [{"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.21308416635958718, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.category),oscar.category))", "score": -0.2422631367691128, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.year,=,Libby Villa), oscar.category),oscar.category))", "score": -0.24943472108128445, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.2835015814572033, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.2914043230054396, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.category,=,Libby Villa), oscar.category),oscar.category))", "score": -0.3101925554761486, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.31477604737488596, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),language.name,=,Libby Villa), oscar.category),oscar.category))", "score": -0.32266648782018553, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3534793260314507, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),person.name,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.354925176989382, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),oscar.sub_category,=,Libby Villa), oscar.category),oscar.category))", "score": -0.35708347920303735, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.36182173810305573, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.category,=,Libby Villa), oscar.category),oscar.category))", "score": -0.3685548192450199, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Libby Villa),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.3704089897100277, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many oscar categories did Libby Villa win an oscar?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.category),oscar.number))", "score": -0.3723524677060613, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.name,=,Libby Villa), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 86, "beams": [{"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "score": -0.04861779063207801, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing (screenplay--original)), movie.popularity),movie.popularity))", "score": -0.1739013282808734, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.20346686105868786, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "score": -0.28724358927524163, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3262869015425889, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.person_id,movie.id),oscar.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3352225240080858, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3518849605473332, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),getData(movie),oscar_nominee.movie_id,movie.id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3525640895867749, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),country.name,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "score": -0.35666359118877555, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3588434151746109, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3588585559119585, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,<,writing (screenplay--original)), movie.popularity),movie.popularity))", "score": -0.35994696258162767, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.release_date))", "score": -0.3617205068769338, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,movie.id),oscar.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.popularity),movie.popularity))", "score": -0.3677790288560001, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}, {"orig_question": "What is the popularity of the earliest oscar nominated movie to sub category writing (screenplay--original)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),movie.status,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.popularity),movie.popularity))", "score": -0.37753682416188705, "correct_code": "done(extractValues(max(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay--original)),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 87, "beams": [{"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.034530276677326006, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<=,2006-01-10), movie.id),movie.vote_count)", "score": -0.5020735406854361, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.release_date,=,2006-01-10),getData(movie),movie.release_date,movie.id), movie.id),movie.vote_count)", "score": -0.5574055124229416, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,crew.movie_id),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.5676836309867551, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.5738739556969681, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.vote_count),movie.vote_count)", "score": -0.6320020229858527, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>=,2006-01-10), movie.id),movie.vote_count)", "score": -0.632993893911445, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.revenue)", "score": -0.6643054543588344, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.release_date,=,2006-01-10),getData(movie),movie.id,movie.id), movie.id),movie.vote_count)", "score": -0.6678080887457468, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.7002466567918842, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.runtime)", "score": -0.7018120369904562, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_average)", "score": -0.7251959779836251, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.budget)", "score": -0.7567992071988057, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),oscar.number)", "score": -0.7577045857478268, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.runtime),movie.vote_count)", "score": -0.8370312264581, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 88, "beams": [{"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.131617108405276, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(getData(oscar),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.14633941967622377, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,=,1948), movie.release_date),movie.release_date))", "score": -0.1945230830830985, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.28791479066690484, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(getData(oscar),oscar.year,=,1948), movie.release_date),movie.release_date))", "score": -0.2994296060933266, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,1948), movie.release_date),movie.release_date))", "score": -0.3019351968854852, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,>=,1948), movie.release_date),movie.release_date))", "score": -0.3133064353809971, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<,1948), movie.release_date),movie.release_date))", "score": -0.3200361396366131, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<=,1948), movie.title),movie.release_date))", "score": -0.3586163688916012, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.4065345865547623, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,=,1948), movie.title),movie.release_date))", "score": -0.4215223435694237, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.43386928756211973, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,<=,1948), movie.release_date),movie.release_date))", "score": -0.43719015405868394, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,<=,1948), movie.release_date),movie.release_date))", "score": -0.44001406622270267, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}, {"orig_question": "What are the movie release date of movies form the oscar year that are older than or the same age as 1948?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.year,<=,1948), movie.release_date),movie.title))", "score": -0.44003922555134584, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.year,>=,1948),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 89, "beams": [{"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.title),movie.popularity))", "score": -0.07567160252074245, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.release_date),movie.popularity))", "score": -0.2721600984368706, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.title),movie.release_date))", "score": -0.292600315544405, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.runtime),movie.popularity))", "score": -0.37871311652997974, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.release_date),movie.release_date))", "score": -0.4890888114605332, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.status),movie.popularity))", "score": -0.554223880651989, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.runtime),movie.release_date))", "score": -0.5956418295536423, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.title),movie.status))", "score": -0.6365822670195485, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,>=,1980-09-19), movie.title),movie.popularity))", "score": -0.6480262537816954, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,crew.movie_id),movie.release_date,>=,1980-09-19), movie.title),movie.release_date))", "score": -0.6578155911206008, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.id),movie.popularity))", "score": -0.6607415531907463, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.release_date,>=,1980-09-19), movie.title),movie.popularity))", "score": -0.6791360269655546, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.release_date,>=,1980-09-19), movie.title),movie.release_date))", "score": -0.6889253598743182, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,=,1980-09-19), movie.title),movie.popularity))", "score": -0.6913855892053107, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}, {"orig_question": "How many movies with different popularities have been released since 1980-09-19?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.title),movie.id))", "score": -0.715309512350359, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-09-19), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 90, "beams": [{"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.02045567500499601, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,=,The Last Legion), movie.budget),movie.budget))", "score": -0.5532578365516836, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.title))", "score": -0.5746061595073115, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.original_language,=,The Last Legion), movie.budget),movie.budget))", "score": -0.5828407990450608, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,The Last Legion), movie.budget),movie.budget))", "score": -0.5865239713257324, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,The Last Legion), movie.budget),movie.budget))", "score": -0.5878650073809695, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget), movie.budget),movie.budget))", "score": -0.605178782813, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6060032457343293, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.id),movie.vote_average,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6115488174073661, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.movie_id),movie.vote_average,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6138642619926968, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.person_id), movie.budget),movie.budget))", "score": -0.6333897481336643, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,movie.budget), movie.budget),movie.budget))", "score": -0.6361053048455678, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6400689272377349, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6467595820231509, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,The Last Legion), movie.budget),movie.budget))", "score": -0.68639285610152, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 91, "beams": [{"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(spoken_language),person.id,has_genre.genre_id),language.name,=,Jesse Films Inc.),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.4681969688527701, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(cast),person.id,has_genre.genre_id),language.name,=,Jesse Films Inc.),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.4715433561498542, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),getData(spoken_language),person.id,cast.person_id),getData(language),spoken_language.movie_id,movie.id),movie.revenue),movie.original_language))", "score": -0.49436583661392514, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),getData(spoken_language),person.id,cast.person_id),getData(language),cast.movie_id,movie.id),movie.revenue),movie.original_language))", "score": -0.5061898494458416, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(spoken_language),person.id,has_genre.genre_id),language.name,=,Jesse Films Inc.),getData(language),has_genre.genre_id,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.5062855553767031, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(cast),person.id,has_genre.genre_id),language.name,=,Jesse Films Inc.),getData(language),has_genre.genre_id,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.5096319426737872, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),getData(spoken_language),person.id,cast.person_id),getData(language),spoken_language.iso_639_1,movie.id),movie.revenue),movie.original_language))", "score": -0.5138562362876562, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_genre.genre_id),movie.revenue),movie.original_language))", "score": -0.5228696066404076, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(spoken_language),person.id,spoken_language.iso_639_1),language.name,=,Jesse Films Inc.),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.5228885548021899, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),getData(spoken_language),person.id,cast.person_id),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.original_language))", "score": -0.5326123842713253, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),getData(spoken_language),person.id,cast.person_id),getData(language),spoken_language.movie_id,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.5381384721810407, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),getData(spoken_language),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.revenue),movie.original_language))", "score": -0.5444364052020946, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.5465602591279509, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),getData(spoken_language),person.id,cast.person_id),getData(language),cast.movie_id,language.iso_639_1),movie.revenue),movie.original_language))", "score": -0.54996249311181, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}, {"orig_question": "In which language did Jesse Films Inc. produce its film with the lowest revenue?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.revenue,=,Jesse Films Inc.),getData(spoken_language),person.id,has_genre.genre_id),getData(language),spoken_language.movie_id,movie.id),movie.revenue),movie.original_language))", "score": -0.5506857447599603, "correct_code": "done(extractValues(min(merge(filter(getData(company),company.name,=,Jesse Films Inc.),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),movie.revenue),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 92, "beams": [{"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.15979709636333309, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.2733678198596496, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))", "score": -0.2761825847111559, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.27706157235458523, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.2912847252164055, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.30919461866683573, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.3159451389513928, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.33154134658275847, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,spoken_language.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.34041571789021774, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.34367967731256316, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.3469136836470929, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.361211529706484, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,oscar_nominee.movie_id),movie.vote_average,>,9), person.birth_place),person.birth_place))", "score": -0.3714203660259333, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_average,>,9), person.birth_place),person.death_place))", "score": -0.38841389241259583, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all actors who played in movies with an average vote greater than 9?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,9),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))", "score": -0.3944704073824004, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,9),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 93, "beams": [{"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.13371945623660497, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.22234838169679266, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.22487821988731727, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.2313491434831455, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.2642217518739528, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(language),language.name,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.3199780689433332, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.runtime),movie.runtime)", "score": -0.3224199273710713, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id), movie.id),movie.runtime)", "score": -0.3463496270668001, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(genre),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.3528854807247715, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.3638851557728277, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????), movie.id),movie.runtime)", "score": -0.37672574145856763, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(oscar),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.38574529536209745, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,oscar_winner.oscar_id), movie.id),movie.runtime)", "score": -0.38613845980091094, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),spoken_language.movie_id,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.4044502041361254, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}, {"orig_question": "What is the summed runtime of movies that have been translated to ????????? ?????", "inferred_code": "sum(distinct(merge(filter(getData(country),movie.original_language,=,????????? ????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.40719894020105757, "correct_code": "sum(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,????????? ????),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 94, "beams": [{"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.03244490245197085, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,214), movie.original_language),movie.original_language))", "score": -0.3127516412532714, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.4251485123946391, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.47388661204058735, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,cast.movie_id),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.5593502779129588, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.5641035030739433, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,214), movie.original_language),movie.original_language))", "score": -0.5752422117984679, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.6240708104078483, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,<,214), movie.original_language),movie.original_language))", "score": -0.6288710727164069, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),movie.id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.634358434582866, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.id,movie.id),movie.id,spoken_language.movie_id),movie.runtime,<=,214), movie.original_language),movie.original_language))", "score": -0.6369033982005421, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,214), movie.original_language),movie.original_language))", "score": -0.6432484888828185, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),language.name))", "score": -0.6910789555295196, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.runtime,<=,214), language.name),movie.original_language))", "score": -0.6927332537041564, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}, {"orig_question": "Which different original languages do the movies with a runtime of at most 214 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.title))", "score": -0.7224757021649566, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,214), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 95, "beams": [{"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.22915731534319023, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),genre.name,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.27881314368446264, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.2866401081354107, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.2894472558892696, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.tagline,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3254061137992673, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),person.death_place,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3258492520160739, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),genre.name,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.33587702227484734, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3479314529462938, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.34860559916543166, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.homepage,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.35364656614327583, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),keyword.name,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3565420890563791, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),movie.original_language,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.3574496877621309, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Fritz Rasp),getData(cast),movie.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.37986478393978196, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),genre.name,=,Fritz Rasp),getData(cast),movie.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),movie.revenue))", "score": -0.42952061228105437, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "How much revenue did movies generate in which Fritz Rasp was part of the cast?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Fritz Rasp),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.revenue),person.death_day))", "score": -0.5183523514411387, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Fritz Rasp),getData(movie),cast.movie_id,movie.id), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 96, "beams": [{"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.runtime),movie.runtime))", "score": -0.06955555049717077, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))", "score": -0.19924440948307165, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,2491), movie.runtime),movie.runtime))", "score": -0.463987505678233, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.vote_average),movie.runtime))", "score": -0.5391173620337213, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,!=,2491), movie.runtime),movie.runtime))", "score": -0.5684730407410825, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,2491), movie.runtime),movie.runtime))", "score": -0.5936763646641339, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>,2491), movie.runtime),movie.runtime))", "score": -0.6100339653530682, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,2491), movie.runtime),movie.runtime))", "score": -0.6111273166352476, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.vote_average),movie.runtime))", "score": -0.6688062210196222, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.vote_count),movie.runtime))", "score": -0.6884194572085107, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), oscar.year),movie.runtime))", "score": -0.6939314563387597, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.title),movie.runtime))", "score": -0.7137116153353418, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.runtime),oscar.year))", "score": -0.7339035711811448, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2491), movie.status),movie.runtime))", "score": -0.7346037355346198, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}, {"orig_question": "How many different runtimes exist for movies that have vote counts other than 2491?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2491), movie.runtime),movie.runtime))", "score": -0.7397228012887354, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,2491), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 97, "beams": [{"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.name), person.name))", "score": -0.18131642670778092, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,!=,2014-01-01), person.name),person.name))", "score": -0.23069433539058082, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_place,!=,2014-01-01),person.name), person.name))", "score": -0.3226034592225915, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,!=,2014-01-01),person.name), person.name))", "score": -0.4288832943275338, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.name,!=,2014-01-01),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.name),person.name))", "score": -0.45312960232752847, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_place,!=,2014-01-01), person.name),person.name))", "score": -0.4945532534911763, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.name), person.gender))", "score": -0.517389951957739, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,!=,2014-01-01), person.name),person.name))", "score": -0.5372662995650899, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,!=,2014-01-01), person.name),person.gender))", "score": -0.5739047419920098, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.name), person.birth_day))", "score": -0.5887494075432187, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.name,!=,2014-01-01),merge(getData(cast),getData(person),cast.person_id,movie.id),person.id,cast.person_id), person.name),person.name))", "score": -0.5911795236034025, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(merge(filter(getData(person),person.name,!=,2014-01-01),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name), person.name))", "score": -0.6270118023964015, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_place,!=,2014-01-01),person.name), person.gender))", "score": -0.6586769844725495, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.name), oscar_winner.person_id))", "score": -0.6600890147819882, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}, {"orig_question": "Are there persons that did not die on January 1st 2014?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.name,!=,2014-01-01),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.name),person.gender))", "score": -0.6903282568399767, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,!=,2014-01-01),person.death_place), person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 98, "beams": [{"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.016228916621912504, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,8.1), movie.title),movie.title))", "score": -0.44942236322458484, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,8.1), movie.title),movie.title))", "score": -0.5762518681913207, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.5807509633923114, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.6109831321449908, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.6560929195729841, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,8.1), movie.title),movie.title))", "score": -0.6603528894811461, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.person_id),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.6634846847472706, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>,8.1), movie.title),movie.title))", "score": -0.6665038140818069, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,>,8.1), movie.title),movie.title))", "score": -0.6668866445728471, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.original_language),movie.title))", "score": -0.7626608806058357, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,8.1), movie.title),movie.title))", "score": -0.7746087350278685, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,8.1), movie.title),movie.title))", "score": -0.7906909855410049, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.original_language))", "score": -0.7978102430097351, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}, {"orig_question": "Which movies have a vote average higher than 8.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,8.1), movie.title),movie.title))", "score": -0.8094017180010269, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,8.1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 99, "beams": [{"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.3638011457599418, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.category),oscar.sub_category))", "score": -0.3813174310296539, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.category),oscar.year))", "score": -0.39384838303228326, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.number),oscar.category))", "score": -0.406458328267821, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.4144035952720807, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.4173120713571056, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.42075761004195816, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,person.id),oscar_winner.movie_id,movie.id), oscar.number),oscar.sub_category))", "score": -0.4239746135375331, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.42485232436000836, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.42743637871573376, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), movie.title),oscar.category))", "score": -0.4457978219465856, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.sub_category))", "score": -0.445892337935863, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), oscar.category),oscar.sub_category))", "score": -0.44892176673325235, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,person.id),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), movie.title),oscar.category))", "score": -0.4503808990879387, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}, {"orig_question": "Is there a oscar winner movie title with the oscar winner persons name Bob Papenbrook?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.name,=,Bob Papenbrook),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.person_id,person.id),oscar.category,=,Bob Papenbrook),oscar_winner.movie_id,movie.id), movie.title),oscar.category))", "score": -0.45215183671646314, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,=,Bob Papenbrook), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 100, "beams": [{"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.038318822666002166, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))", "score": -0.14620124288518374, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.2807461432834468, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),production_company.movie_id,production_company.company_id), movie.title),movie.title))", "score": -0.3700869575919298, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(production_company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.3973344623347183, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),oscar_nominee.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4006862131490162, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.name,production_company.company_id), movie.title),movie.title))", "score": -0.40314272590675215, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4073390007496447, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.company_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4153228343614475, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4213973973522645, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,company.name), movie.title),movie.title))", "score": -0.42202195997910913, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4278549959345946, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id), movie.title),movie.title))", "score": -0.4282583945341202, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4492970831945259, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies produced by the company called Deutsche Filmf\u00f6rderfonds (DFFF)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)),merge(getData(production_company),getData(movie),company.id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.4531763307075383, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Deutsche Filmf\u00f6rderfonds (DFFF)), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 101, "beams": [{"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)", "score": -0.053114956410575016, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.35321037131320415, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.3591860442015134, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,fr), movie.id),movie.vote_count)", "score": -0.5049071998804449, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,fr), movie.id),movie.vote_count)", "score": -0.5108828727687541, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.5542729894213628, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.5558949361818298, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.560248662309672, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,fr), movie.id),movie.vote_count)", "score": -0.5633699536053816, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,=,fr), movie.id),movie.vote_count)", "score": -0.5860738136800409, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,=,fr), movie.id),movie.vote_count)", "score": -0.59204948656835, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity,=,fr), movie.id),movie.vote_count)", "score": -0.6148764437607646, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,fr), movie.vote_count),movie.vote_count))", "score": -0.6436884026697953, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(filter(getData(movie),movie.original_language,!=,fr),movie.vote_count)", "score": -0.7029037564778061, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies whose original language is \"fr\" ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.vote_count),movie.vote_count)", "score": -0.7032081263584795, "correct_code": "avg(distinct(filter(getData(movie),movie.original_language,=,fr), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 102, "beams": [{"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.08621496315754484, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.runtime),movie.vote_average))", "score": -0.3131418300763471, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.3317424839333398, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.34209787342115305, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_count),movie.vote_average))", "score": -0.47425711881078314, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_count))", "score": -0.5581296806194587, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.runtime),movie.vote_average))", "score": -0.5586693508521421, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.revenue),movie.vote_average))", "score": -0.5854688061372144, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.6159637985692825, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.id),movie.vote_average))", "score": -0.65094212423719, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>=,2005-03-17), movie.vote_average),movie.vote_average))", "score": -0.6585911508154823, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.popularity),movie.vote_average))", "score": -0.6791202200547559, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.runtime))", "score": -0.7063406829693122, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2005-03-17), movie.vote_count),movie.vote_average))", "score": -0.7197846395865781, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}, {"orig_question": "What does the vote average of movies released on or after March 17th 2005 sum up to? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.revenue))", "score": -0.7239391927578254, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2005-03-17), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 103, "beams": [{"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.050455619880642476, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.popularity)", "score": -0.24071191518449034, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.popularity)", "score": -0.3281029508118457, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity)", "score": -0.32974537979090784, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.popularity)", "score": -0.35583970067007953, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.38851381291929504, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.4112647549846418, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.name,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.41649474362971695, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.id)", "score": -0.41854329229618825, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.4318107807149308, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.43696417970970186, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.popularity)", "score": -0.4432329865979012, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),keyword.id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.4436241280063875, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.movie_id), movie.id),movie.popularity)", "score": -0.44407248024182505, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(company),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.44819481349222, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 104, "beams": [{"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)", "score": -0.04891347037162106, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.vote_count),movie.vote_count))", "score": -0.49377187784557464, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.vote_count),movie.vote_count)", "score": -0.5257003676661048, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,4.4), movie.id),movie.vote_count)", "score": -0.6979550759713885, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>,4.4), movie.id),movie.vote_count)", "score": -0.7022144591341551, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.revenue)", "score": -0.7320750249149947, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.runtime)", "score": -0.7713175420393086, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_average)", "score": -0.7907985082164337, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>=,4.4), movie.id),movie.vote_count)", "score": -0.8055604926638451, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,4.4), movie.id),movie.vote_count)", "score": -0.8093640585167604, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.budget)", "score": -0.8141125689000906, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,<=,4.4),movie.vote_count)", "score": -0.8634713010651371, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.revenue),movie.vote_count)", "score": -0.8656332896886616, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.runtime),movie.vote_count)", "score": -0.8698197270672824, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of movies that have a vote average other than 4.4?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,!=,4.4),movie.vote_count)", "score": -0.8716450649025, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,4.4), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 105, "beams": [{"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Entropy), movie.title),movie.title))", "score": -0.10168044623977222, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.10803426964333485, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.19298379214247197, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),getData(production_company),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.28170663407867097, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(production_company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.2871396973367092, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Entropy), movie.title),movie.title))", "score": -0.32022610973055843, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),getData(production_company),movie.id,production_company.company_id), movie.title),movie.title))", "score": -0.33723004824727376, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),merge(getData(production_company),getData(movie),production_company.company_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.34525523213912135, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(company),company.name,=,Entropy),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.34541075419152867, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),getData(production_company),company.id,production_company.movie_id), movie.title),movie.title))", "score": -0.3467586806989322, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id),company.name,=,Entropy), movie.title),movie.title))", "score": -0.3620161654982238, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy), movie.title),movie.title))", "score": -0.3765851115264583, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(production_company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))", "score": -0.3804752971822366, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,=,Entropy),getData(movie),production_company.movie_id,movie.id),getData(movie),company.id,production_company.company_id), movie.title),movie.title))", "score": -0.3848635636487621, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies the company Entropy has produced? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),production_company.movie_id,production_company.company_id),company.name,=,Entropy), movie.title),movie.title))", "score": -0.3988517268593273, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(company),company.name,=,Entropy),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 106, "beams": [{"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.22274841860136546, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.23558909579824472, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.23595271740116855, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.2487933945980478, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.2691173653092494, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.27774257437055017, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.28195804250612866, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.28232166410905246, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.2905832515674294, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.2909468731703533, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.2951623413059318, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.30378755036723254, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.original_language,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.3218402159333303, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.3241115119412668, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "From how many different birth places do people originate which won an oscar for the movie Little Fockers?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,Little Fockers),oscar.category,=,Little Fockers), person.birth_place),person.birth_place))", "score": -0.3405863166464832, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Little Fockers),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 107, "beams": [{"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.04994688456961857, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.budget),movie.budget)", "score": -0.45169833863541087, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.4703745437490463, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,movie.id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5145040282921763, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5166710676412412, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,<=,5.3), movie.id),movie.budget)", "score": -0.535177606327938, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(cast),movie.id,movie.id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5417788632558609, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5658026135901534, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),language.iso_639_1,movie.id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5758572434000948, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.iso_639_1),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5768647795639719, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),language.iso_639_1,movie.id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5821688667987928, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5843359247207761, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,cast.movie_id),movie.vote_average,<,5.3), movie.id),movie.budget)", "score": -0.5912590273459304, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,5.3), movie.id),movie.budget)", "score": -0.6396292126684558, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of movie budgets of movies with an average voting less than 5.3?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,<,5.3), movie.id),movie.budget)", "score": -0.6583375714672415, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,<,5.3), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 108, "beams": [{"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.release_date))", "score": -0.20916272793323565, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.23514441049504464, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.status),movie.release_date))", "score": -0.26055718551099105, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), oscar.year),movie.release_date))", "score": -0.26713005388913885, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,costume design),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.release_date))", "score": -0.27988077677917633, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.release_date))", "score": -0.28338638568455443, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,costume design),getData(movie),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.29730056365019564, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), oscar.category),movie.release_date))", "score": -0.3004206551566993, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), person.birth_place),movie.release_date))", "score": -0.31484609797860935, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), oscar.sub_category),movie.release_date))", "score": -0.32726541793003155, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.title),movie.release_date))", "score": -0.33024564127660744, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), oscar.category),movie.release_date))", "score": -0.33496340700832367, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), person.birth_place),movie.release_date))", "score": -0.3379425340743637, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,oscar.id),oscar.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.4353894286916281, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What is the birthplace of the oscar winners in category costume design?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,costume design),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.4354463268295986, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,costume design),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 109, "beams": [{"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.1971626648728498, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.2504994448145337, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,5.11281), oscar.number),oscar.number))", "score": -0.2651152882707278, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "score": -0.2875021570843522, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.status,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.29501754476042574, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.31026145866126703, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,5.11281), oscar.number),oscar.number))", "score": -0.31615863257118754, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3382087652045022, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.34081817073668425, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.category))", "score": -0.340838937026036, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,5.11281), oscar.year),oscar.number))", "score": -0.34136682124750456, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar_winner.oscar_id,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3481366895595611, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.status,=,5.11281),getData(oscar_winner),movie.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3483543247021096, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3548843945885549, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}, {"orig_question": "What was the last oscar edition where a movie with popularity 5.11281 won?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.vote_average,=,5.11281),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.35842790879459135, "correct_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,5.11281),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),oscar.year),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 110, "beams": [{"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), keyword.name),keyword.name))", "score": -0.09433866740552359, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.13527597132011132, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.vote_count,>,477), keyword.name),keyword.name))", "score": -0.1833714194854287, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,!=,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3158895712813468, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_average,>,477), keyword.name),keyword.name))", "score": -0.31626368065859756, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.31804596048820344, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.33004999655939443, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), keyword.name),company.name))", "score": -0.3323442943845051, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,477), keyword.name),oscar.number))", "score": -0.36690810066423546, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,!=,477), keyword.name),keyword.name))", "score": -0.38028930803679417, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,>,477), keyword.name),keyword.name))", "score": -0.3817028989795432, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),company.name))", "score": -0.3873596390002563, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,<,477), keyword.name),keyword.name))", "score": -0.3931839089187913, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),oscar.number))", "score": -0.39563932580266453, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}, {"orig_question": "Which are the keywords that appear for movies with more than 477 votes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,477),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.3957828308299043, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>=,477), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 111, "beams": [{"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),keyword.name))", "score": -0.179504676358939, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.1855719149410597, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.23100649159672723, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),keyword.name))", "score": -0.23562711562931515, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),person.death_place))", "score": -0.2962783430936275, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), person.death_place),keyword.name))", "score": -0.29746996090034555, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), person.death_place),person.death_place))", "score": -0.30353719948246627, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), keyword.name),keyword.name))", "score": -0.326917006645496, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), keyword.name),person.death_place))", "score": -0.3329842452276167, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),person.name))", "score": -0.3374503663520453, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), person.death_place),company.name))", "score": -0.3489717761381338, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.35352696723913524, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,!=,3854),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),country.name))", "score": -0.35409976043678254, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),keyword.name))", "score": -0.35491771548099443, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}, {"orig_question": "what are the names of the production companys where the movie vote is not 3854.0?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,!=,3854),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),person.death_place))", "score": -0.3607340662767534, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,!=,3854), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 112, "beams": [{"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.24387231775749185, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2883949791710789, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2913746727943937, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),country.iso_3166_1,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.32315973382775215, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.32739311081126765, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.35871396031284647, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),person.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3606577181981107, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_company.movie_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3806171651692464, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3835968512976739, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.3838789719713409, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.3868586655946557, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,movie.id), company.name),company.name))", "score": -0.39052996088355013, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Serbia and Montenegro),getData(production_company),country.iso_3166_1,production_company.company_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3979069098947846, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.company_id),country.name,=,Serbia and Montenegro),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,production_company.company_id), company.name),company.name))", "score": -0.40419686714916275, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "What are the distinct names of companies that produced movies in Serbia and Montenegro ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),country.iso_3166_1,production_company.movie_id),country.name,=,Serbia and Montenegro),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.40668052688152795, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 113, "beams": [{"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42), movie.status),movie.status))", "score": -0.17388571919294674, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,<,Camera), movie.status),movie.status))", "score": -0.2211399189717045, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42), movie.status),movie.status))", "score": -0.26944295923479833, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.number,<,42), movie.status),movie.status))", "score": -0.2841017200805172, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(crew),oscar.id,crew.person_id),getData(movie),crew.movie_id,movie.id),oscar.number,<,42), movie.status),movie.status))", "score": -0.2903216651813145, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.status),movie.status))", "score": -0.3000552781955602, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(crew),oscar.id,crew.person_id),getData(movie),crew.movie_id,movie.id),oscar.category,<,Camera), movie.status),movie.status))", "score": -0.30729328562466557, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.status),movie.status))", "score": -0.3081764368063601, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,=,42), movie.status),movie.status))", "score": -0.31249812116611275, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42), movie.status),movie.status))", "score": -0.3163932468608474, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,<,42), movie.status),movie.status))", "score": -0.3166971590135561, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.status),movie.status))", "score": -0.32024595037229653, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id),oscar.number,<,42), movie.status),movie.status))", "score": -0.32359427140299113, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,crew.person_id), movie.status),movie.status))", "score": -0.3283671089830964, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,<,42), movie.status),movie.status))", "score": -0.33135592733513913, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 114, "beams": [{"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.13071829830911966, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.13851190331527666, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.15557811919053383, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.year),oscar.year)", "score": -0.2873698450216002, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.number)", "score": -0.2885491487808505, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.year),oscar.year)", "score": -0.32433040032601324, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.status,=,Released), oscar.id),oscar.number)", "score": -0.3266043970006698, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.year),oscar.year)", "score": -0.3325836708330524, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.number)", "score": -0.3359467825475842, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.4356850702141563, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.year),oscar.number)", "score": -0.44520069549333097, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(oscar),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.44610919229335755, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), oscar.id),oscar.year)", "score": -0.44656708184955257, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.4520147866005767, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of all oscar years where the movie status is released?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.4591287302434296, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.year)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 115, "beams": [{"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.22383230828522702, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.23338069157860916, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_count),movie.vote_average)", "score": -0.2445535831114527, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.25410196640483484, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "score": -0.26311789015463377, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.2674763092481551, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.2800599820341802, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.2869039021401804, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.287969211405393, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_count)", "score": -0.2963883817989652, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.29705055300340366, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.2994875749262055, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),movie.id,cast.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.3093728831122415, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,evil doctor),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.vote_count),movie.vote_average)", "score": -0.31507472536216014, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "What is sum of votes of all movies with the keyword evil doctor?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "score": -0.3170376588054032, "correct_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,evil doctor),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 116, "beams": [{"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))", "score": -0.021136605872015934, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.title),movie.title))", "score": -0.3116065189736997, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,!=,no), movie.title),movie.title))", "score": -0.41884833829681156, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,no), movie.title),movie.title))", "score": -0.5280913140086341, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,!=,no), movie.title),movie.title))", "score": -0.5627367226907789, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,!=,no), movie.title),movie.title))", "score": -0.5820035140064923, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),person.name,!=,no), movie.title),movie.title))", "score": -0.6430680219167811, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,no), movie.title),movie.title))", "score": -0.6510725404335499, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.iso_639_1,!=,no), movie.title),movie.title))", "score": -0.6538870040051346, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,!=,no), movie.title),movie.title))", "score": -0.656687619855802, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),spoken_language.movie_id,!=,no), movie.title),movie.title))", "score": -0.6610603358058142, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(language),movie.original_language,!=,no), movie.title),movie.title))", "score": -0.6874562703233096, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.title),movie.title))", "score": -0.7140094415444764, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,!=,no), movie.title),movie.title))", "score": -0.7154386665133643, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}, {"orig_question": "What movie titles do the movies that have an originial language other than no have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.homepage,!=,no), movie.title),movie.title))", "score": -0.7600019003657508, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 117, "beams": [{"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.11143993112636963, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.13393258574797073, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.3947036665995256, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.5795712274630205, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.5932583224692648, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6020166772251413, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),country.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6176963930280869, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6193610187825263, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),movie.original_language,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6203394335806901, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.sub_category,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6230113309939043, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6252866168733072, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),country.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6264547477839634, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.category,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.6488714021761552, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.release_date))", "score": -0.6703935767654912, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.release_date),movie.popularity))", "score": -0.6855868454222218, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 118, "beams": [{"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "score": -0.018055876149446703, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))", "score": -0.5986388235360209, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.vote_count,>=,262), movie.status),movie.status))", "score": -0.6279373521316155, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_count,>=,262),movie.status), movie.status))", "score": -0.6503088684112299, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>=,262), movie.status),movie.status))", "score": -0.7172507887153188, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.popularity),movie.status))", "score": -0.7506089814851293, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,262), movie.status),movie.status))", "score": -0.760647177361534, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.number,>=,262), movie.status),movie.status))", "score": -0.7669164185790578, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,262), movie.status),movie.status))", "score": -0.7780385610094527, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.popularity))", "score": -0.7853185716230655, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,262), movie.status),movie.status))", "score": -0.7988986020354787, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,262), movie.status),movie.status))", "score": -0.8151460286608199, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(oscar),movie.vote_count,>=,262), movie.status),movie.status))", "score": -0.8358307534799678, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), oscar.sub_category),movie.status))", "score": -0.8390418299386511, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}, {"orig_question": "What different status do movies with a vote count of at least 262 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), country.name),movie.status))", "score": -0.8628618129441747, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,262), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 119, "beams": [{"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.12736235699054352, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),movie.id,language.iso_639_1), language.name),language.name))", "score": -0.24799504980224635, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,production_country.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.24992555494265623, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.27910807692520506, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1489),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.2805338075573358, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.3142104998362721, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,1489), language.name),language.name))", "score": -0.3169531859097949, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_count,>,1489), language.name),language.name))", "score": -0.31961978132479446, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),keyword.name))", "score": -0.32768438605067235, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),cast.person_id,language.iso_639_1), language.name),language.name))", "score": -0.34110000704106097, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),has_genre.genre_id,language.iso_639_1), language.name),language.name))", "score": -0.34305309704400216, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,cast.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3551478003958062, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_count,>,1489),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3591512362180663, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(production_country),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.36030855666789063, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages are movies produced with a vote count higher than 1489?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1489),getData(spoken_language),movie.id,has_genre.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3622799741671622, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1489), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 120, "beams": [{"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.1558394234140909, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,cinematography),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.2128435070047194, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.22957350696876316, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.2570260622707638, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.26551975200135525, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.2733004745775964, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.27549657293820573, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,>=,cinematography),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.2774076414374658, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.28579854715562797, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.30040835205305866, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.30424826372661296, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.3206537136942768, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,cinematography), person.birth_place),person.birth_place))", "score": -0.32214100357932735, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.3406711408314317, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}, {"orig_question": "Are there any birth places of oscar winners when the oscar category was cinematography?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography), person.birth_place),person.birth_place))", "score": -0.35248794401473943, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 121, "beams": [{"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,!=,documentary (feature)),oscar.year),movie.runtime))", "score": -0.22965791997299645, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)),oscar.year),movie.runtime))", "score": -0.25498128766399947, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,!=,documentary (feature)), oscar.year),movie.runtime))", "score": -0.3113769953403233, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.year,!=,documentary (feature)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year),movie.runtime))", "score": -0.31485253898935667, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)), movie.runtime),movie.runtime)", "score": -0.31627954656031587, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)), movie.id),movie.runtime)", "score": -0.3301672350561366, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,>,documentary (feature)),oscar.year),movie.runtime))", "score": -0.34436084482301654, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,>,documentary (feature)),oscar.year),movie.runtime))", "score": -0.3453051481204132, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,!=,documentary (feature)),oscar.year),movie.runtime))", "score": -0.3810317228643478, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)), oscar.year),movie.runtime))", "score": -0.38835160283204706, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,!=,documentary (feature)),oscar.number),movie.runtime))", "score": -0.39213669379029126, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.year,>,documentary (feature)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year),movie.runtime))", "score": -0.41390106242003477, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,!=,documentary (feature)),oscar.year),movie.runtime))", "score": -0.42093646696378295, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,!=,documentary (feature)), movie.id),movie.runtime)", "score": -0.43894551051992775, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}, {"orig_question": "What is the runtime of the movie that was nominated for the oscar in the eldest year not in the oscar category \"documentary (feature)\" ? ", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,!=,documentary (feature)),oscar.number),movie.runtime))", "score": -0.4424354362419659, "correct_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,!=,documentary (feature)),oscar.year),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 122, "beams": [{"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.060238395526922714, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,197),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.14941958063352268, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.2531509892880894, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),person.name))", "score": -0.3122514733287676, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.33685237097797777, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3457079233202588, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,197),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3564179778116964, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),language.name))", "score": -0.3622964984811618, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,197),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3671774974096859, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3742738627456351, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),oscar.number))", "score": -0.3782497578152681, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),production_company.company_id,keyword.id), keyword.name),keyword.name))", "score": -0.3836075540547735, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,oscar.id), keyword.name),keyword.name))", "score": -0.38433209598170226, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),person.death_place))", "score": -0.393311885280427, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}, {"orig_question": "What are the names of the keywords of movies with a runtime smaller than 197 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,197),getData(has_keyword),movie.id,has_keyword.movie_id),getData(company),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3949845600486191, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.runtime,<,197), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 123, "beams": [{"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.status))", "score": -0.11446560018521268, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,nb), movie.title),movie.status))", "score": -0.25033147484010354, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,nb), movie.title),movie.status))", "score": -0.2782069145166855, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))", "score": -0.31080734201532323, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,nb), movie.title),movie.title))", "score": -0.3681047725444981, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,nb), movie.release_date),movie.status))", "score": -0.37578954668955633, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,nb), movie.title),movie.title))", "score": -0.39598021222108004, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,nb), movie.release_date),movie.status))", "score": -0.40366498636613823, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.original_language),movie.status))", "score": -0.40758204863232095, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.original_language,!=,nb), movie.title),movie.status))", "score": -0.4086179512705947, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,nb), movie.original_language),movie.status))", "score": -0.42097546835029326, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.original_language,!=,nb), movie.status),movie.status))", "score": -0.42252640780769884, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.original_language))", "score": -0.435305128179607, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.original_language,!=,nb), movie.title),movie.status))", "score": -0.43649339094717665, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}, {"orig_question": "Are there any movies where nb is not the original language?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,nb), movie.original_language),movie.status))", "score": -0.4488508526501036, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.original_language,!=,nb), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 124, "beams": [{"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.06930815095413206, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(cast),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.18926882449170238, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(movie),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.27189282838554363, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.27557520815289477, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.28941120363058637, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(has_keyword),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.29507086917369596, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),movie.id,language.iso_639_1), language.name),language.name))", "score": -0.3057912816469073, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(oscar_winner),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.31971650959305964, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,cast.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3202351772961934, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,oscar_winner.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3315726010812313, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.runtime,>,122), language.name),language.name))", "score": -0.338905777382774, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,has_keyword.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.35564604439495723, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,movie.vote_average),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.37190252034952087, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),cast.person_id,language.iso_639_1), language.name),language.name))", "score": -0.3784140189433989, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there languages to which movies with a runtime longer than 122 minutes are translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,122),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.3822524539141805, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,122),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 125, "beams": [{"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))", "score": -0.010602272326650564, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))", "score": -0.6229340292047709, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.release_date))", "score": -0.6266769026187831, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.release_date),movie.budget))", "score": -0.6924383966033929, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.title))", "score": -0.7119902227786952, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.original_language))", "score": -0.7513991449741297, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.revenue))", "score": -0.7716132853893214, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.revenue),movie.budget))", "score": -0.7893857685630792, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,2014-01-07), movie.budget),movie.budget))", "score": -0.8049039485413232, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),genre.name))", "score": -0.8062084172634059, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2014-01-07), movie.budget),movie.budget))", "score": -0.8111199381310144, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.title),movie.budget))", "score": -0.8569955555503839, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,2014-01-07), movie.budget),movie.budget))", "score": -0.9207237740411074, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.birth_day,=,2014-01-07), movie.budget),movie.budget))", "score": -0.9335198183907778, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}, {"orig_question": "What are the different budgets for movies released on 2014-01-07?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.release_date,=,2014-01-07),movie.budget), movie.budget))", "score": -0.9427687413335661, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2014-01-07), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 126, "beams": [{"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)", "score": -0.04773016959406316, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,<,151), movie.id),movie.revenue)", "score": -0.32401660952234496, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,>,151), movie.id),movie.revenue)", "score": -0.6774646505582775, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,!=,151), movie.id),movie.revenue)", "score": -0.7398758016044582, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.revenue),movie.revenue)", "score": -0.7820380730421128, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.budget)", "score": -0.7919248170148584, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,>,151), movie.id),movie.revenue)", "score": -0.8152883900991595, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.popularity)", "score": -0.8256437867738027, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.vote_average)", "score": -0.8457800137941042, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.vote_count)", "score": -0.8548274806529278, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>,151), movie.id),movie.revenue)", "score": -0.8548290089914451, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,151), movie.revenue),movie.revenue))", "score": -0.8790567043397459, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),cast.person_id)", "score": -0.9038321581507156, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>=,151), movie.id),movie.revenue)", "score": -0.9179472211460445, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of movies with a runtime bigger than 151 ? ", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),cast.movie_id)", "score": -0.9311599261014782, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,>,151), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 127, "beams": [{"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.0871385597923967, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.1077858264905135, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.revenue,<,25035950),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.2538624351969118, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.2658315425657719, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3385360799226696, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.37075139140131413, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),has_genre.genre_id,language.iso_639_1), language.name),language.name))", "score": -0.3781926575195207, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,>,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3792770604128136, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,!=,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.37974884976655476, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.3847809715868045, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(has_genre),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3890615805263571, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.39702898971001205, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.40251063745767296, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(cast),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.40687971667364614, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(genre),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.41498874666392915, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 128, "beams": [{"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.status))", "score": -0.01570435053508845, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,85), movie.status),movie.status))", "score": -0.5622735395918426, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), country.name),movie.status))", "score": -0.6591518195236858, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),country.name))", "score": -0.7030692838488903, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.popularity),movie.status))", "score": -0.7249706061447796, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), person.birth_place),movie.status))", "score": -0.7291866214836773, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), production_country.movie_id),movie.status))", "score": -0.7459842832649883, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.original_language),movie.status))", "score": -0.7504286439980206, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,>,85), movie.status),movie.status))", "score": -0.7585392851506185, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.status))", "score": -0.7774588374595623, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.release_date),movie.status))", "score": -0.7911210330094036, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),production_country.movie_id))", "score": -0.7925009869395581, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.title))", "score": -0.8015012286959973, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),production_country.iso_3166_1))", "score": -0.8136060975848523, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))", "score": -0.8144632950316009, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 129, "beams": [{"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.17816559520524428, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.20626048638248332, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.21596391441299193, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.23011605975614915, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.244058805590231, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.2481653033146456, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.2582109509333882, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.2679143789638968, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.2783827019748026, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.28596362252239327, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.29600927014113587, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.3001157678655505, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.30647756546365584, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),oscar_winner.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.31130240623918576, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}, {"orig_question": "What are the movie titles when the persons' cast birth day is not 1886-10-12?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.death_day,!=,1886-10-12), movie.title),movie.title))", "score": -0.31528080641552425, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,1886-10-12), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 130, "beams": [{"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.025750059647866242, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.runtime),movie.runtime)", "score": -0.311783177800207, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(country),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.3689795933010245, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(genre),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.3733771885445745, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),production_company.movie_id,production_company.company_id), movie.id),movie.runtime)", "score": -0.37437454348834825, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(filter(merge(getData(company),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id),company.name,=,Aloha Pictures), movie.id),movie.runtime)", "score": -0.390911114452761, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(production_company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.39713528014526606, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),country.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.4007364933165403, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.release_date),movie.runtime)", "score": -0.4022510819208118, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id), movie.id),movie.runtime)", "score": -0.40477792180009414, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),oscar_nominee.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.40921489219779666, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_company.company_id), movie.id),movie.runtime)", "score": -0.41818150561786194, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,company.name), movie.id),movie.runtime)", "score": -0.41821817713638293, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),person.death_place,=,Aloha Pictures),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.4193119975499577, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of all movies produced by Aloha Pictures?", "inferred_code": "sum(distinct(merge(filter(getData(company),company.name,=,Aloha Pictures),merge(getData(production_country),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.41985207774322036, "correct_code": "sum(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,=,Aloha Pictures), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 131, "beams": [{"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))", "score": -0.018606495279527735, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,132), movie.vote_count),movie.vote_count))", "score": -0.37881906254187925, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))", "score": -0.5388755907333689, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,132), movie.vote_count),movie.vote_count))", "score": -0.5965981922854553, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.title))", "score": -0.7009070201820577, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,132), movie.vote_count),movie.vote_count))", "score": -0.7452545009364258, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), oscar.number),movie.vote_count))", "score": -0.7670072352557327, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),oscar.number))", "score": -0.778961090654775, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.title),movie.vote_count))", "score": -0.8073508178858901, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.runtime))", "score": -0.8271559163040365, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,<,132), movie.vote_count),movie.vote_count))", "score": -0.8448101810208755, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.runtime),movie.vote_count))", "score": -0.8476767575411941, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<=,132), movie.vote_count),movie.vote_count))", "score": -0.8890384844198707, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,132), movie.vote_count),movie.vote_count))", "score": -0.9341129473104957, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies which have a runtime of 132 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_average))", "score": -0.9414244576400961, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,132), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 132, "beams": [{"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.22711638896085096, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.2326989612853089, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.24176144677975422, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.24734401910421214, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.2746591381391009, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.2759494144713165, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.2802417104635589, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.28274996350070386, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,>,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.28930419595800416, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar.number), oscar.id),oscar.number)", "score": -0.2921930208720204, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,>,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.29488676828246213, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(movie),movie.vote_average,>,6.2),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.id),oscar.number)", "score": -0.3048608100473772, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),movie.vote_average,>=,6.2),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar.number), oscar.id),oscar.number)", "score": -0.306838095293547, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(movie),movie.vote_average,>,6.2),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.31032542654401074, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}, {"orig_question": "How much is the sum of the nominated movies oscars numbers when the vote average must be 6.2 or more?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,6.2),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3122902363857094, "correct_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,>=,6.2),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 133, "beams": [{"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),movie.popularity))", "score": -0.05573799655758194, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,26500000), movie.popularity),movie.popularity))", "score": -0.3250753712745791, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,26500000), movie.popularity),movie.popularity))", "score": -0.36267258048974327, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))", "score": -0.3683814835640078, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,26500000), movie.popularity),movie.popularity))", "score": -0.430597080001462, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),movie.release_date))", "score": -0.43076739468597225, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,26500000), movie.popularity),movie.popularity))", "score": -0.6047039163204317, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),movie.status))", "score": -0.67292828121208, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.status),movie.popularity))", "score": -0.6744494534468686, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,null,26500000), movie.popularity),movie.popularity))", "score": -0.6950967443081026, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,26500000), movie.popularity),movie.release_date))", "score": -0.7001047694029694, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),movie.revenue))", "score": -0.7020917014124279, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.release_date),movie.popularity))", "score": -0.710701296422485, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),person.gender))", "score": -0.7132091597559338, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}, {"orig_question": "What are the popularities of movies with a budget different than 26500000 ? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,26500000), movie.popularity),movie.original_language))", "score": -0.7160193995478039, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,26500000), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 134, "beams": [{"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.029948446523124717, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,19), movie.title),movie.title))", "score": -0.22243227400101945, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,<,19), movie.title),movie.title))", "score": -0.2529693289838201, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.title),movie.title))", "score": -0.3309369077348229, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<=,19), movie.title),movie.title))", "score": -0.3404656919071376, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.36101779636613235, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,!=,19), movie.title),movie.title))", "score": -0.3873133065684897, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(keyword),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.39287115181074317, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar_nominee),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.3947728521696351, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),keyword.name,<,19), movie.title),movie.title))", "score": -0.4076001299875311, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19), movie.title),movie.title))", "score": -0.409935082120074, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar_nominee.movie_id,<,19), movie.title),movie.title))", "score": -0.41191973081950606, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.4134542262678835, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.41377132156842444, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies  nominated for an oscar with a lower oscar number than 19?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.number,<,19), movie.title),movie.title))", "score": -0.4172371454865057, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,19),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 135, "beams": [{"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.09040396260178261, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>=,2000-01-01), company.name),company.name))", "score": -0.15420505627610806, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.17426208215225342, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>=,2000-01-01), company.name),company.name))", "score": -0.23806317582657888, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.3382786088332154, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,!=,2000-01-01), company.name),company.name))", "score": -0.36667312074024766, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>,2000-01-01), company.name),company.name))", "score": -0.3783863290823247, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01),production_company.movie_id,movie.id),person.id,production_company.company_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.38838950132945776, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>,2000-01-01), company.name),company.name))", "score": -0.39613379581642555, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>=,2000-01-01), company.name),company.name))", "score": -0.4020797025075409, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01),production_company.movie_id,movie.id),person.id,production_company.movie_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.40226921821044104, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id),person.birth_day,>,2000-01-01), company.name),company.name))", "score": -0.4148060119962118, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.death_day,>,2000-01-01), company.name),company.name))", "score": -0.41970771406942603, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2000-01-01), company.name),company.name))", "score": -0.42213673752085357, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}, {"orig_question": "How many companies released a movie after 2000-01-01?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_day,>,2000-01-01), movie.title),company.name))", "score": -0.4392149318071354, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,>=,2000-01-01), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 136, "beams": [{"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))", "score": -0.23396250558370843, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))", "score": -0.26701309949299207, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.name),person.name))", "score": -0.2730655546921652, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,spoken_language.movie_id), person.name),person.name))", "score": -0.2998412338353851, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.name),person.name))", "score": -0.3061161486014488, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(person),cast.person_id,person.id),movie.status,!=,Rumored), person.name),person.name))", "score": -0.3116071317555327, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,spoken_language.movie_id),getData(person),cast.person_id,person.id),movie.status,!=,Rumored), person.name),person.name))", "score": -0.32729529140861263, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,spoken_language.movie_id), person.name),person.name))", "score": -0.3328918277446687, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.name),person.name))", "score": -0.35026875299446597, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Rumored),getData(spoken_language),movie.id,spoken_language.movie_id),getData(person),cast.person_id,person.id), person.name),person.name))", "score": -0.37222535656646355, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.name))", "score": -0.3753645046737166, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),movie.status,!=,Rumored), person.name),person.name))", "score": -0.38875351458039714, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),movie.id,oscar_winner.movie_id), person.name),person.name))", "score": -0.3893718021029227, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Rumored),merge(getData(spoken_language),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), language.name),person.name))", "score": -0.39567006011640493, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}, {"orig_question": "Do people exist who were part of a cast for a movie that doesn't have the status rumored? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Rumored),getData(spoken_language),movie.id,spoken_language.movie_id),getData(person),cast.person_id,person.id), country.name),person.name))", "score": -0.3956959104757736, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.status,!=,Rumored),getData(person),cast.person_id,person.id), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 137, "beams": [{"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.11586056409483328, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.146911139509847, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,!=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.17356363856230922, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,!=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.20461421397732293, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.24383613707877735, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.2845775943629249, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,!=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.3015392115462533, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.3156281697779386, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,!=,16.4734), language.name),language.name))", "score": -0.3516839310203471, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),keyword.name))", "score": -0.364052728828642, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),language.name))", "score": -0.37970299388002887, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,<,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.39072556223163746, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),oscar.category))", "score": -0.39914125881524876, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,=,16.4734), language.name),language.name))", "score": -0.4098477535179999, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Is there a language to which a movie with popularity 16.4734 has been translated to?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.original_language))", "score": -0.41075356929504264, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,16.4734),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 138, "beams": [{"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.death_place))", "score": -0.058727533294586465, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_place),person.death_place))", "score": -0.3155237536120694, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.name))", "score": -0.4720752022403758, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.name),person.death_place))", "score": -0.5094143438327592, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,f), person.death_place),person.death_place))", "score": -0.527762917074142, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,<,f), person.death_place),person.death_place))", "score": -0.5696885983634274, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_day),person.death_place))", "score": -0.5983313608157914, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.birth_place))", "score": -0.6310679993766826, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.death_day))", "score": -0.6375473818916362, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),person.gender))", "score": -0.6469405374664348, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_place),person.death_place))", "score": -0.6493678975093644, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),genre.name))", "score": -0.676508017553715, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_place),keyword.name))", "score": -0.7013836584228557, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.gender),person.death_place))", "score": -0.7050466227519792, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}, {"orig_question": "Where did non female persons die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), genre.name),person.death_place))", "score": -0.7175692605960649, "correct_code": "done(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.death_place), person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 139, "beams": [{"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.042164112910127345, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,>=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.2395060149792629, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,0.217538),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.25894988419843473, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.year),oscar.sub_category))", "score": -0.2831833858861868, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.number))", "score": -0.3227063016769509, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.3257763208204311, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.year))", "score": -0.3440578481921923, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.number),oscar.sub_category))", "score": -0.3450888573560716, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.3660010985458557, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.36777082582520815, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.category))", "score": -0.37338974569353867, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,has_keyword.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.37494131146223114, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.category),oscar.sub_category))", "score": -0.3935618378558661, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.movie_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.3941775453216053, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many oscars sub categories are there with a movie popularity of 0.217538?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.popularity,!=,0.217538), oscar.sub_category),oscar.sub_category))", "score": -0.40434311826135455, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,=,0.217538),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 140, "beams": [{"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.13102680246909007, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.21468421666362741, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_place),person.death_place))", "score": -0.2579951092292381, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_place),person.death_place))", "score": -0.2666044694585056, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_day),person.death_place))", "score": -0.2701404358105723, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_day),person.death_place))", "score": -0.2787497960398398, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ro),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.3313721639781669, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.33444166797099484, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_place),person.death_place))", "score": -0.35117276509381545, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_place),person.death_place))", "score": -0.3526334537039305, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.35586701898612794, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_day),person.death_place))", "score": -0.36331809167514967, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_day),person.death_place))", "score": -0.3647787802852647, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,ro),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_place),company.name))", "score": -0.3764994709874633, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death for crew members who have died except those where the original movie language is Romanian ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.original_language,=,ro), person.death_place),person.death_place))", "score": -0.3784869279641201, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,ro),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 141, "beams": [{"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,germany), movie.id),movie.vote_average)", "score": -0.08826748387893601, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,germany), movie.id),movie.vote_average)", "score": -0.1396668050549327, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.22486446726981682, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.vote_average)", "score": -0.23329673793562247, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,germany), movie.vote_average),movie.vote_average)", "score": -0.26565083385215765, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.285951416358302, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.vote_average)", "score": -0.3049135302457721, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,germany),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.vote_average)", "score": -0.35027853508686096, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,germany),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.35972402454011765, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,germany),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.3663224111525574, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,germany),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.40596885274621325, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),movie.id,has_keyword.movie_id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.41174737513494303, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,germany), movie.vote_average),movie.vote_average)", "score": -0.4119341445123707, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.4168772888788592, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of vote averages for movies with the keyword germany?", "inferred_code": "sum(distinct(filter(merge(merge(getData(has_keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,germany), movie.id),movie.vote_average)", "score": -0.42793112650719584, "correct_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,germany),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 142, "beams": [{"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.11960191417959318, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.13557248650757397, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,>=,5.93923), movie.original_language),language.name))", "score": -0.26019573087685055, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.popularity,>=,5.93923), language.name),language.name))", "score": -0.26087123888759417, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.popularity,>=,5.93923), movie.original_language),language.name))", "score": -0.2830926326688279, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.popularity,>=,5.93923), language.name),language.name))", "score": -0.29198835725941796, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.33911493953748845, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3403231288971881, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.3550855118654692, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,<=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3571076777457748, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,!=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3628958705607082, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),movie.id,language.iso_639_1), language.name),language.name))", "score": -0.365666440218827, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>=,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),movie.id,language.iso_639_1), language.name),language.name))", "score": -0.3816370125468078, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,5.93923),getData(spoken_language),movie.id,production_country.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3823325342765771, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}, {"orig_question": "Are there any languages in movies when the movie popularity was 5.93923 or more?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,5.93923),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.3850920845109143, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,5.93923),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 143, "beams": [{"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.1779014624889777, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,!=,sound editing), movie.id),movie.popularity)", "score": -0.21854460608280074, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.2223391257669304, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.popularity)", "score": -0.24572725163813322, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)", "score": -0.25156599407436225, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,!=,sound editing), movie.id),movie.popularity)", "score": -0.25694609499908455, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.popularity),movie.popularity)", "score": -0.26289277258607086, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,!=,sound editing), movie.id),movie.popularity)", "score": -0.2763587066817434, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)", "score": -0.2817236135447448, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.popularity),movie.popularity)", "score": -0.2930503920564534, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.31072348757432144, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.3551611508522742, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,!=,sound editing),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.popularity)", "score": -0.37854927672347694, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,!=,sound editing), movie.id),movie.popularity)", "score": -0.38387759202576677, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have won an oscar in a category other than sound editing?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),oscar.number,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)", "score": -0.3995418419350386, "correct_code": "avg(distinct(merge(filter(getData(oscar),oscar.category,!=,sound editing),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 144, "beams": [{"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.status),movie.status))", "score": -0.1304978023278001, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.status))", "score": -0.14914657253625668, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.status),movie.title))", "score": -0.16539115799042134, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.1840399281988779, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))", "score": -0.22773873870639375, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.title),movie.status))", "score": -0.2961228649453598, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.status),movie.release_date))", "score": -0.3088841573953753, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand),getData(movie),production_country.movie_id,movie.id), movie.status),movie.status))", "score": -0.31607328855363426, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.release_date))", "score": -0.32753292760383185, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))", "score": -0.33462008842154933, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.title))", "score": -0.34048035453303105, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), country.name),movie.status))", "score": -0.35318300962712973, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.title),movie.status))", "score": -0.36693843306483226, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), country.name),movie.title))", "score": -0.388076365289751, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}, {"orig_question": "What are the statuses of movies wit New Zealand as production country?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,New Zealand),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.status),movie.runtime))", "score": -0.40026141252182185, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,New Zealand), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 145, "beams": [{"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.33012207565434776, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),person.id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.35618544964318577, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.3720420725995679, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.376492280033461, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(production_company),spoken_language.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.37722529297929136, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,cast.person_id),getData(company),production_company.company_id,company.id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.37964373507073085, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.38217489985063147, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.3848915113842868, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.39973221466572173, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.40078279094550584, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.40135707989876657, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(production_company),spoken_language.movie_id,movie.id),person.id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,2013-02-13), company.name),company.name))", "score": -0.40328866308677946, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.4032908807675362, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,has_genre.genre_id),getData(company),production_company.company_id,company.id),language.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.4329427746350306, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,cast.person_id),getData(company),production_company.company_id,company.id),language.name,!=,Sloven\u0161?ina), company.name),company.name))", "score": -0.44054443710619356, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 146, "beams": [{"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.08572222380462335, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.18373812450590776, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.original_language,=,Sense and Sensibility),movie.original_language), movie.original_language))", "score": -0.46311626411625184, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))", "score": -0.5154670087213162, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.6129464478653972, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sense and Sensibility), movie.title),movie.original_language))", "score": -0.6614825063807075, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.tagline,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.6948932380837505, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),keyword.name,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.7024464578789775, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.7124029369515483, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sense and Sensibility), movie.original_language),movie.title))", "score": -0.7218582576097106, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sense and Sensibility), movie.original_language),language.name))", "score": -0.7270681804002379, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.7449492227242445, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.category,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.7480533094567363, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sense and Sensibility), movie.title),movie.original_language))", "score": -0.7594984070819919, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}, {"orig_question": "What is the original language of Sense and Sensibility?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.sub_category,=,Sense and Sensibility), movie.original_language),movie.original_language))", "score": -0.7606387109917705, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.title,=,Sense and Sensibility),movie.original_language), movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 147, "beams": [{"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))", "score": -0.10451817951980047, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,<,2.2),movie.revenue), movie.revenue))", "score": -0.19497436835081317, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_count,<,2.2),movie.revenue), movie.revenue))", "score": -0.4698278344294522, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_count,<,2.2), movie.revenue),movie.revenue))", "score": -0.575333638172461, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average,<,2.2), movie.revenue),movie.revenue))", "score": -0.5821184622514615, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,2.2), movie.revenue),movie.revenue))", "score": -0.6015061761427205, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.person_id,movie.id),movie.id,cast.movie_id),movie.vote_average,<,2.2), movie.revenue),movie.revenue))", "score": -0.6218379317280446, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.revenue,<,2.2), movie.revenue),movie.revenue))", "score": -0.6292531766776631, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.vote_average,<,2.2), movie.revenue),movie.revenue))", "score": -0.6343488817825962, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))", "score": -0.6687125536554959, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,2.2), movie.revenue),movie.revenue))", "score": -0.7161293965473305, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.budget),movie.revenue))", "score": -0.7177175571850967, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,<=,2.2),movie.revenue), movie.revenue))", "score": -0.7456597261189017, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(distinct(extractValues(merge(filter(getData(movie),movie.vote_average,<,2.2),merge(getData(cast),getData(cast),cast.person_id,movie.id),movie.id,cast.movie_id),movie.revenue), movie.revenue))", "score": -0.7696805523704596, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues do movies with an average rating of less than 2.2 have?", "inferred_code": "done(distinct(extractValues(merge(filter(getData(movie),movie.vote_average,<,2.2),merge(getData(cast),getData(cast),cast.person_id,movie.id),movie.id,movie.revenue),movie.revenue), movie.revenue))", "score": -0.7969413054520869, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.2), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 148, "beams": [{"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.2510442285384452, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,assistant director), movie.original_language),movie.original_language))", "score": -0.26180656971490057, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.2674561625671969, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.28569817045257867, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.original_language),movie.original_language))", "score": -0.2909649090052312, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.original_language),movie.original_language))", "score": -0.30920691689061297, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.31576683908916636, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,assistant director), movie.original_language),movie.original_language))", "score": -0.3446115598554824, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,assistant director), language.name),movie.original_language))", "score": -0.35304511931890237, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,assistant director), movie.original_language),movie.original_language))", "score": -0.3842022446610036, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,assistant director),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.3870405354362168, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),language.name,=,assistant director), movie.original_language),movie.original_language))", "score": -0.3922905326985117, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.year,=,assistant director),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.40084792715007134, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,assistant director),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.40528259537576383, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}, {"orig_question": "What's the number of different original languages of movies where oscars for assistant directors were awarded?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),person.name,=,assistant director),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), language.name),movie.original_language))", "score": -0.4077894553098236, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,assistant director),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 149, "beams": [{"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.title))", "score": -0.1484072916078343, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.1532955454320643, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili), movie.title),movie.title))", "score": -0.2026714522560354, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili), movie.title),movie.original_language))", "score": -0.27417723577755904, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.30377105291529344, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili), movie.original_language),movie.title))", "score": -0.3062358367811652, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.original_language))", "score": -0.3086593067395234, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),movie.original_language,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.title))", "score": -0.3095650093446155, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),movie.original_language,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.3144532631688455, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.status))", "score": -0.31936954649979094, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili), oscar.category),movie.title))", "score": -0.3219396259742629, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.status))", "score": -0.32425780032402096, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili), movie.status),movie.title))", "score": -0.3264630133257434, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.title))", "score": -0.34022423822223374, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.3451124920464637, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 150, "beams": [{"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.051627828016976414, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.2134703698593566, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.2742376271051087, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_company.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.326891917132685, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.status,=,Sweden), movie.title),movie.title))", "score": -0.33113769408289817, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_company),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.3320446371276742, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.34158256835363565, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.3456995167823875, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.3534223524901051, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),company.name,=,Sweden), movie.title),movie.title))", "score": -0.36423902197525526, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.iso_3166_1,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.36630520463623856, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),oscar.sub_category,=,Sweden), movie.title),movie.title))", "score": -0.37294464032399705, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),person.birth_place,=,Sweden), movie.title),movie.title))", "score": -0.37448850055336264, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Sweden), movie.title),movie.title))", "score": -0.3827598070288505, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many unique movie titles are from movies produced in Sweden?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1),country.name,=,Sweden), movie.title),movie.title))", "score": -0.3829946238055144, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Sweden),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 151, "beams": [{"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.14432953683617453, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)", "score": -0.1458709720363183, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,!=,Italy), movie.id),movie.revenue)", "score": -0.24147619481296892, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(merge(filter(getData(country),country.name,=,Italy),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.2997069633755569, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3205430834235617, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),getData(movie),production_country.movie_id,movie.id), movie.title),movie.revenue)", "score": -0.32789511153362805, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.33176052524278893, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.33913499847390627, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),merge(getData(movie),getData(movie),movie.id,movie.id),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.3549105856122936, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),getData(movie),production_country.movie_id,movie.id), movie.release_date),movie.revenue)", "score": -0.3554506940567388, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.revenue)", "score": -0.35974339013717055, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),getData(movie),production_country.movie_id,movie.id), movie.popularity),movie.revenue)", "score": -0.39927603430169145, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Italy),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.41112622260727194, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.revenue),movie.revenue))", "score": -0.4167889249410221, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.42543392713268396, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 152, "beams": [{"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.09723251879040617, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))", "score": -0.2283281650907205, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.3604414358200083, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.37708453012848286, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(company),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.3771007192117395, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(oscar),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.4208583068830194, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.release_date),movie.popularity))", "score": -0.43211187243286986, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.popularity))", "score": -0.4489799816381403, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(genre),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.45444427251641173, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(country),keyword.name,=,cgi), movie.popularity),movie.popularity))", "score": -0.4629938733560266, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.release_date))", "score": -0.46453711874206793, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.revenue),movie.popularity))", "score": -0.4745173741462933, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(getData(keyword),keyword.name,=,cgi), movie.popularity),movie.release_date))", "score": -0.48156051903788466, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), person.gender),movie.popularity))", "score": -0.5009682718466575, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}, {"orig_question": "How many distinct popularities are there for movies with the keyword \"cgi\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,cgi), movie.popularity),movie.release_date))", "score": -0.5171031552468711, "correct_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,cgi),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 153, "beams": [{"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.sub_category),oscar.number))", "score": -0.14281957091906944, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.number),oscar.number))", "score": -0.1479720383959801, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.category),oscar.number))", "score": -0.20482493322464582, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), keyword.name),oscar.number))", "score": -0.23372207433733574, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.24520520190001288, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.2520701273716042, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.sub_category),oscar.number))", "score": -0.2993946680943908, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.number),oscar.number))", "score": -0.3045471355713015, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,>,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.33233586936030995, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.category),oscar.number))", "score": -0.36140003039996715, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.sub_category),oscar.category))", "score": -0.3657819821541628, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.sub_category),keyword.name))", "score": -0.367176449005722, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.number),oscar.category))", "score": -0.37093444963107347, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,13391174),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.3713918349224775, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}, {"orig_question": "In what oscar categories have oscars been won for movies with a revenue of at most 13391174?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.revenue,<=,13391174), oscar.number),keyword.name))", "score": -0.37232891648263267, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,13391174),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 154, "beams": [{"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.18483414669188525, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,>=,550000), person.gender),person.gender))", "score": -0.19528728317694613, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.budget,<=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.23508291706050072, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.budget,>=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.2537692504406722, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.budget,<=,550000),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.gender),person.gender))", "score": -0.27039293286971156, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,oscar_winner.movie_id),movie.budget,<=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3094038252830409, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,oscar_winner.movie_id),movie.budget,>=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.32809015866321245, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.person_id),movie.budget,<=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3316013560928758, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id),movie.budget,<=,550000), person.gender),person.gender))", "score": -0.3398260485478766, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,crew.movie_id),movie.budget,<=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3459209297823737, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id),movie.budget,>=,550000), person.gender),person.gender))", "score": -0.3502791850329375, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.person_id),movie.budget,>=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3502876894730473, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,crew.movie_id),movie.budget,>=,550000),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3646072725765964, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<=,550000),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.3676884464539569, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}, {"orig_question": "Are there persons gender for oscar winner movies with a budget smaller or equal than 550000 ?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000),person.gender), person.gender))", "score": -0.39771523378419277, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.budget,<=,550000), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 155, "beams": [{"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),movie.budget),movie.vote_average))", "score": -0.16130275835540805, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,tape recorder),movie.budget),movie.vote_average))", "score": -0.19354175154602957, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,tape recorder),movie.budget),movie.vote_average))", "score": -0.1973767303140534, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,tape recorder),movie.budget),movie.vote_average))", "score": -0.21446369711160898, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(keyword),keyword.name,=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.budget),movie.vote_average))", "score": -0.22683365662723012, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(keyword),keyword.name,!=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.budget),movie.vote_average))", "score": -0.24894948676331016, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),movie.budget),movie.vote_average))", "score": -0.2801561811991573, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.budget),movie.vote_average))", "score": -0.293856015197698, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))", "score": -0.32686053278424754, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))", "score": -0.3571300257276373, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))", "score": -0.3801505342468247, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))", "score": -0.39129526907630346, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),movie.revenue),movie.vote_average))", "score": -0.42274437278598004, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),movie.budget),movie.vote_average))", "score": -0.42978680970815425, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))", "score": -0.4392341224780773, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 156, "beams": [{"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.014025307198608061, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.5095071807217539, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.5235018921183097, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6465836680631861, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.title),movie.original_language))", "score": -0.6476094818754063, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),language.name))", "score": -0.6568454440530331, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,cast.movie_id),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6605783639542457, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))", "score": -0.6610694214286923, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.6754569207441412, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.6894516321406969, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), language.name),movie.original_language))", "score": -0.7117850876493321, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.title))", "score": -0.712507956832269, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,48000000), movie.original_language),movie.original_language))", "score": -0.7168190095071623, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.budget,=,48000000),movie.original_language), movie.original_language))", "score": -0.7230202140053734, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a budget of 48000000 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,48000000), movie.original_language),movie.original_language))", "score": -0.7621397503498883, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,48000000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 157, "beams": [{"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),movie.vote_average))", "score": -0.09611692708494957, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), oscar.year),movie.vote_average))", "score": -0.3358259448832541, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),oscar.year))", "score": -0.36335435193541343, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),movie.runtime))", "score": -0.36779704373839195, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),oscar.sub_category))", "score": -0.3921535877561837, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),movie.vote_count))", "score": -0.4556539325094491, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), person.name),movie.vote_average))", "score": -0.5492479452914267, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.runtime),movie.vote_average))", "score": -0.5767738470858603, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),oscar.number))", "score": -0.5773804454183846, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), oscar.sub_category),movie.vote_average))", "score": -0.5878247270411521, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), oscar.year),oscar.year))", "score": -0.603063369733718, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), oscar.year),movie.runtime))", "score": -0.6075060615366965, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),person.name))", "score": -0.6075557736730843, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), movie.vote_average),movie.title))", "score": -0.6083601383543282, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}, {"orig_question": "Find the voting average of the movies with the movie budget of 130000000.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,130000000), oscar.year),oscar.sub_category))", "score": -0.6318626055544883, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,130000000), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 158, "beams": [{"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,=,special effects),movie.runtime),movie.popularity))", "score": -0.2435726798300745, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,special effects),movie.runtime),movie.popularity))", "score": -0.25658726667064313, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))", "score": -0.285222644314308, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special effects),movie.runtime),movie.popularity))", "score": -0.3157586495920069, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),movie.runtime),movie.popularity))", "score": -0.32261406354930744, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.runtime,=,special effects),movie.runtime),movie.popularity))", "score": -0.32666597085227406, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,special effects),movie.runtime),movie.popularity))", "score": -0.33968055769284267, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,=,special effects),movie.runtime),movie.popularity))", "score": -0.36417489326668606, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,special effects),movie.runtime),movie.popularity))", "score": -0.37718948010725467, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.status,=,special effects),movie.runtime),movie.popularity))", "score": -0.38011510583340224, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.runtime),movie.popularity))", "score": -0.395785118342671, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,special effects),movie.runtime),movie.popularity))", "score": -0.3988519046193049, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,special effects),movie.runtime),movie.popularity))", "score": -0.4057073094394381, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,=,special effects), movie.runtime),movie.popularity))", "score": -0.4326243002381836, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.runtime,=,special effects), movie.popularity),movie.popularity))", "score": -0.4521428268817481, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 159, "beams": [{"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.24507904884202192, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2506590532631063, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2587455611999494, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2667911674218374, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.27392257793150476, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.27917379066113523, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.28045767977976493, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.28758909028943225, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.2960144838579793, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.3008859092409507, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),crew.person_id,person.id),person.id,person.id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.3080173197506181, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.person_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.30968098218179474, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(person),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.3135715914960427, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),person.death_place))", "score": -0.31772658228746503, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}, {"orig_question": "Where died the person which died on 1975-10-25?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,=,1975-10-25),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.death_day,=,1975-10-25), person.death_place),None))", "score": -0.3568213249474123, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1975-10-25), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 160, "beams": [{"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2006526836205269, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.person_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2104352640247802, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.24116893421455077, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2454265517096756, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.person_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.25520913211392887, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_day,=,South Paris),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.25693437022329724, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_place,=,South Paris),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.262394439157808, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.person_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.283490010734855, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,genre.id), genre.name),genre.name))", "score": -0.28475406878050497, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(genre),oscar_nominee.person_id,genre.id), genre.name),genre.name))", "score": -0.2867986347652211, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2925035776684142, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.person_id,genre.id), genre.name),genre.name))", "score": -0.29453664918475825, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.person_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.29805306362827994, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(filter(merge(getData(person),merge(getData(has_genre),getData(movie),oscar_nominee.movie_id,movie.id),person.id,has_genre.genre_id),movie.status,=,South Paris),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),None))", "score": -0.30851628790945, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there in movies with oscar nominees that were born in \"South Paris\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(filter(merge(getData(person),merge(getData(has_genre),getData(movie),oscar_nominee.movie_id,movie.id),person.id,has_genre.genre_id),person.birth_place,=,South Paris),getData(genre),has_genre.genre_id,genre.id),oscar_nominee.movie_id,has_genre.genre_id), genre.name),None))", "score": -0.31245803999151284, "correct_code": "count(extractValues(distinct(merge(merge(merge(merge(filter(getData(person),person.birth_place,=,South Paris),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 161, "beams": [{"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.03783328078089577, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))", "score": -0.21061327037015734, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,is),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.25216528774933133, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3034194393651084, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),company.name))", "score": -0.3523957730266705, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3563273070105483, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,is), country.name),country.name))", "score": -0.36171285191866354, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))", "score": -0.38432186600787877, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,is), country.name),country.name))", "score": -0.39639828662768495, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),oscar.sub_category))", "score": -0.3968325045594374, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),person.birth_place))", "score": -0.4042464707858523, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,!=,is),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.4167405354503849, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(production_country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.43801075768951864, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,!=,is), country.name),country.name))", "score": -0.4408397390345574, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}, {"orig_question": "Which countries have made movies in which the original language is Icelandic?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,company.id),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.44389975789493463, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 162, "beams": [{"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.31843799487613894, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id), keyword.name),movie.title))", "score": -0.32861295605734625, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),oscar_winner.oscar_id,keyword.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.32989207617877103, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.33205181571506, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id), keyword.name),oscar.sub_category))", "score": -0.3365654448532582, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.34212090674535955, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),movie.title))", "score": -0.3422267768962673, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),oscar_winner.oscar_id,keyword.id),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.3493123343476496, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),oscar.sub_category))", "score": -0.3501792656921792, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),movie.title))", "score": -0.35229586792656686, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(oscar),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3545441843822283, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.keyword_id), keyword.name),keyword.name))", "score": -0.3557347275842806, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),oscar.sub_category))", "score": -0.36024835672247885, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(oscar),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.movie_id), keyword.name),movie.title))", "score": -0.3647191455634356, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}, {"orig_question": "Has any movie with the keyword horror won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(keyword),keyword.name,=,horror),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(has_keyword),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),keyword.id,has_keyword.keyword_id), keyword.name),movie.title))", "score": -0.43480653288314647, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),keyword.id,has_keyword.keyword_id),keyword.name,=,horror), oscar.year),oscar.year))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 163, "beams": [{"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.1382006522774354, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.1582570734392348, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.24400547908843442, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>=,160), genre.name),genre.name))", "score": -0.2576204697470254, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.26406190025023385, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>=,160), genre.name),genre.name))", "score": -0.2776768909088248, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.year,>=,160), genre.name),genre.name))", "score": -0.28219446591435765, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.category,>=,160), genre.name),genre.name))", "score": -0.29564802663850814, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.year,>=,160), genre.name),genre.name))", "score": -0.3022508870761571, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.status,>=,160), genre.name),genre.name))", "score": -0.3092069184123926, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.category,>=,160), genre.name),genre.name))", "score": -0.3157044478003076, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),oscar.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.status,>=,160), genre.name),genre.name))", "score": -0.32926333957419207, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,160), genre.name),genre.name))", "score": -0.35627578210440813, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.title,>=,160), genre.name),genre.name))", "score": -0.36342528714397326, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genres of all movies that run at least 160 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),oscar.number,>=,160), genre.name),genre.name))", "score": -0.3656503169667694, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,160),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 164, "beams": [{"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.08001254487317055, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.death_place))", "score": -0.29711465898435563, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.3309783822624013, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.38150351110380143, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.4931416410937557, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),keyword.name))", "score": -0.5376723891822621, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Duarte, Kalifornien), person.name),person.death_place))", "score": -0.5480804963735864, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.5780615393574803, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.death_place),person.name))", "score": -0.5912123377202079, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.5970334297744557, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Duarte, Kalifornien), person.name),person.death_place))", "score": -0.5986056252149865, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_place,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.6050643983836024, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Duarte, Kalifornien), person.name),person.death_place))", "score": -0.618025602016344, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.gender))", "score": -0.624021369847469, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}, {"orig_question": "Who died in Duarte, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),genre.name,=,Duarte, Kalifornien), person.name),person.name))", "score": -0.664634574088268, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Duarte, Kalifornien), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 165, "beams": [{"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,cast.person_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2827878260774263, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,crew.person_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3043102342988479, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,movie.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.32065999433363324, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,cast.person_id),getData(company),production_company.movie_id,company.id), company.name),company.name))", "score": -0.3417849803848963, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,production_company.company_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.34926616958189766, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,crew.person_id),getData(company),production_company.movie_id,company.id), company.name),company.name))", "score": -0.36330738860631795, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,movie.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.3686420943130019, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,movie.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.37199618202066953, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.3732068427331853, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,production_company.company_id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.3774922306600734, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.37774476993880496, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(company),production_company.movie_id,company.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.38276754847438954, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.3882373948902259, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.39124294925187114, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,production_company.company_id), company.name),company.name))", "score": -0.3950941833114, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 166, "beams": [{"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.14565898928412935, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.status))", "score": -0.41587478559085866, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.4268390964850842, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.status))", "score": -0.4346958996786681, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.vote_count,=,Clare Niederpruem),movie.revenue),movie.status))", "score": -0.4658789102322771, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.revenue),movie.status))", "score": -0.49248965028704056, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.5052405506617942, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.5084555170035672, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.status))", "score": -0.513097353855378, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.5246288732248907, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.status))", "score": -0.5324856099663486, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.runtime))", "score": -0.5332831418008589, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.runtime))", "score": -0.5411399449944427, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(cast),movie.id,movie.id),movie.vote_count,=,Clare Niederpruem),movie.vote_count),movie.status))", "score": -0.5412887137867479, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}, {"orig_question": "What's the status of the movie with the highest vote count starring Clare Niederpruem?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),getData(cast),movie.id,cast.movie_id),movie.vote_count,=,Clare Niederpruem),movie.vote_average),movie.status))", "score": -0.5444106617450108, "correct_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Clare Niederpruem),getData(movie),cast.movie_id,movie.id),movie.vote_count),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 167, "beams": [{"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.21393956406291223, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),oscar.year)", "score": -0.3358530081084906, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,movie.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.3458971890789592, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), movie.id),movie.runtime)", "score": -0.38133194688715116, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.3890139946037364, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.39330074496884787, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.vote_average)", "score": -0.40119131693693594, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,cast.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.4103783115029091, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.4338435379535719, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,has_genre.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.4358960291827554, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.4377329622701428, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,crew.movie_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.4390343272492185, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.oscar_id),movie.vote_count,<,52), movie.id),movie.runtime)", "score": -0.43963018503559836, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,=,52), movie.id),movie.runtime)", "score": -0.4418690218996927, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}, {"orig_question": "What is the average year for movies to receive a oscar if the movie vote count is lower or equal than 52?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<,52), oscar.id),movie.runtime)", "score": -0.4668393749742515, "correct_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,52), oscar.id),oscar.year)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 168, "beams": [{"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "score": -0.2573397240116776, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),oscar.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.27834350742394615, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(getData(oscar_winner),oscar.sub_category,=,writing (original story)),getData(person),crew.person_id,person.id),oscar.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.29238485755618987, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_nominee.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.29935469298244133, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.3092363318437127, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,person.id),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "score": -0.31573959522268885, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.status,=,writing (original story)),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.33429811451539826, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.category,=,writing (original story)),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.342854362577665, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(filter(getData(oscar_nominee),oscar.sub_category,=,writing (original story)),getData(person),crew.person_id,person.id),oscar.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.3432204647294522, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),country.name,=,writing (original story)),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.34742982499758, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.status,=,writing (original story)),oscar.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.3494001338299362, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.birth_place,=,writing (original story)),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.3550290819185942, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.3565389663786151, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.category,=,writing (original story)),oscar.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.3579563900867087, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}, {"orig_question": "Are there birth places of crew members of movies nominated for oscar in the sub category \"writing (original story)\" ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (original story)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,=,writing (original story)),oscar.id,crew.person_id), person.birth_place),person.birth_place))", "score": -0.3587081185414841, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing (original story)), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 169, "beams": [{"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.1855129146617891, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.19609301457864367, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,<=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.20842183496103403, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,>=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.24941469392798377, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<=,1948-06-03), oscar.category),oscar.sub_category))", "score": -0.2625758369564024, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.27171558016282044, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1948-06-03), oscar.category),oscar.sub_category))", "score": -0.273155936873257, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.27947102171365895, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.3317508097102265, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.33950625126106504, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,<=,1948-06-03), oscar.category),oscar.sub_category))", "score": -0.3562543531151737, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<=,1948-06-03), oscar.number),oscar.sub_category))", "score": -0.3566148364169456, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_place,<=,1948-06-03), oscar.sub_category),oscar.sub_category))", "score": -0.3591260817370538, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,<=,1948-06-03), oscar.sub_category),oscar.category))", "score": -0.366464528899223, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "In how many distinct subcategories are there oscars with nominated people that were born on or before 1948-06-03 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1948-06-03), oscar.number),oscar.sub_category))", "score": -0.3671949629146505, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1948-06-03),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 170, "beams": [{"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3231290564240822, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.33751061781881836, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.39483364674758703, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(has_genre),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4036818508656326, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(person),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.40422096115557554, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(spoken_language),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4047397370771918, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.id),movie.revenue)", "score": -0.4074005222920813, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.41806341226036875, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(person),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4186025225503117, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.419121298471928, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1), movie.id),movie.revenue)", "score": -0.42178208368681747, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.revenue)", "score": -0.430578009151086, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,has_genre.genre_id), movie.id),movie.revenue)", "score": -0.43348557287473766, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(genre),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4441448968426894, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}, {"orig_question": "What is the averaged revenue of movies released in 2013-01-14 ?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,=,2013-01-14),merge(getData(production_country),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id), movie.id),movie.revenue)", "score": -0.44495954644356167, "correct_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2013-01-14), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 171, "beams": [{"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.10291522642364725, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.20301096029577148, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.2663740680081205, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.30558681185591374, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.3161645082737861, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.3179453655887767, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.3289914278126224, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.33793859077882077, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(person),person.birth_day,>,1909-11-09),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.35734050489793956, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.3699102124477082, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.38138522757454624, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.39376353324139973, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.4013017176653769, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.405312369273498, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.movie_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.4102191233695857, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 172, "beams": [{"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,9500000), movie.id),movie.vote_count)", "score": -0.15354513060368383, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_count),movie.vote_count))", "score": -0.2914504629006842, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<,9500000), movie.id),movie.vote_count)", "score": -0.40974329727094855, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,9500000), movie.id),movie.vote_average)", "score": -0.46998432248016725, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,=,9500000), movie.id),movie.vote_count)", "score": -0.5230170278425643, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,9500000), movie.id),movie.vote_count)", "score": -0.5368293047762894, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,=,9500000), movie.id),movie.vote_count)", "score": -0.5620396317083356, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(merge(getData(movie),getData(movie),movie.id,cast.movie_id),movie.budget,=,9500000), movie.id),movie.vote_count)", "score": -0.5674935002124799, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,9500000), movie.vote_count),movie.vote_count))", "score": -0.6165421275800327, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.budget,=,9500000),movie.vote_count),movie.vote_count))", "score": -0.6568038066398003, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,<,9500000), movie.id),movie.vote_count)", "score": -0.673807134472338, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,9500000),getData(movie),movie.id,movie.id),movie.budget),movie.title))", "score": -0.6870158710585778, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,=,9500000), movie.id),movie.vote_average)", "score": -0.7150493274204932, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,9500000),getData(movie),movie.id,cast.movie_id),movie.budget),movie.title))", "score": -0.7222969964586128, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the average votes of the movies with the 9500000 dollars budget?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_count))", "score": -0.7254780732473591, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,9500000), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 173, "beams": [{"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.1701554201643269, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.title,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.20063206628828706, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,has_genre.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2471326059260708, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.original_language,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.25807962790143685, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,production_country.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.27567427468154626, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,has_genre.movie_id),movie.title,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.277609252050031, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))", "score": -0.29080030287007913, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,production_country.movie_id),movie.title,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.30615092080550643, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.title,>=,200000), country.name),country.name))", "score": -0.3332821014609458, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,has_genre.movie_id),movie.original_language,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3350568136631808, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.release_date,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.337867508222469, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3458609607596538, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_company.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3485595185032919, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,>=,200000),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.35265148335542945, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}, {"orig_question": "What are the countries names where movies with budgets of 200000.0 or more are produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,>=,200000),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3539886525601083, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.budget,>=,200000), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 174, "beams": [{"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.birth_place),person.death_place))", "score": -0.25877744297800226, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.person_id,person.id), person.name),person.death_place))", "score": -0.2714615812791458, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))", "score": -0.2885456165688546, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.death_place),person.death_place))", "score": -0.3039333016969704, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), oscar.category),person.death_place))", "score": -0.31675654185600677, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.person_id,person.id), person.name),company.name))", "score": -0.31744393609924426, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.name),person.death_place))", "score": -0.32552233924998686, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.birth_place),company.name))", "score": -0.32771881237920186, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.person_id,person.id), person.death_place),company.name))", "score": -0.334527971388953, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_place))", "score": -0.34989653175746405, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.vote_count,<=,2808), person.birth_place),person.death_place))", "score": -0.36825184248385723, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.death_place),company.name))", "score": -0.37287467109817, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), person.birth_place),person.birth_place))", "score": -0.3795061768322347, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2808), country.name),person.death_place))", "score": -0.3796759487235497, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Where is the deathplace from the persons who won the oscar for movies with a vote count less than or equal to 2808?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.vote_count,>=,2808), person.birth_place),person.death_place))", "score": -0.3831561872152797, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,<=,2808),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 175, "beams": [{"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))", "score": -0.2536822699876023, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))", "score": -0.26174005985111937, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.26537449398758234, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Released),getData(production_country),country.iso_3166_1,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2813988613926728, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3053182297337779, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.30559113356979944, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),country.name,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3104341123851861, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released), country.name),country.name))", "score": -0.31142576063806626, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),country.iso_3166_1,production_country.movie_id),movie.title,!=,Released),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3118365572173825, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,!=,Released), country.name),country.name))", "score": -0.3162607464381542, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,!=,Released), country.name),country.name))", "score": -0.31948355050158334, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,!=,Released), country.name),country.name))", "score": -0.3243185363016713, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),country.name,!=,Released), country.name),country.name))", "score": -0.3506784820848164, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),country.name,!=,Released), country.name),country.name))", "score": -0.3587362443983896, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "In how many countries are unreleased movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3639412715937599, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 176, "beams": [{"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.year),oscar.year))", "score": -0.09692051304656332, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<,4524), oscar.year),oscar.year))", "score": -0.1841443330969831, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.sub_category),oscar.year))", "score": -0.21730467933744568, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), movie.vote_average),oscar.year))", "score": -0.23707406275637982, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.year),movie.vote_average))", "score": -0.29715742690120023, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), movie.runtime),oscar.year))", "score": -0.299774762387076, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<,4524), oscar.sub_category),oscar.year))", "score": -0.30452849938786547, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.year),oscar.sub_category))", "score": -0.3098224578388326, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,=,4524), oscar.year),oscar.year))", "score": -0.3098605825310116, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))", "score": -0.31621821769946884, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<,4524), movie.vote_average),oscar.year))", "score": -0.3242978828067996, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.year),movie.runtime))", "score": -0.3427476610166362, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), movie.status),oscar.year))", "score": -0.3514426902191117, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_count,<=,4524), oscar.year),oscar.year))", "score": -0.3715833427439256, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there any years in which a movie with a vote count of less or equal than 4524 won an oscar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524), oscar.year),oscar_winner.oscar_id))", "score": -0.3762392489541298, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.vote_count,<=,4524),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 177, "beams": [{"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.03236378051224165, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,13000000), movie.status),movie.status))", "score": -0.34654482986661606, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,13000000), movie.status),movie.status))", "score": -0.44956493165227585, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.5683923341199076, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>,13000000), movie.status),movie.status))", "score": -0.5710389115556609, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.609612384045114, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.6300340258141174, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),cast.movie_id,movie.id),person.id,cast.movie_id),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.6397371440115889, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,13000000), movie.status),movie.status))", "score": -0.6529503145429771, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))", "score": -0.7332255056717258, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,>,13000000), movie.status),movie.status))", "score": -0.7371503808244597, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,13000000), movie.status),movie.status))", "score": -0.7451992728456389, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.title),movie.status))", "score": -0.7519125109247398, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), country.name),movie.status))", "score": -0.7612297897867393, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}, {"orig_question": "What are the status of the movies when the budget must be over  13000000.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),genre.name,>,13000000), movie.status),movie.status))", "score": -0.7830043532594573, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,13000000), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 178, "beams": [{"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))", "score": -0.027897455693164375, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_count,>=,1061),movie.original_language), movie.original_language))", "score": -0.44017816419363953, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))", "score": -0.5731727452512132, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),language.name))", "score": -0.6167691023656516, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.title),movie.original_language))", "score": -0.7134925268692314, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1061), movie.original_language),movie.original_language))", "score": -0.7245837409500382, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>=,1061), movie.original_language),movie.original_language))", "score": -0.7841693759764894, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.title))", "score": -0.7954310448476463, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,1061), movie.original_language),movie.original_language))", "score": -0.8169435859526857, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), language.name),movie.original_language))", "score": -0.8186223052543937, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.number,>=,1061), movie.original_language),movie.original_language))", "score": -0.8269885779227479, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1061), movie.original_language),movie.original_language))", "score": -0.828598316431453, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.vote_average))", "score": -0.8406052263089805, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.popularity))", "score": -0.853488293440023, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of those movies with a vote count of at least 1061?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),spoken_language.movie_id))", "score": -0.8678179652997642, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1061), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 179, "beams": [{"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.015488932418520562, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,!=,182016617), movie.budget),movie.budget))", "score": -0.5015525934722973, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,182016617), movie.budget),movie.budget))", "score": -0.5144783971336437, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.5626722440350828, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.movie_id),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.6135674089550116, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.6216418551921379, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>=,182016617), movie.budget),movie.budget))", "score": -0.6217612144973828, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.person_id),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.6431131272468784, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,cast.movie_id),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.6431950981592787, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.6443073871334486, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.revenue,>,182016617), movie.budget),movie.budget))", "score": -0.6476164814974631, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.release_date))", "score": -0.677734125914867, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.title))", "score": -0.7005119813111378, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.release_date),movie.budget))", "score": -0.7274204276473029, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}, {"orig_question": "What are the budgets for movies that created a revenue higher than 182016617?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.title),movie.budget))", "score": -0.8038274429709418, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,182016617), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 180, "beams": [{"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.gender))", "score": -0.02910746978886891, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Marylebone, London), person.gender),person.gender))", "score": -0.4615034081070917, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.birth_place),person.gender))", "score": -0.5422322342201369, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))", "score": -0.5873690893640742, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.death_place),person.gender))", "score": -0.6112910101219313, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.birth_place))", "score": -0.6224184329184936, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Marylebone, London), person.gender),person.gender))", "score": -0.6671696819394128, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.name),person.gender))", "score": -0.6683157870575087, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))", "score": -0.6756383106403518, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Marylebone, London), person.gender),person.gender))", "score": -0.6803913034527795, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.gender))", "score": -0.7002300583262695, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.death_place))", "score": -0.7143284375342773, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.name))", "score": -0.7291643912467407, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),genre.name))", "score": -0.7405166918906616, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),movie.popularity))", "score": -0.7745286519202637, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 181, "beams": [{"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.08421592297558074, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))", "score": -0.10425656817988042, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2576476446911133, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,28169671), country.name),country.name))", "score": -0.27238250678786274, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,28169671), country.name),country.name))", "score": -0.30484137260002103, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))", "score": -0.3405312330211948, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,28169671),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.35660184153283153, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3651650930806108, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,!=,28169671), country.name),country.name))", "score": -0.37922875359580277, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.name), country.name),country.name))", "score": -0.38681571181872265, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),person.birth_place))", "score": -0.4087100611723501, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,production_country.movie_id), country.name),country.name))", "score": -0.424382675734989, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,=,28169671), country.name),country.name))", "score": -0.4249909835337014, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,28169671),getData(production_country),movie.id,production_country.movie_id),getData(production_country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.43168486823961943, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}, {"orig_question": "Are there countries where movies with a revenue less than 28169671 Dollar have been produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),person.birth_place))", "score": -0.44826471842890925, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,28169671), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 182, "beams": [{"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.06555279482704018, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,35841901), company.name),company.name))", "score": -0.1799760149262909, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.26374854081596305, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,35841901), company.name),company.name))", "score": -0.2682194055146473, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<,35841901), company.name),company.name))", "score": -0.28242793327158167, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>=,35841901), company.name),company.name))", "score": -0.3046813148781862, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,!=,35841901),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))", "score": -0.3266464822513305, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),genre.name))", "score": -0.33593784204447524, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),person.death_place))", "score": -0.3573624504571011, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),person.death_day))", "score": -0.3696142023331762, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>,35841901), company.name),company.name))", "score": -0.370852286289259, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,35841901), company.name),company.name))", "score": -0.37817176091521376, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),oscar.category))", "score": -0.3791050544429902, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),production_company.company_id))", "score": -0.3845581690581557, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}, {"orig_question": "Does a production company exist that generated a revenue of 35841901 for a movie? ", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),keyword.name))", "score": -0.39099332205053505, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,35841901), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 183, "beams": [{"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.24654100484536515, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.25353512924431987, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.2597541884608874, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.2667483128598421, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.2887784186947904, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.30199160231031263, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3176777935479815, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3246719179469362, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.33089097716350374, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.3335427747872162, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.33788510156245843, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.3405368991861709, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3591404773782191, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.35991523178322327, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(crew),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.3661346017771738, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 184, "beams": [{"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.19120323388250748, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.20375612409182675, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.2324900145761793, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.237481469063194, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.movie_id), country.name),country.name))", "score": -0.2465326527974227, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.2500343592725133, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.movie_id), country.name),country.name))", "score": -0.25308494666426956, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_nominee.movie_id), country.name),country.name))", "score": -0.25908554300674197, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_company.movie_id), country.name),country.name))", "score": -0.25954819337631013, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id), country.name),country.name))", "score": -0.26563783687358883, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_company.movie_id), country.name),country.name))", "score": -0.2721010835856294, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,has_genre.movie_id), country.name),country.name))", "score": -0.2775743262302212, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,crew.movie_id), country.name),country.name))", "score": -0.2780490543392311, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,sound mixing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,has_genre.movie_id), country.name),country.name))", "score": -0.29012722685790066, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}, {"orig_question": "From which countries are the oscar nomineed persons in the category sound mixing?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.296144079409091, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound mixing),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 185, "beams": [{"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.09847279959477238, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.10142477320813423, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,=,2100), country.name),country.name))", "score": -0.2432257102641048, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,=,2100), country.name),country.name))", "score": -0.249332969258349, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,>=,2100), country.name),country.name))", "score": -0.2637108879144097, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,>=,2100), country.name),country.name))", "score": -0.28617308130949054, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),person.birth_place))", "score": -0.37940957156746025, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.3809616867775585, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), country.name),person.birth_place))", "score": -0.38102397733909815, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), person.birth_place),country.name))", "score": -0.39240887092340726, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.3971609974638469, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.3980293748442895, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), person.birth_place),country.name))", "score": -0.4003244348592772, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.4115924401231765, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}, {"orig_question": "How many countries with a movie vote count of 2100.0 or less are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,oscar_winner.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.vote_count,<=,2100), country.name),country.name))", "score": -0.4132517671166144, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<=,2100), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 186, "beams": [{"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.04418936712552841, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.35847161994112087, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,has_genre.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4096292883555787, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.40983919239060834, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.43318326500066606, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4395710241618699, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4594312686983782, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,has_genre.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4609968608050662, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),movie.id,has_genre.movie_id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4843409334151239, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.budget),movie.budget)", "score": -0.4860688958732171, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4909386017153655, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.id),movie.title,!=,The Good Guy), movie.id),movie.budget)", "score": -0.4997678552183953, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget), movie.id),movie.budget)", "score": -0.5544398609769327, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.budget), movie.id),movie.budget)", "score": -0.5648775893286013, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}, {"orig_question": "What is the sum of movie budgets of movies that have not the title The Good Guy?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.title,!=,The Good Guy),getData(movie),movie.id,movie.budget), movie.id),movie.budget)", "score": -0.6047691480816846, "correct_code": "sum(distinct(filter(getData(movie),movie.title,!=,The Good Guy), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 187, "beams": [{"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.21047781076150648, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_country),movie.id,production_country.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.2598995019288919, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.2863975394132527, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),production_country.iso_3166_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.28989249594333977, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,production_country.movie_id), language.name),language.name))", "score": -0.3037800399964151, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),has_genre.genre_id,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.33245162708821707, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_country),movie.id,production_country.movie_id),getData(country),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3418290500958172, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,country.iso_3166_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.3445211096431614, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_country),movie.id,production_country.movie_id),getData(language),production_country.iso_3166_1,language.iso_639_1), language.name),language.name))", "score": -0.3446551305373281, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_country),movie.id,production_country.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.3480167841028082, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),language.name))", "score": -0.35932717823902616, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),production_country.iso_3166_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.36581222459508594, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),keyword.name))", "score": -0.36856166801483753, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_country),movie.id,production_country.movie_id),getData(language),has_genre.genre_id,language.iso_639_1), language.name),language.name))", "score": -0.3761530838147824, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}, {"orig_question": "In which languages were films produced with the status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,production_country.movie_id), language.name),movie.original_language))", "score": -0.3796997686481613, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 188, "beams": [{"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))", "score": -0.053856349622947164, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,m), person.death_place),person.death_place))", "score": -0.31743549097154755, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.gender,=,m),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,=,m), person.death_place),person.death_place))", "score": -0.3946323561895553, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.gender,=,m), person.death_place),person.death_place))", "score": -0.42411839514996197, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,m), person.death_place),person.death_place))", "score": -0.45241923918601173, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,=,m), person.death_place),person.death_place))", "score": -0.45408273027472723, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(person),person.gender,=,m),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.gender,=,m), person.death_place),person.death_place))", "score": -0.5354206145676906, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.gender,=,m),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.gender,=,m), person.death_place),person.death_place))", "score": -0.5400493965573366, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_day),person.death_place))", "score": -0.549983488934231, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(person),person.gender,=,m),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,m), person.death_place),person.death_place))", "score": -0.5520064215566975, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_day))", "score": -0.5538293431309285, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,<,m), person.death_place),person.death_place))", "score": -0.5547692320105853, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.death_place))", "score": -0.578160511868191, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,m), person.death_place),person.death_place))", "score": -0.5822763620672049, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}, {"orig_question": "Where did men die?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.birth_place))", "score": -0.5969656417873921, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 189, "beams": [{"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.1167662429449023, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.status,=,de),movie.vote_average)", "score": -0.31226709285721665, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,de), movie.id),movie.vote_average)", "score": -0.43391513618713434, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,de), movie.id),movie.vote_average)", "score": -0.5207006311748659, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.5845307983402794, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,cast.movie_id),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.649188440853309, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.6525682257133613, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.title,=,de),movie.vote_average)", "score": -0.6562976223235081, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,de), movie.id),movie.vote_average)", "score": -0.6623909039200719, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,de), movie.id),movie.vote_average)", "score": -0.688180992258038, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,de), movie.vote_average),movie.vote_average))", "score": -0.7375161400395882, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)", "score": -0.7820194979792249, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.runtime)", "score": -0.8059796736883614, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,de), movie.vote_average),movie.vote_average))", "score": -0.808880731869067, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.popularity)", "score": -0.8273083703412564, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 190, "beams": [{"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_average)", "score": -0.07866667095537193, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_average)", "score": -0.13583105370126514, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.26211002009678747, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.runtime)", "score": -0.26879946060509813, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.vote_average)", "score": -0.27105163310817065, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.30359096096404925, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.runtime)", "score": -0.3259638433509913, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.vote_average)", "score": -0.32821601585406385, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.year,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_average)", "score": -0.3302149841857145, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_count)", "score": -0.36620302668149435, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.36668295140507584, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,cinematography), movie.id),movie.vote_average)", "score": -0.3980617782422627, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.number,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_average)", "score": -0.4002704127763427, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.vote_average),movie.vote_count)", "score": -0.4233674094273876, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}, {"orig_question": "What is the summed vote average of movies that won an oscar in the category \"cinematography\" ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,cinematography),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.4378533471655637, "correct_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 191, "beams": [{"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.05067942664027214, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1927-07-04), person.name),person.name))", "score": -0.28941596671938896, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1927-07-04), person.name),person.name))", "score": -0.32244453951716423, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.4333365113036503, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.5245719886043635, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.5821514532573342, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,<=,1927-07-04), person.name),person.name))", "score": -0.6005065914569627, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.6120140462966068, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,>=,1927-07-04),person.name), person.name))", "score": -0.6186588449636474, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.6198293641500641, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>=,1927-07-04), person.name),person.name))", "score": -0.6243037801468745, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,person.id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.6317503000081607, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1927-07-04), person.name),person.name))", "score": -0.694482009857893, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1927-07-04), person.name),person.name))", "score": -0.6996488384902477, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1927-07-04), person.name),person.name))", "score": -0.7306247763335705, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 192, "beams": [{"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_count),movie.vote_count))", "score": -0.2849220895659528, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_count),movie.vote_average))", "score": -0.30007703988667345, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.revenue),movie.vote_count))", "score": -0.31088921069022035, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.revenue),movie.vote_average))", "score": -0.326044161010941, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_average),movie.vote_count))", "score": -0.4035956525694928, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_average),movie.vote_average))", "score": -0.4187506028902135, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.runtime),movie.vote_count))", "score": -0.4313862585913739, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.runtime),movie.vote_average))", "score": -0.4465412089120946, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Whipped), movie.vote_count),movie.vote_count))", "score": -0.5057561603825889, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Whipped), movie.vote_count),movie.vote_average))", "score": -0.5209111107033095, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Whipped), movie.revenue),movie.vote_count))", "score": -0.5317232815068564, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_count),movie.vote_count))", "score": -0.5331616714756819, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Whipped), movie.revenue),movie.vote_average))", "score": -0.5468782318275771, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.id),movie.vote_count))", "score": -0.546943035114964, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.id),movie.vote_average))", "score": -0.5620979854356847, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 193, "beams": [{"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.1371568341132504, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),has_keyword.movie_id,None), None),None))", "score": -0.1586094938173142, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.18502505978111716, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,cast.person_id), person.death_place),person.death_place))", "score": -0.2067990338918206, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(filter(getData(movie),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,None),None,None), None),None))", "score": -0.22584124531957017, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,has_keyword.keyword_id), person.death_place),person.death_place))", "score": -0.23711936130798714, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.person_id), person.death_place),person.death_place))", "score": -0.2546672595596874, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),getData(person),movie.id,person.id),has_keyword.movie_id,movie.id), person.death_place),person.death_place))", "score": -0.25519347314592855, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(person),cast.person_id,person.id),keyword.id,cast.movie_id), person.death_place),person.death_place))", "score": -0.2602187722804191, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),has_keyword.movie_id,None), None),None))", "score": -0.2612820388050858, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),keyword.id,has_keyword.movie_id), person.death_place),person.death_place))", "score": -0.2756271895786796, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,person.id),has_keyword.movie_id,None), None),None))", "score": -0.2762345594499199, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,moulin rouge),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.person_id),has_keyword.movie_id,None), None),None))", "score": -0.27754415307922164, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),cast.person_id,person.id),keyword.name,=,moulin rouge), person.death_place),person.death_place))", "score": -0.2794983423168685, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}, {"orig_question": "Are there distinct death places of cast people that have worked on movies with the keyword moulin rouge?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),getData(movie),has_keyword.movie_id,movie.id),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,has_keyword.keyword_id), person.death_place),person.death_place))", "score": -0.2849875804133084, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,moulin rouge),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 194, "beams": [{"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.08608329597894349, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.0891590237671321, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.24084750184052123, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3310891521568814, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3364096651023366, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3389271197203398, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,>,2012-08-06),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3767959374433669, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), person.death_place),company.name))", "score": -0.3885194533840897, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.3890078363614844, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), person.death_place),company.name))", "score": -0.3915951811722784, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),person.death_place))", "score": -0.392083564149673, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), movie.title),company.name))", "score": -0.3939394659802608, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), movie.title),company.name))", "score": -0.39701519376844946, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.homepage,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.4064938856929867, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}, {"orig_question": "What are the names of the companies who produced and released movies after August 6th 2012?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),person.birth_day,>,2012-08-06),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.4079928897682589, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,>,2012-08-06), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 195, "beams": [{"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.1435381462157141, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.1981966011966341, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.19955020885103245, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id), person.birth_place),person.birth_place))", "score": -0.2501033581228308, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,production_country.movie_id), person.birth_place),person.birth_place))", "score": -0.2793064714041331, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.2977032594276371, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,oscar_winner.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.2990568670820354, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.birth_place))", "score": -0.3020903680203885, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,production_country.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.3049600353652455, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),movie.id,production_country.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.30631364301964387, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.30803119124717043, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,crew.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.3093847989015688, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.3249632926112335, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.birth_place),person.death_place))", "score": -0.34660660287661293, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}, {"orig_question": "Where are the birthplaces of the persons which where involved in a movie with status Rumored?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id),movie.status,=,Rumored), person.birth_place),person.birth_place))", "score": -0.3522433662288216, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 196, "beams": [{"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.059866325702128055, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.17703549391285392, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.runtime,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.1868029286310542, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.title,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.24291138244368268, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.26093772707980556, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3714459290404257, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.release_date,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.39659664943802175, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.status,=,128), genre.name),genre.name))", "score": -0.3982782630446495, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))", "score": -0.4114363510360839, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.41752441993262224, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,128),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.41797862974634925, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.430364146602359, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.homepage,=,128),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.43221406704940385, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),person.death_place))", "score": -0.4351764583097661, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}, {"orig_question": "Which genres are movies with runtimes of 128 minutes from?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,128),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.44138170598220766, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.runtime,=,128), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 197, "beams": [{"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))", "score": -0.04173262670155964, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.release_date),movie.release_date))", "score": -0.22957057944950066, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,Released), movie.release_date),movie.release_date))", "score": -0.489738794243749, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))", "score": -0.5643735466801445, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.release_date),movie.release_date))", "score": -0.67757674699169, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Released), movie.release_date),movie.release_date))", "score": -0.6784672757748922, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.title))", "score": -0.6832758707132598, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,Released), movie.release_date),movie.release_date))", "score": -0.6835232048433681, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))", "score": -0.7821896388704772, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>,Released), movie.release_date),movie.release_date))", "score": -0.7880387573641201, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,!=,Released), movie.release_date),movie.release_date))", "score": -0.8227259537343343, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,Released), movie.release_date),movie.release_date))", "score": -0.8238126656178792, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.release_date),movie.release_date))", "score": -0.8270691003926913, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.status))", "score": -0.8388779086199065, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}, {"orig_question": "Which different release dates do the movies that weren't released have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.budget),movie.release_date))", "score": -0.8531999468941649, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Released), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 198, "beams": [{"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Documentary), movie.title),movie.title))", "score": -0.35783912500482984, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(movie),cast.movie_id,movie.id),oscar.category,=,Documentary), movie.title),movie.title))", "score": -0.4464302106185306, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(movie),cast.movie_id,movie.id),oscar.category,=,Documentary), movie.title),movie.title))", "score": -0.4505197630508342, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,has_genre.genre_id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.4537985080659314, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Documentary), movie.title),movie.title))", "score": -0.45709673086214453, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),oscar.category,=,Documentary), movie.title),movie.title))", "score": -0.4586836349044461, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,movie.id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.4622385659989071, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,has_genre.genre_id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.4693019839706386, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.4713956955323221, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(movie),cast.movie_id,movie.id),movie.title,=,Documentary), movie.title),movie.title))", "score": -0.47146320491005705, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Documentary), movie.title),movie.title))", "score": -0.4726002067668517, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(spoken_language),person.id,spoken_language.iso_639_1),getData(movie),cast.movie_id,movie.id),movie.title,=,Documentary), movie.title),movie.title))", "score": -0.47555289024661246, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),person.id,movie.id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.4777420508331187, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,has_genre.genre_id),language.name,=,Documentary), movie.title),movie.title))", "score": -0.48266283961820194, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}, {"orig_question": "What are the titles of movies with the genere name Documentary?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),oscar_winner.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Documentary), movie.title),movie.title))", "score": -0.48596103140342295, "correct_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,=,Documentary),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 199, "beams": [{"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.id),oscar.number)", "score": -0.08950240249729306, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.category),oscar.number)", "score": -0.14983579355936005, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.number),oscar.number)", "score": -0.157234745197447, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.gender,=,f), oscar.id),oscar.number)", "score": -0.25459189424663137, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.gender,=,f), oscar.number),oscar.number)", "score": -0.2991721567059487, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.gender,=,f), oscar.category),oscar.number)", "score": -0.3223475021499936, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.32785572564699156, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.movie_id), oscar.category),oscar.number)", "score": -0.36073940791463355, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.movie_id), oscar.category),oscar.number)", "score": -0.38692017895859976, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.category),oscar.number)", "score": -0.3880871562558351, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), person.death_day),oscar.number)", "score": -0.4032559847521994, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.category),oscar.number)", "score": -0.4118894817985491, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),genre.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.id),oscar.number)", "score": -0.42757530571266456, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.4327869709260387, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar_nominee.person_id),oscar.number)", "score": -0.44020664431252826, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 200, "beams": [{"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "score": -0.28029770905068263, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.title))", "score": -0.28540907493592, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.title),oscar.number)", "score": -0.33766435270865347, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.title),movie.title))", "score": -0.3441785975693129, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.runtime))", "score": -0.345767725716924, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.3514051138242288, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.3593307095535933, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.title),oscar.number)", "score": -0.36130629188717706, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.runtime))", "score": -0.37958857634137877, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),movie.vote_count))", "score": -0.3877259967391809, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,cn),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.title),oscar.number))", "score": -0.389145697678025, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn), movie.id),oscar.number)", "score": -0.40594842407394943, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_winner),movie.id,spoken_language.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.title),movie.title))", "score": -0.4071673826021722, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.title),oscar.number)", "score": -0.41867130073820985, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average number of the oscar winners from movies with the original language cn?", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,movie.id),movie.id,oscar_winner.movie_id),movie.original_language,=,cn),getData(oscar),oscar_winner.oscar_id,oscar.id), movie.title),oscar.number)", "score": -0.4208969515993491, "correct_code": "avg(distinct(merge(merge(filter(getData(movie),movie.original_language,=,cn),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 201, "beams": [{"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.03689710043545347, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.41972010743484134, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.5070784219929262, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),crew.person_id,movie.id),movie.id,cast.movie_id),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.5114065641381534, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),crew.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.5395041712691558, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.person_id,movie.id),movie.id,cast.movie_id),movie.budget,=,27000000), movie.release_date),movie.release_date))", "score": -0.5472696529055702, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), person.birth_day),movie.release_date))", "score": -0.5666844336519716, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),person.birth_day))", "score": -0.583313481110963, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.budget,=,27000000),movie.release_date), movie.release_date))", "score": -0.6228211026464123, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,27000000), movie.release_date),movie.release_date))", "score": -0.650261901479098, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,27000000), movie.release_date),movie.release_date))", "score": -0.698607873331639, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,27000000), movie.release_date),movie.release_date))", "score": -0.7011712418607203, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,27000000), movie.release_date),movie.release_date))", "score": -0.7245496736577479, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>=,27000000), movie.release_date),movie.release_date))", "score": -0.7458190435281722, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}, {"orig_question": "At which dates were movies with a budget of 27000000 Dollars relased?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.runtime))", "score": -0.7464764278120128, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,27000000), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 202, "beams": [{"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.024336248330655508, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.40409263068419776, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,spoken_language.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.46406715939302984, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.5292626292986076, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.5554519832598058, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.id),movie.title)", "score": -0.5578093966905882, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.5730799162642034, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,spoken_language.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.5808080327008613, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),getData(spoken_language),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.614335282477055, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.61937522958642, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.6246253017901432, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,10.4764), movie.title),movie.title))", "score": -0.7059200527583016, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,10.4764), movie.title),movie.title))", "score": -0.7446389319811715, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,10.4764), movie.title),movie.title))", "score": -0.7811689858062891, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.7926507427146134, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 203, "beams": [{"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.2475868910503722, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(filter(getData(country),country.name,=,Serbia and Montenegro),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),None))", "score": -0.26498214767710054, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),crew.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.2713259881406172, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(filter(getData(country),country.name,=,Serbia and Montenegro),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),crew.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),None))", "score": -0.2879673697140508, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),person.id,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.3024525716657909, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_place,=,Serbia and Montenegro), company.name),company.name))", "score": -0.30372661337246104, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.30929906635727555, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),cast.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.31094049271005325, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(filter(getData(country),country.name,=,Serbia and Montenegro),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_place,=,Serbia and Montenegro), company.name),None))", "score": -0.31896868194462114, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(filter(getData(country),country.name,=,Serbia and Montenegro),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),cast.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),None))", "score": -0.3259180363131255, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),person.id,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),crew.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.3261916532878983, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),crew.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.birth_place,=,Serbia and Montenegro), company.name),company.name))", "score": -0.327465710462706, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,crew.person_id),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.3321715803734649, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),country.name,=,Serbia and Montenegro), company.name),company.name))", "score": -0.3389458576693509, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}, {"orig_question": "Which companies from Serbia and Montenegro produced their films in Serbia and Montenegro?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.original_language,=,Serbia and Montenegro), company.name),company.name))", "score": -0.3450559367405683, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Serbia and Montenegro), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 204, "beams": [{"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.036377655109390616, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5248946241497301, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5374027306070598, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5532435969686331, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5548006935486317, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),person.gender,movie.id),person.id,cast.person_id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5635735082871095, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5657516236488012, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.gender,!=,m),getData(spoken_language),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5708488205248912, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(filter(getData(person),person.gender,!=,m),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5788491112220909, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.5826921216067114, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),genre.name))", "score": -0.6404169169254601, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,m), person.death_place),person.death_place))", "score": -0.6514688453171402, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_day))", "score": -0.692034360487014, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),company.name))", "score": -0.7037496534176171, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}, {"orig_question": "What are the death places from the persons where the gender is not male?", "inferred_code": "done(extractValues(distinct(filter(getData(genre),person.gender,!=,m), person.death_place),person.death_place))", "score": -0.7235083734849468, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 205, "beams": [{"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.018218864584923722, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.3833125409233038, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.4364446483171365, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.4392875854479238, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.49241969284175646, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1939-12-17), person.death_place),person.death_place))", "score": -0.5389175276650349, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.5771820641259032, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_day))", "score": -0.5797345534811029, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.5826070240828495, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.6065829190338263, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,oscar_winner.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_place))", "score": -0.6303141806569033, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),genre.name))", "score": -0.635523845339776, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,<,1939-12-17), person.death_place),person.death_place))", "score": -0.6585129268160291, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),company.name))", "score": -0.6823859707365045, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}, {"orig_question": "What are the death places of people born after 1939-12-17?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1939-12-17), person.death_place),person.death_day))", "score": -0.708898280439907, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1939-12-17), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 206, "beams": [{"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.id),movie.budget)", "score": -0.06005339663823743, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,!=,Viernheim), movie.id),movie.budget)", "score": -0.1450443461744848, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.gender,!=,Viernheim), movie.id),movie.budget)", "score": -0.2449107209305916, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,!=,Viernheim), movie.id),movie.budget)", "score": -0.2521182693496423, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.id),movie.budget)", "score": -0.2717043226796718, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)", "score": -0.29813335242241956, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.id),movie.revenue)", "score": -0.30629238452137886, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.budget),movie.budget)", "score": -0.34873104884363226, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,!=,Viernheim), movie.id),movie.budget)", "score": -0.3566952722159192, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.name,!=,Viernheim), movie.id),movie.budget)", "score": -0.36002386131556535, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.id),movie.budget)", "score": -0.3843470397719407, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),crew.movie_id,!=,Viernheim), movie.id),movie.budget)", "score": -0.3878517301951006, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.birth_place,!=,Viernheim), movie.id),movie.budget)", "score": -0.38863628656413196, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,!=,Viernheim), movie.id),movie.revenue)", "score": -0.3912833340576263, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}, {"orig_question": "What is the summed budget of movies with at least one oscar winner person that was not born in \"Viernheim\" ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),movie.status,!=,Viernheim), movie.id),movie.budget)", "score": -0.42388846336873126, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Viernheim), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 207, "beams": [{"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))", "score": -0.019062797422520816, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,288), movie.runtime),movie.runtime))", "score": -0.4457118281861767, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))", "score": -0.5211304540443962, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,288), movie.runtime),movie.runtime))", "score": -0.5816463752416894, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,288), movie.runtime),movie.runtime))", "score": -0.5914961764356121, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,288), movie.runtime),movie.runtime))", "score": -0.6303112575551495, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,288), movie.runtime),movie.runtime))", "score": -0.6490236589452252, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), oscar.year),movie.runtime))", "score": -0.7098130367230624, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.vote_average),movie.runtime))", "score": -0.7115050933789462, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.title))", "score": -0.7144306997070089, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,=,288), movie.runtime),movie.runtime))", "score": -0.7317770643858239, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.status))", "score": -0.7513642410049215, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.status),movie.runtime))", "score": -0.7529341957997531, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),oscar.year))", "score": -0.7866367796668783, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}, {"orig_question": "What are the different runtimes of movies with 288 votes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,288), movie.runtime),movie.runtime))", "score": -0.7948464675573632, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,288), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 208, "beams": [{"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.013784519887849456, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.48914891440581426, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.5140652364847821, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.5505111618969649, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.5736093153237487, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.5754274640056845, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.6385189510401688, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.6500175127868855, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,675), movie.original_language),movie.original_language))", "score": -0.6532283481465129, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,=,675), language.name),movie.original_language))", "score": -0.6657364890595958, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),language.name))", "score": -0.6787266033024935, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,675), movie.original_language),movie.original_language))", "score": -0.6935032662258891, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,675), movie.original_language),movie.original_language))", "score": -0.6969571496847493, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.title),movie.original_language))", "score": -0.7029032153332082, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.title))", "score": -0.7106739180417208, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 209, "beams": [{"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,writing), movie.title),movie.title))", "score": -0.11889340876869033, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.1989501078747298, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(oscar_nominee),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.24731901196250372, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.category,=,writing), movie.title),movie.title))", "score": -0.2501726123433162, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.2602324575139529, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(oscar_nominee),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.2728340092282184, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.28026036408424737, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(oscar_nominee),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing), movie.title),movie.title))", "score": -0.28158210120968175, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.28574745477966756, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.2880843575309065, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing), movie.title),movie.title))", "score": -0.2944955533492117, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.title),movie.title))", "score": -0.2994915097360784, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.30691443203394686, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.30986321007753986, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "How many movies have been nominated for an oscar in the category writing?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing), movie.title),movie.title))", "score": -0.3312985825471596, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 210, "beams": [{"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.09094998679938726, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1957-08-15),person.name), person.name))", "score": -0.3416228888963815, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,>,1957-08-15),person.name), person.name))", "score": -0.35379607627692167, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.3813521444390062, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1957-08-15), person.name),person.name))", "score": -0.6956730459060054, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.death_place))", "score": -0.7443411831918638, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.name),person.name))", "score": -0.7588060873968061, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.gender))", "score": -0.7601598386827391, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))", "score": -0.7893524740065914, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,>,1957-08-15),person.name), person.gender))", "score": -0.8088095587154385, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.gender),person.name))", "score": -0.839574102050392, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.birth_place),person.name))", "score": -0.8411197100940626, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,>,1957-08-15),person.name), person.gender))", "score": -0.8485630175709957, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.birth_place))", "score": -0.8568344001832884, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1957-08-15), person.name),person.name))", "score": -0.8733661148871761, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 211, "beams": [{"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.03082366316812113, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.4129019489628263, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.4382227835577162, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.44122306579107873, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.44485330112898364, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.451422585763665, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.47772206897250113, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.death_place),person.birth_place))", "score": -0.49690196226583794, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.5034390901961231, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.5070693255340281, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),oscar_winner.person_id,person.id),person.id,cast.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.5137018147595563, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,oscar_winner.person_id),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.5704308278910735, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.death_place))", "score": -0.5889493174036033, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,Stony Brook, New York), person.birth_place),person.birth_place))", "score": -0.6495397110120393, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}, {"orig_question": "Which are the birth places of the persons who the death place is not Stony Brook, New York?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_day))", "score": -0.6602075643022545, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Stony Brook, New York), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 212, "beams": [{"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.036664387451310176, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.3263558356629801, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.33789281752482125, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.4307887761823869, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.4556683258699383, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5138108449235547, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5185491550633105, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5207115748005948, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5282691518238832, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5286006825876621, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.popularity),movie.original_language))", "score": -0.5344294687912526, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),country.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5394067623727783, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), movie.original_language),movie.original_language))", "score": -0.5410205569579101, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Don Juan DeMarco), language.name),movie.original_language))", "score": -0.5609687575100332, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}, {"orig_question": "In what original language is Don Juan DeMarco?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Don Juan DeMarco), movie.title),movie.original_language))", "score": -0.5618371160308016, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Don Juan DeMarco), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 213, "beams": [{"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.1407333879316947, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.16629178058140748, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.name))", "score": -0.2029808043210264, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.name))", "score": -0.22699586882832287, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.24357491066114625, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.birth_day))", "score": -0.2732637712623987, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))", "score": -0.2845035984395471, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.name),person.birth_day))", "score": -0.2853552293663133, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.name))", "score": -0.30582232705047796, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),getData(person),oscar_nominee.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.3355111876517304, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(getData(person),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,oscar_nominee.oscar_id), person.birth_day),person.name))", "score": -0.34761939588564594, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(getData(person),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,oscar_nominee.oscar_id), person.name),person.name))", "score": -0.3735210703867959, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(filter(getData(oscar),oscar.category,=,writing),getData(person),person.id,person.id),oscar_nominee.movie_id,oscar_nominee.person_id), person.death_day),person.name))", "score": -0.41205046071369045, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(filter(getData(oscar),oscar.category,=,writing),getData(person),person.id,oscar_nominee.person_id),oscar_nominee.movie_id,oscar_nominee.person_id), person.death_day),person.name))", "score": -0.4170976462812797, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces of persons are there, which have been oscar nominated in the oscar category writing?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,writing),merge(filter(getData(oscar),oscar.sub_category,=,writing),getData(person),person.id,person.id),oscar_nominee.movie_id,oscar_nominee.person_id), person.death_day),person.name))", "score": -0.4277447884693558, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,writing),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 214, "beams": [{"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.26648519448792896, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.2739923443154586, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.33383646197884403, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.34102938185357956, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.3413436118063737, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.34524858681370596, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.3485365316811092, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,art direction (black-and-white)),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.35338961191742724, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,art direction (black-and-white)),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_country.movie_id), country.name),country.name))", "score": -0.3675534796856127, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,art direction (black-and-white)),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.36785103152639925, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(oscar_winner),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_winner.oscar_id), country.name),country.name))", "score": -0.36984408910405864, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_company.company_id), country.name),country.name))", "score": -0.3755726588565406, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(oscar_winner),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.377351229794421, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,art direction (black-and-white)),getData(oscar_winner),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,production_country.movie_id), country.name),country.name))", "score": -0.382014889080506, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(getData(production_country),filter(merge(getData(production_country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,=,art direction (black-and-white)),production_country.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.3826124467172903, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 215, "beams": [{"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.runtime),movie.runtime))", "score": -0.14256399146606363, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "score": -0.21307245880370795, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), oscar.year),movie.runtime))", "score": -0.2141641547269687, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects), movie.runtime),movie.runtime))", "score": -0.2250443387603844, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.oscar_id,movie.id), movie.runtime),movie.runtime))", "score": -0.2570018194947485, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,oscar.id), movie.runtime),movie.runtime))", "score": -0.2851076221110645, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.runtime),oscar.year))", "score": -0.2957132733332527, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "score": -0.30302205216232236, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))", "score": -0.32803310825631204, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.oscar_id,oscar.id), movie.runtime),movie.runtime))", "score": -0.329036982802105, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,oscar_nominee.oscar_id), movie.runtime),movie.runtime))", "score": -0.3336634284986491, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects), movie.runtime),movie.runtime))", "score": -0.3534117389521015, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), oscar.year),movie.runtime))", "score": -0.36730404755338475, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), oscar.year),oscar.year))", "score": -0.36731343659415777, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}, {"orig_question": "How many runtimes of movies nominated for oscar in the category \"visual effects\" are there ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,movie.id), movie.runtime),movie.runtime))", "score": -0.371962425199703, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.category,=,visual effects),getData(movie),oscar_nominee.movie_id,movie.id), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 216, "beams": [{"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.16460268818080506, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.18605015169921202, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(getData(oscar_nominee),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.20620909966238143, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.21339965402918534, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.22602175059299895, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.2359359055060576, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.2474692141114059, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id), company.name),company.name))", "score": -0.2517156713751601, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar_nominee.person_id,company.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.25328348952406377, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.movie_id), company.name),company.name))", "score": -0.2534280553003528, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(getData(oscar_nominee),merge(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.25448281905556674, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,company.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.2602601200414278, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,!=,Bournemouth, Dorset, England),merge(merge(getData(oscar_nominee),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),oscar_nominee.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,movie.id),person.id,oscar_nominee.person_id), company.name),company.name))", "score": -0.27373605867925876, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2748755188187597, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the distinct company names that produced movies where there is at least one oscar nominated person that was not born in \"Bournemouth, Dorset, England\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.birth_place,!=,Bournemouth, Dorset, England),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar_nominee.movie_id,movie.id), company.name),company.name))", "score": -0.3000428114110415, "correct_code": "done(extractValues(distinct(merge(filter(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.birth_place,!=,Bournemouth, Dorset, England),getData(company),production_company.company_id,company.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 217, "beams": [{"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.10805493489897344, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.death_place))", "score": -0.30615419046080206, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.32067244348127566, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.38661446070739974, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.42725314537894565, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Middletown, Rhode Island), person.name),person.death_place))", "score": -0.4290530588014863, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.gender,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.4511500763407168, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.4593887621814289, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.4628844362596283, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),oscar_winner.person_id,person.id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.4690726631855132, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.4809741802783691, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.death_place),person.name))", "score": -0.48463509873545263, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.movie_id),person.death_place,=,Middletown, Rhode Island), person.name),person.name))", "score": -0.4885398888267999, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Middletown, Rhode Island), person.name),person.death_place))", "score": -0.4967126663414834, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}, {"orig_question": "Who died in Middletown, Rhode Island?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Middletown, Rhode Island), person.death_place),person.name))", "score": -0.5085538393273847, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Middletown, Rhode Island), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 218, "beams": [{"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.06645593586924074, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.revenue,=,33889159),getData(company),production_company.company_id,company.id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.24431036996879615, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.revenue,!=,33889159),getData(company),production_company.company_id,company.id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.2655163048353836, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.26611564920146236, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,!=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.27404068098416345, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.27968939521414266, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.revenue,<,33889159),getData(company),production_company.company_id,company.id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.30061428907800236, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,33889159), company.name),company.name))", "score": -0.30572399818585044, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,33889159), company.name),company.name))", "score": -0.3061871074815686, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.30865410671511967, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<,33889159), company.name),company.name))", "score": -0.3325137031577824, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.revenue,<=,33889159),getData(company),production_company.company_id,company.id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.36653830598153897, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.3757931710981763, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,33889159),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3879142876114825, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Has any company produced a movie which generated a revenue of 33889159?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(genre),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,33889159), company.name),company.name))", "score": -0.39741374249627576, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,33889159),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 219, "beams": [{"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))", "score": -0.01999689072727051, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.vote_count),movie.vote_count))", "score": -0.3956079622021207, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.runtime),movie.vote_count))", "score": -0.49738765361144033, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,Released), movie.vote_count),movie.vote_count))", "score": -0.6296428580990323, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Released), movie.vote_count),movie.vote_count))", "score": -0.6722567220440396, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.title),movie.vote_count))", "score": -0.6746134817822167, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.title))", "score": -0.6828147299111151, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_average),movie.vote_count))", "score": -0.6862400233967492, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Released), movie.vote_count),movie.vote_count))", "score": -0.694625749181796, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.runtime))", "score": -0.7342963940918708, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), oscar.number),movie.vote_count))", "score": -0.7573993265850731, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<=,Released), movie.vote_count),movie.vote_count))", "score": -0.7698775094340817, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))", "score": -0.7815918706364755, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),oscar.number))", "score": -0.7997166044533515, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}, {"orig_question": "What are the individual vote counts of all released movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_average))", "score": -0.8016326553643012, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 220, "beams": [{"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.07419892054076976, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.14350430537849285, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.2041932047635247, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(merge(merge(getData(oscar_nominee),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,None),None,None), None),None))", "score": -0.22480836608380475, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.22865830859767663, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.2596295334808899, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(getData(person),person.death_day,<=,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.26204361088183525, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2016-11-20),filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_day,<,2016-11-20),oscar_nominee.person_id,movie.id), movie.title),movie.title))", "score": -0.2794375513599886, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.28169820361299686, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(filter(merge(merge(getData(oscar_nominee),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,=,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,None),None,None), None),None))", "score": -0.30357677743284145, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,=,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.30477500989892886, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,!=,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.30888238922154737, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<=,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id), movie.title),movie.title))", "score": -0.30894563392486174, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,<,2016-11-20),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.3144637697859718, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}, {"orig_question": "What is the movie title from movies in which oscar nominated persons were involved who died before 2016-11-20?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,<,2016-11-20),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.title),movie.title))", "score": -0.344915740719649, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<,2016-11-20), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 221, "beams": [{"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.03639831754088224, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.14983812421658027, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.status,=,Post Production), genre.name),genre.name))", "score": -0.3294030411603582, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.name), genre.name),genre.name))", "score": -0.34449257443403714, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),company.name))", "score": -0.3932901764762593, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.title,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.39923428134566863, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3998009295603496, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4000265843669619, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(has_genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.40016812573388055, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.original_language,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.40748618229915645, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,has_genre.movie_id), genre.name),genre.name))", "score": -0.42507593100381746, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), person.death_place),genre.name))", "score": -0.42648223062549123, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.42841751865766464, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Post Production),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4289639518436131, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "To which genres do movies in post production belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,has_genre.movie_id),movie.status,=,Post Production),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.43053353155280877, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 222, "beams": [{"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)", "score": -0.03128918497521492, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.id),movie.budget)", "score": -0.5161863398873761, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.budget),movie.budget)", "score": -0.5622804511257865, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.budget),movie.budget))", "score": -0.6821996264498011, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,6.4), movie.id),movie.budget)", "score": -0.7197364518487587, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.revenue),movie.budget))", "score": -0.7458168484608905, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.release_date),movie.budget)", "score": -0.8127681409907416, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.revenue)", "score": -0.8818601167128273, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>,6.4), movie.id),movie.budget)", "score": -0.9151121003345623, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.revenue),movie.budget)", "score": -0.9164543170833827, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,<,6.4), movie.id),movie.budget)", "score": -0.9209159635322696, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,6.4), movie.id),movie.budget)", "score": -0.9409521121165664, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.popularity),movie.budget)", "score": -0.9649849095449292, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(distinct(filter(getData(movie),movie.revenue,<,6.4), movie.id),movie.budget)", "score": -0.9726031654486292, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}, {"orig_question": "What is the average budget of the movies with a vote average smaller than 6.4?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,<,6.4),movie.budget)", "score": -0.975317044484544, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 223, "beams": [{"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.25041275304647675, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,company.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.25975704129999355, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,=,special achievement award (visual effects)),getData(company),production_company.company_id,company.id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.2603551670503547, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.2644106464435815, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.28396789946510936, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.292202048122679, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<=,150),getData(company),production_company.company_id,company.id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.2947385586003643, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(company),oscar_nominee.oscar_id,company.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.3051737201830784, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),oscar.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.3071398630671401, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.30934313187860185, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.number,<=,special achievement award (visual effects)),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.3094197982530322, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,<=,special achievement award (visual effects)),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.31514426391154116, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.319440956563145, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,company.id),oscar.id,oscar_nominee.movie_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.3285191450161542, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}, {"orig_question": "Is there any company who was involved in a movie which was oscar nomineed and has a vote count less than or equal 150 in the oscar sub category special achievement award (visual effects)?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,company.id),movie.id,oscar_nominee.oscar_id),movie.vote_count,<=,150), company.name),company.name))", "score": -0.33052911803888785, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,special achievement award (visual effects)),merge(filter(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,<=,150),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),oscar.id,oscar_nominee.oscar_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
