{"index": 0, "beams": [{"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_day),person.death_day))", "score": -0.14365614313283004, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.death_day))", "score": -0.19335080045857467, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_day),person.birth_day))", "score": -0.2680766034463886, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))", "score": -0.31777126077213325, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1998-05-14), person.death_day),person.death_day))", "score": -0.5559736552240793, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1998-05-14), person.death_day),person.death_day))", "score": -0.5587435915658716, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_day),person.death_place))", "score": -0.5886493969301227, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_day),movie.revenue))", "score": -0.6010790813306812, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1998-05-14), person.birth_day),person.death_day))", "score": -0.6056683125498239, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1998-05-14), person.birth_day),person.death_day))", "score": -0.6084382488916162, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_day),movie.release_date))", "score": -0.6200716245512012, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_day),cast.person_id))", "score": -0.6257840741018299, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.death_place),person.death_day))", "score": -0.6312894608417992, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.id),person.death_day))", "score": -0.6321950342098717, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}, {"orig_question": "On which dates were the persons, which didn't die on 1998-05-14, born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.death_place))", "score": -0.6383440542558674, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,!=,1998-05-14), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 1, "beams": [{"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.05492691627486257, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average)", "score": -0.34898175626659483, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))", "score": -0.6102069888438564, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.vote_average)", "score": -0.679086757854762, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.status,movie.id),movie.id,movie.popularity),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.7022557593316407, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.popularity), movie.vote_average),movie.vote_average)", "score": -0.7143561905313659, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.7175511735302915, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.status,movie.id),movie.id,movie.id),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.7238280878130567, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))", "score": -0.7239355881174561, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.popularity), movie.vote_average),movie.vote_average)", "score": -0.7255301300872089, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),movie.status,movie.id),movie.id,movie.popularity), movie.vote_average),movie.vote_average)", "score": -0.72938620141209, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,movie.popularity), movie.vote_average),movie.vote_average)", "score": -0.7388988475748811, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(spoken_language),getData(movie),movie.status,movie.id),movie.id,movie.popularity), movie.vote_average),movie.vote_average)", "score": -0.7405601313270288, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,production_country.movie_id), movie.vote_average),movie.vote_average)", "score": -0.7451472667474571, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}, {"orig_question": "What is the average vote from movies that have the movie status rumored?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(movie),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity), movie.vote_average),movie.vote_average)", "score": -0.7454312225677666, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 2, "beams": [{"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.32286032203170617, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,spoken_language.iso_639_1),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.33297192560050093, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,has_keyword.keyword_id),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.3341409159586524, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.3540566003780246, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,spoken_language.iso_639_1),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.36416820394681937, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.36533719430497086, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),cast.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.3974291144045162, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),spoken_language.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.39877916465510665, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,spoken_language.iso_639_1),getData(movie),cast.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.407540717973311, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,has_keyword.keyword_id),getData(movie),cast.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.4087097083314625, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.4088907682239014, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),oscar.id,has_keyword.keyword_id),getData(movie),spoken_language.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.4100597585820529, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),language.iso_639_1,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.41413779264586265, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),language.iso_639_1,spoken_language.iso_639_1),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.42424939621465746, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}, {"orig_question": "What movies have a rating of at least 4.5?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>=,4.5),getData(oscar_winner),language.iso_639_1,has_keyword.keyword_id),getData(movie),oscar_winner.movie_id,movie.id), movie.vote_average),movie.title))", "score": -0.42541838657280895, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,4.5), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 3, "beams": [{"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.category),oscar.category))", "score": -0.2644596023169749, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.number),oscar.category))", "score": -0.2906881678170231, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,>=,2000-05-26), oscar.category),oscar.category))", "score": -0.3003006184569977, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.category),oscar.category))", "score": -0.32268896654642826, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,>=,2000-05-26), oscar.number),oscar.category))", "score": -0.3265291839570459, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.sub_category),oscar.category))", "score": -0.3373531897568982, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.category),oscar.category))", "score": -0.3422261307962441, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.category),oscar.category))", "score": -0.3477280168416974, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.release_date,>=,2000-05-26), oscar.category),oscar.category))", "score": -0.3485797713958921, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.number),oscar.category))", "score": -0.34891753204647646, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.category),oscar.number))", "score": -0.35655338856656993, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,>=,2000-05-26), oscar.category),oscar.category))", "score": -0.35852998268645103, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.number),oscar.category))", "score": -0.3684546962962923, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.birth_day,>=,2000-05-26), oscar.sub_category),oscar.category))", "score": -0.37319425462848005, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories is a persons death day later than 2000-05-26?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_day,>=,2000-05-26), oscar.number),oscar.category))", "score": -0.3739566310733046, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,2000-05-26), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 4, "beams": [{"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.13718219102424323, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))", "score": -0.2187226185194616, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,=,Uvalde, Texas), movie.title),movie.title))", "score": -0.2592837557448388, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,!=,Uvalde, Texas), movie.title),movie.title))", "score": -0.26818323266547284, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.30499990146280337, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.gender,=,Uvalde, Texas), movie.title),movie.title))", "score": -0.3087443698908501, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3158249271299471, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_place,!=,Uvalde, Texas),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3318091463702736, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))", "score": -0.3364760529509542, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))", "score": -0.3421393323527447, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.movie_id),oscar_winner.oscar_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))", "score": -0.3500169592615944, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(person),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.3550258930806346, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.3639510348879813, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))", "score": -0.3692460719924908, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}, {"orig_question": "How many oscar winner movie titles are from persons that are not born in Uvalde, Texas?", "inferred_code": "count(extractValues(distinct(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.3888764036598004, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_place,!=,Uvalde, Texas), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 5, "beams": [{"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "score": -0.017210698908456834, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.popularity),movie.release_date))", "score": -0.5258073073237028, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.budget),movie.release_date))", "score": -0.572182045540103, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.budget))", "score": -0.5884432531784114, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.release_date))", "score": -0.6591251355021086, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.release_date))", "score": -0.6939969521372404, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity),movie.status,=,Post Production), movie.release_date),movie.release_date))", "score": -0.7046651953655252, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))", "score": -0.7225052682406385, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,movie.popularity), movie.release_date),movie.release_date))", "score": -0.7750079822143036, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,movie.popularity), movie.popularity),movie.release_date))", "score": -0.7889683865933147, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.title))", "score": -0.7964905835578975, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Post Production), movie.release_date),movie.release_date))", "score": -0.8039311974316661, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Post Production), movie.release_date),movie.release_date))", "score": -0.8249465434819285, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.popularity))", "score": -0.8284897543380794, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}, {"orig_question": "Which are the release dates of the movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.revenue),movie.release_date))", "score": -0.8523301344721403, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 6, "beams": [{"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,alamo),movie.vote_count),movie.popularity))", "score": -0.10755747163040974, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,=,alamo),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count),movie.popularity))", "score": -0.12390552858339948, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(keyword),keyword.name,=,alamo),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.vote_count),movie.popularity))", "score": -0.2265513900258696, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,alamo),movie.vote_average),movie.popularity))", "score": -0.34007484078742983, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(keyword),keyword.name,!=,alamo),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.vote_count),movie.popularity))", "score": -0.34026670891805877, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,alamo),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count),movie.popularity))", "score": -0.34367777971038255, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,=,alamo),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_average),movie.popularity))", "score": -0.3476916908930547, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,alamo),getData(movie),has_keyword.movie_id,movie.id),movie.vote_count),movie.popularity))", "score": -0.3485243948557449, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,=,alamo),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count),movie.release_date))", "score": -0.37540120570264496, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count,=,alamo),movie.vote_count),movie.popularity))", "score": -0.40705111782421066, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,alamo),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.vote_count),movie.popularity))", "score": -0.4128578042668708, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id),keyword.name,=,alamo),movie.vote_count),movie.popularity))", "score": -0.41501351870668385, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),oscar.number,=,alamo),movie.vote_count),movie.popularity))", "score": -0.42601644824001045, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,alamo),movie.vote_count),movie.release_date))", "score": -0.43040390306088433, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the smallest vote count among all the movies with the keyword \"alamo\" ?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,=,alamo),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id),movie.vote_count),movie.popularity))", "score": -0.44050500027276795, "correct_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,alamo),movie.vote_count),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 7, "beams": [{"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.056587195860928134, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.17305018646650167, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,new age), movie.id),movie.popularity)", "score": -0.24680598923698346, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,new age), movie.id),movie.popularity)", "score": -0.25201487736090966, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.2645861797108859, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.3384457853350001, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.38104917031645946, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.3839208526222567, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(has_keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.3848733931978204, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.39406516440243106, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.4102156924987942, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(company),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.4147750954329124, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),company.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.4287204358270523, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.4304467229505396, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}, {"orig_question": "What is the sum of popularity of movies with the keyword new age?", "inferred_code": "sum(distinct(merge(merge(filter(getData(keyword),keyword.name,=,new age),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.435764110645669, "correct_code": "sum(distinct(merge(filter(getData(keyword),keyword.name,=,new age),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 8, "beams": [{"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.12492393442344785, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),merge(merge(getData(cast),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),person.id,cast.person_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.18863070702990029, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.23365704579949106, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.birth_day,=,2006-03-07),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.24811990356291005, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),merge(merge(getData(has_genre),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),person.id,cast.person_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.25356076827737833, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.2555065519553043, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),merge(merge(getData(cast),getData(movie),cast.person_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),person.id,cast.person_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2749407633121004, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2969606667653384, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(spoken_language),person.id,cast.person_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3329029506721791, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,2006-03-07),getData(has_genre),person.id,cast.person_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3369253155707037, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(person),person.death_day,=,2006-03-07),merge(merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),getData(genre),has_genre.genre_id,genre.id),person.id,has_genre.genre_id), genre.name),genre.name))", "score": -0.3455196217175658, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(genre),has_genre.genre_id,genre.id),person.death_day,=,2006-03-07), genre.name),genre.name))", "score": -0.3463061384276255, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),cast.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.34639538219958504, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.birth_day,=,2006-03-07),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),cast.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.3570658297661264, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there any genre in which a person was part of the cast and died at 2006-03-07?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),cast.movie_id,genre.id), genre.name),genre.name))", "score": -0.3765685222910109, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_day,=,2006-03-07),getData(movie),cast.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 9, "beams": [{"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)", "score": -0.07678749700832442, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,5.1), movie.id),movie.runtime)", "score": -0.3247970614802701, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.runtime),movie.runtime)", "score": -0.39883687109898325, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,=,5.1),movie.runtime)", "score": -0.4566571195853498, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,5.1), movie.id),movie.runtime)", "score": -0.4900903315335565, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>,5.1), movie.id),movie.runtime)", "score": -0.5366213274035407, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,5.1), movie.runtime),movie.runtime)", "score": -0.6468464355709289, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<=,5.1), movie.id),movie.runtime)", "score": -0.6724541037304008, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.runtime),movie.runtime))", "score": -0.7896538115164731, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,null,5.1), movie.id),movie.runtime)", "score": -0.7952249239224964, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.id)", "score": -0.8103146448514442, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,!=,5.1), movie.runtime),movie.runtime)", "score": -0.8121397056242153, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(filter(getData(movie),movie.vote_average,<,5.1),movie.runtime)", "score": -0.8528370271504199, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,>,5.1), movie.runtime),movie.runtime)", "score": -0.8586707014941996, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that have a vote average below 5.1?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.vote_average)", "score": -0.9056495921914015, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,5.1), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 10, "beams": [{"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.10245181566247938, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,Magyar), movie.title),movie.title))", "score": -0.1084297828929266, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.2733023905059218, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.3373835783556389, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.33881451572120713, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(movie),movie.id,movie.id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.37267520111086605, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),merge(getData(movie),getData(movie),movie.id,has_genre.movie_id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.38188371943146016, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.4112853914971819, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,!=,Magyar), movie.title),movie.title))", "score": -0.41550929540134707, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),movie.original_language,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.42090057110446116, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(spoken_language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.4258008270132849, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.original_language,!=,Magyar),movie.title), movie.title))", "score": -0.42596968669386115, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.4320189739432412, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Magyar), movie.title),movie.title))", "score": -0.4455592768132308, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are he movie titles where the language is not Magyar?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,Magyar), movie.title),movie.title))", "score": -0.4464902565902502, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,Magyar),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 11, "beams": [{"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))", "score": -0.05233841183709113, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,is), country.name),country.name))", "score": -0.1882206737423619, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.movie_id),movie.original_language,=,is), country.name),country.name))", "score": -0.2861178131888422, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),language.name,=,is), country.name),country.name))", "score": -0.28637585953046923, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,country.iso_3166_1),movie.original_language,=,is), country.name),country.name))", "score": -0.30775025782428106, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,oscar_winner.movie_id),movie.original_language,=,is), country.name),country.name))", "score": -0.33716785198722127, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))", "score": -0.35437960951071856, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),oscar.sub_category))", "score": -0.3659460371492916, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,is), country.name),country.name))", "score": -0.37486841901019674, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),movie.status))", "score": -0.3803509442287616, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),country.name))", "score": -0.3822684498104792, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.popularity,=,is), country.name),country.name))", "score": -0.3831937894341081, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),spoken_language.iso_639_1,production_country.movie_id),movie.original_language,=,is), country.name),country.name))", "score": -0.39140071614253713, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,is), country.name),production_country.iso_3166_1))", "score": -0.4001872405083612, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In how many countries were movies produced with original language is?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),genre.name,=,is), country.name),country.name))", "score": -0.4020090266481503, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 12, "beams": [{"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,197), movie.vote_count),movie.vote_count))", "score": -0.09981369400338735, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,>=,197), movie.vote_count),movie.vote_count)", "score": -0.2649731040732452, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>=,197), movie.vote_count),movie.vote_count))", "score": -0.5453630319752847, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,197), movie.vote_count),movie.vote_count))", "score": -0.548406994304969, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,197), movie.vote_count),movie.vote_count))", "score": -0.6662548881577095, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>=,197), movie.vote_count),movie.vote_count))", "score": -0.6930070487505873, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,>=,197), movie.id),movie.vote_count)", "score": -0.7271929401981975, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,<=,197), movie.vote_count),movie.vote_count)", "score": -0.7475538706147115, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,>=,197), movie.vote_count),movie.vote_count))", "score": -0.7596121531532845, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,197), movie.vote_average),movie.vote_count))", "score": -0.7639929324941477, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,197), movie.vote_count),movie.title))", "score": -0.7755164673872059, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,197), movie.title),movie.vote_count))", "score": -0.7976815373258432, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,197), oscar.number),movie.vote_count))", "score": -0.801667717154487, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "sum(distinct(filter(getData(movie),movie.runtime,>=,197), movie.vote_count),oscar.number)", "score": -0.8099681027757027, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}, {"orig_question": "How many votes have the movies which have a run time of 197 or more?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,197), movie.vote_count),movie.vote_average))", "score": -0.8469430974073475, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,197), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 13, "beams": [{"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Ti?ng Vi?t),movie.revenue),movie.popularity))", "score": -0.16178308808900008, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),language.name,=,Ti?ng Vi?t),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue),movie.popularity))", "score": -0.17303405545070882, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue),movie.popularity))", "score": -0.20067923851095812, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))", "score": -0.30043195016752744, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Ti?ng Vi?t),movie.revenue),movie.popularity))", "score": -0.3084866610436065, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,Ti?ng Vi?t),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue),movie.popularity))", "score": -0.3254639731191142, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(movie),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))", "score": -0.34475431759157615, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(filter(getData(language),movie.original_language,=,Ti?ng Vi?t),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue),movie.popularity))", "score": -0.3531091561793635, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(merge(getData(movie),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))", "score": -0.35315160957466896, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(filter(getData(oscar),language.name,=,Ti?ng Vi?t),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue),movie.popularity))", "score": -0.3534313315913475, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),language.name,=,Ti?ng Vi?t),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),oscar.id,spoken_language.iso_639_1),movie.revenue),movie.popularity))", "score": -0.35762359242948183, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(filter(merge(getData(oscar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Ti?ng Vi?t),movie.revenue),movie.popularity))", "score": -0.36915825290035076, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Ti?ng Vi?t),movie.revenue),movie.popularity))", "score": -0.3824028401012414, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),oscar.id,spoken_language.iso_639_1),movie.revenue),movie.popularity))", "score": -0.38526881273061003, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}, {"orig_question": "What is the movie popularity of the movie that received the highest revenue and was translated to Ti?ng Vi?t?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.original_language,=,Ti?ng Vi?t),movie.revenue),movie.popularity))", "score": -0.4057823989423923, "correct_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,=,Ti?ng Vi?t),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 14, "beams": [{"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.budget,=,Austria),movie.budget),movie.status))", "score": -0.1517146003752714, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.budget),movie.status))", "score": -0.3354227454000662, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.budget),movie.status))", "score": -0.345485369321912, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.budget),movie.status))", "score": -0.4068342909467437, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.budget),movie.status))", "score": -0.4168969148685895, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.budget),movie.status))", "score": -0.4320883980420754, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),movie.id,movie.id),movie.budget),movie.status))", "score": -0.4321404256265335, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.budget,=,Austria),movie.revenue),movie.status))", "score": -0.43865379666385707, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.budget),movie.status))", "score": -0.4388218612729479, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.budget),movie.status))", "score": -0.4421510219639212, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.budget),movie.status))", "score": -0.4422030495483793, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(production_country),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.budget),movie.status))", "score": -0.4488844707968331, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,spoken_language.iso_639_1),movie.budget),movie.status))", "score": -0.4524664943040326, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.budget,=,Austria),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),country.iso_3166_1,spoken_language.iso_639_1),movie.budget),movie.status))", "score": -0.46252911822587833, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}, {"orig_question": "What is the status of the movie with the maximum budget from austria?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.title,=,Austria),movie.budget),movie.status))", "score": -0.47676163700816687, "correct_code": "done(extractValues(max(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Austria),getData(movie),production_country.movie_id,movie.id),movie.budget),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 15, "beams": [{"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.popularity))", "score": -0.05693390173109947, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.revenue,>,2007-07-07), movie.popularity),movie.popularity))", "score": -0.3473087805250543, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_average),movie.popularity))", "score": -0.4370637270549196, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2007-07-07), movie.popularity),movie.popularity))", "score": -0.4860835829676944, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,2007-07-07), movie.popularity),movie.popularity))", "score": -0.4916739123800653, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.revenue),movie.popularity))", "score": -0.5494110914805788, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.popularity,>,2007-07-07), movie.popularity),movie.popularity))", "score": -0.5699521559217828, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.id),movie.popularity))", "score": -0.5904592606166261, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.revenue))", "score": -0.5983587363662082, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.release_date,>,2007-07-07),movie.popularity), movie.popularity))", "score": -0.6300713940581772, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,>,2007-07-07), movie.popularity),movie.popularity))", "score": -0.6640209215620416, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.vote_average))", "score": -0.6866546729506808, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.release_date))", "score": -0.6894413689078647, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.popularity),movie.popularity))", "score": -0.714981195735163, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there movies released after 2007-07-07?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,!=,2007-07-07), movie.popularity),movie.popularity))", "score": -0.7175753572882968, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>,2007-07-07), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 16, "beams": [{"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,paris),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.15234898294841753, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,paris),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,oscar_nominee.oscar_id), oscar.sub_category),oscar.sub_category))", "score": -0.15975934528698368, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,paris),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,has_keyword.keyword_id), oscar.sub_category),oscar.sub_category))", "score": -0.24497851069981477, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(oscar_nominee),keyword.id,has_keyword.keyword_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.25407732447358766, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,paris),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,oscar_nominee.oscar_id), oscar.sub_category),oscar.sub_category))", "score": -0.2957229564591726, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,paris),getData(movie),has_keyword.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,oscar_nominee.oscar_id), oscar.sub_category),oscar.sub_category))", "score": -0.31647571227806964, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,paris),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.number))", "score": -0.3233457165259107, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.3341649304633952, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,!=,paris),getData(oscar_nominee),keyword.id,has_keyword.keyword_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.sub_category))", "score": -0.34833834048684864, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,paris),merge(getData(has_keyword),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,oscar_nominee.oscar_id), oscar.sub_category),oscar.sub_category))", "score": -0.34858705321638994, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,paris),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.category))", "score": -0.3573224935854967, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,paris),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.3601877719210203, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,paris),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,oscar_winner.oscar_id), oscar.sub_category),oscar.sub_category))", "score": -0.3605611564812254, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,paris),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),keyword.id,oscar_nominee.oscar_id), oscar.number),oscar.sub_category))", "score": -0.36681489295475667, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}, {"orig_question": "How many different oscar sub categories exist with movies having oscar nominees and the keyword paris?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,paris),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id), oscar.sub_category),oscar.sub_category))", "score": -0.38311296738638206, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,paris),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),has_keyword.movie_id,movie.id), oscar.sub_category),oscar.sub_category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 17, "beams": [{"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),person.birth_place,!=,Los Alamos, New Mexico),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.budget))", "score": -0.0889016977485959, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))", "score": -0.21197340156399788, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.birth_day,!=,Los Alamos, New Mexico),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.budget))", "score": -0.2440657998571081, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),person.name,!=,Los Alamos, New Mexico),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.budget))", "score": -0.3068253233736706, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(filter(getData(person),person.birth_place,!=,Los Alamos, New Mexico),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),movie.popularity),movie.budget))", "score": -0.30946054105849363, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),person.birth_day,!=,Los Alamos, New Mexico),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.budget))", "score": -0.3229694332134355, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))", "score": -0.3263403787989359, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,!=,Los Alamos, New Mexico),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.budget))", "score": -0.3459267216875574, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.gender,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))", "score": -0.3766145929035062, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "count(extractValues(min(merge(merge(filter(getData(person),person.birth_place,!=,Los Alamos, New Mexico),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.budget))", "score": -0.40093329097347313, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),person.birth_place,!=,Los Alamos, New Mexico),getData(spoken_language),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.budget))", "score": -0.43509873686264267, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),language.name,!=,Los Alamos, New Mexico),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.budget))", "score": -0.44366776295307037, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,!=,Los Alamos, New Mexico),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.budget))", "score": -0.4480813632276925, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),person.birth_place,!=,Los Alamos, New Mexico),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.revenue),movie.budget))", "score": -0.45109137344228073, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}, {"orig_question": "What is the budget of the movie with the smallest popularity among all the movies that have at least one cast member that was not born in \"Los Alamos, New Mexico\" ?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),cast.person_id,!=,Los Alamos, New Mexico),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.popularity),movie.budget))", "score": -0.45567233091815257, "correct_code": "done(extractValues(min(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_place,!=,Los Alamos, New Mexico),movie.popularity),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 18, "beams": [{"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1933-04-26),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.2709788168605911, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1933-04-26),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.2781350944631077, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1933-04-26),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.2842110554397394, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1933-04-26),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.291367333042256, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1933-04-26),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.31355555878013197, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1933-04-26),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.32071183638264855, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),person.birth_day,>=,1933-04-26),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.32437977541945207, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),person.birth_day,>=,1933-04-26),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.3267579755237667, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1933-04-26),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.3267877973592803, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),person.birth_day,>=,1933-04-26),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.32807926938607995, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(crew),person.id,oscar_winner.person_id),person.birth_day,>=,1933-04-26),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.3304574694903946, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1933-04-26),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.3339440749617969, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>=,1933-04-26),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.3800798195134034, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>=,1933-04-26),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.3837793134800313, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}, {"orig_question": "What is the sum of the oscar years where the persons birthday was later or the same as 1933-04-26?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1933-04-26),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.4017402302398418, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1933-04-26), oscar.id),oscar.year)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 19, "beams": [{"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),language.name,!=,???????),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_place))", "score": -0.17786617447320435, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),language.name,!=,???????),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.person_id), person.death_place),person.death_place))", "score": -0.2508549085126381, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),movie.original_language,!=,1929-05-31),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.person_id), person.death_place),person.death_place))", "score": -0.27393356793139767, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),language.name,!=,???????),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.2927466904146901, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),language.name,!=,???????),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_day))", "score": -0.29336177682993575, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),language.name,!=,???????),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.person_id), person.death_day),person.death_place))", "score": -0.30795001691016133, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id),person.gender,!=,1929-05-31), person.death_place),person.death_place))", "score": -0.30898761358446986, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),movie.original_language,!=,1929-05-31),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_place))", "score": -0.3177339645360442, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id),person.birth_day,!=,1929-05-31), person.death_place),person.death_place))", "score": -0.3275847106198066, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),movie.original_language,!=,???????),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.person_id), person.death_day),person.death_place))", "score": -0.3310286763289209, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),language.name,!=,???????),merge(getData(oscar_nominee),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), person.death_place),person.death_place))", "score": -0.3378676100204302, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),language.name,!=,???????),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.3517640277859491, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),movie.original_language,!=,1929-05-31),merge(getData(oscar_nominee),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), person.death_place),person.death_place))", "score": -0.35489476676020537, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),language.name,!=,???????),merge(getData(oscar_nominee),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), person.death_day),person.death_place))", "score": -0.37432066882038334, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}, {"orig_question": "How many deathplaces for oscar nominated persons whose birthday is not 1929-05-31 and who have been involved in a movie with spoken language ??????? are counted?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),movie.original_language,!=,1929-05-31),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.oscar_id), person.death_place),person.death_place))", "score": -0.374842698280063, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,???????),filter(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id),person.birth_day,!=,1929-05-31),language.iso_639_1,spoken_language.iso_639_1), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 20, "beams": [{"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Rumored), company.name),company.name))", "score": -0.07934022274532658, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.1572356626619568, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.status,=,Rumored), company.name),company.name))", "score": -0.16675029779944506, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,=,Rumored),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2040808128190254, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Rumored),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.22107586997540224, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,=,Rumored),getData(company),production_company.company_id,company.id),movie.status,=,Rumored), company.name),company.name))", "score": -0.25697767036480895, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Rumored), company.name),movie.title))", "score": -0.3092714839317465, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Rumored), company.name),company.name))", "score": -0.31857867254121586, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Rumored),movie.status,=,Rumored), company.name),company.name))", "score": -0.3478380204556379, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Rumored), company.name),production_company.company_id))", "score": -0.3516385950135488, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Rumored), movie.title),company.name))", "score": -0.3679952839581728, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.status,=,Rumored), company.name),movie.title))", "score": -0.37733560020681384, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),movie.title))", "score": -0.39155053524441735, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),production_company.company_id))", "score": -0.3977295551626286, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different production companies exists with movies having the movie status Rumored?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), movie.title),company.name))", "score": -0.40214643276979145, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Rumored),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 21, "beams": [{"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),language.name))", "score": -0.183725770307271, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), language.name),language.name))", "score": -0.18596919407852341, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing), movie.original_language),movie.original_language))", "score": -0.20924596959220496, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.24062351549493746, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.original_language),language.name))", "score": -0.26010281323349715, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(language),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),language.name))", "score": -0.2669200021087517, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(language),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), language.name),language.name))", "score": -0.26916342588000414, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),language.name))", "score": -0.2891962764727377, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), language.name),language.name))", "score": -0.29143970024399013, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,suicide bombing), movie.original_language),language.name))", "score": -0.2989060796340222, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))", "score": -0.31359161388444784, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), language.name),movie.original_language))", "score": -0.31583503765570026, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(language),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),language.name))", "score": -0.37239050827421843, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,suicide bombing),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(language),has_keyword.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.37300958031362685, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}, {"orig_question": "Are there any original language from the movie with the keyword name suicide bombing?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(language),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), language.name),language.name))", "score": -0.37463393204547085, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,suicide bombing),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 22, "beams": [{"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),getData(company),production_company.company_id,company.id),person.birth_day,>=,1987-08-25), company.name),company.name))", "score": -0.26986393475543197, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),getData(company),production_company.company_id,company.id),person.birth_day,>=,1987-08-25), company.name),company.name))", "score": -0.2722140615937888, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,>=,1987-08-25),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.2747315439936107, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),getData(company),production_company.company_id,company.id),person.death_day,>=,1987-08-25), company.name),company.name))", "score": -0.29864370235995047, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),getData(company),production_company.company_id,company.id),person.death_day,>=,1987-08-25), company.name),company.name))", "score": -0.30099382919830736, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,>=,1987-08-25),merge(getData(production_company),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),cast.movie_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.31236441847568736, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,production_company.movie_id),person.birth_day,>=,1987-08-25), company.name),company.name))", "score": -0.32053460822723234, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1987-08-25),getData(production_company),person.id,cast.person_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.32218342718542814, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,production_company.movie_id),person.birth_day,>=,1987-08-25), company.name),company.name))", "score": -0.32258437933644296, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,company.id),person.birth_day,>=,1987-08-25), company.name),company.name))", "score": -0.32507833049251544, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),merge(getData(production_company),getData(company),production_company.company_id,company.id),cast.movie_id,company.id),person.birth_day,>=,1987-08-25), company.name),company.name))", "score": -0.3271281150843099, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,>=,1987-08-25),merge(getData(production_company),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),cast.movie_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.33086254185326847, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(cast),getData(production_company),cast.movie_id,movie.id),person.id,cast.person_id),getData(company),production_company.company_id,company.id),person.birth_day,>=,1987-08-25), company.name),company.name))", "score": -0.3415399065513782, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(production_company),cast.movie_id,movie.id),person.id,cast.person_id),getData(company),production_company.company_id,company.id),person.birth_day,>=,1987-08-25), company.name),company.name))", "score": -0.3438900455689269, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a cast member that was born on 1987-08-25 or after ? ", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,>=,1987-08-25),merge(getData(production_company),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),cast.movie_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.34430316113053244, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id),person.birth_day,>=,1987-08-25), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 23, "beams": [{"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)", "score": -0.14835090378413415, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>=,1996-05-10), movie.id),movie.runtime)", "score": -0.3240708618587677, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.runtime),movie.runtime))", "score": -0.47527668095426634, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1996-05-10), movie.runtime),movie.runtime))", "score": -0.49124125606613234, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.runtime),movie.runtime)", "score": -0.5585010222810414, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.release_date,>=,1996-05-10),movie.runtime),movie.runtime))", "score": -0.5982104880531551, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.release_date,>,1996-05-10),movie.runtime),movie.runtime))", "score": -0.602016721459222, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.release_date,>,1996-05-10),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.runtime))", "score": -0.659652092341714, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.release_date,>,1996-05-10),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.runtime))", "score": -0.6818534577160986, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.release_date,>,1996-05-10),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),movie.runtime),movie.runtime))", "score": -0.718573079222448, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.release_date,>,1996-05-10),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,movie.id),movie.runtime),movie.runtime))", "score": -0.7251117178336475, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,>=,1996-05-10), movie.runtime),movie.runtime)", "score": -0.7342209803556748, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.release_date,>,1996-05-10),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),movie.runtime),movie.runtime))", "score": -0.7407744318601751, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.release_date,>,1996-05-10),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,movie.id),movie.runtime),movie.runtime))", "score": -0.7473130375221956, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}, {"orig_question": "What's the runtime of all movies, which were released after 1996-05-10?", "inferred_code": "sum(filter(getData(movie),movie.release_date,>=,1996-05-10),movie.runtime)", "score": -0.7611388079339317, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,>,1996-05-10), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 24, "beams": [{"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>=,8.4),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.08872486793631898, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>=,8.4), genre.name),genre.name))", "score": -0.09951045922338496, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.17483971718115232, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>=,8.4),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.23274266864593213, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>=,8.4), company.name),genre.name))", "score": -0.35107045590908165, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4), genre.name),genre.name))", "score": -0.3686639528575865, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),movie.title,>=,8.4), genre.name),genre.name))", "score": -0.3697220170165101, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>=,8.4), oscar.category),genre.name))", "score": -0.38209814078178483, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>=,8.4), movie.original_language),genre.name))", "score": -0.38262359103190474, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),movie.original_language,>=,8.4), genre.name),genre.name))", "score": -0.3951445406384959, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>=,8.4), movie.title),genre.name))", "score": -0.4027261742705139, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>,8.4), genre.name),genre.name))", "score": -0.4155637525832541, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,spoken_language.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>=,8.4), genre.name),genre.name))", "score": -0.4206272887028996, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>=,8.4),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),has_genre.genre_id))", "score": -0.4234619337775568, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "Is there a genre in movies where the movie vote average is more or the same than 8.4?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8.4),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4319765900364451, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.vote_average,>=,8.4),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 25, "beams": [{"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,!=,Huckabee's),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.runtime),movie.runtime)", "score": -0.08031361278365702, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,!=,Huckabee's),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.id),movie.runtime)", "score": -0.13046925325135666, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Huckabee's),getData(movie),production_company.movie_id,movie.id), movie.runtime),movie.runtime)", "score": -0.1446534586621574, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Huckabee's),getData(movie),production_company.movie_id,movie.id), movie.id),movie.runtime)", "score": -0.3295550675973578, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,!=,Huckabee's),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.movie_id), movie.runtime),movie.runtime)", "score": -0.4521403404745013, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.runtime),movie.runtime)", "score": -0.45246482923250525, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,!=,Huckabee's),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),production_company.movie_id,production_company.company_id), movie.runtime),movie.runtime)", "score": -0.46190510620698993, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,!=,Huckabee's),merge(getData(company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.runtime),movie.runtime)", "score": -0.47470104566586224, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,!=,Huckabee's),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.title),movie.runtime)", "score": -0.47515969864034213, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,!=,Huckabee's),merge(getData(production_company),getData(movie),production_company.company_id,movie.id),company.id,production_company.company_id), movie.runtime),movie.runtime)", "score": -0.4762337825634296, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,!=,Huckabee's),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,production_company.company_id), movie.vote_average),movie.runtime)", "score": -0.4826084835452074, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(filter(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.company_id),company.name,!=,Huckabee's),getData(movie),production_company.movie_id,movie.id),movie.runtime,=,Huckabee's),movie.runtime)", "score": -0.48354829106346037, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(merge(getData(company),getData(production_company),company.id,production_company.movie_id),company.name,!=,Huckabee's),getData(movie),production_company.movie_id,movie.id), movie.runtime),movie.runtime)", "score": -0.48377703768518093, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,!=,Huckabee's),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.name,production_company.company_id), movie.runtime),movie.runtime)", "score": -0.4842266713212875, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}, {"orig_question": "What is the average runtime of movies that were not produced by the company \"Huckabee's\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),company.name,!=,Huckabee's),merge(getData(production_company),getData(movie),production_company.movie_id,movie.id),company.id,company.name), movie.runtime),movie.runtime)", "score": -0.4844937087724787, "correct_code": "avg(distinct(filter(merge(merge(getData(company),getData(production_company),company.id,production_company.company_id),getData(movie),production_company.movie_id,movie.id),company.name,!=,Huckabee's), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 26, "beams": [{"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Greece),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.10426121152866895, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Greece),getData(production_country),movie.id,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.16853136639412455, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Greece),getData(production_country),country.iso_3166_1,production_country.movie_id),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.21800371820064518, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Greece),getData(production_country),movie.id,production_country.movie_id),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.2822738730661008, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,=,Greece), movie.vote_average),movie.vote_average))", "score": -0.28442486543882817, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,Greece),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.2905179027652728, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.vote_average),movie.vote_average))", "score": -0.29301451816423013, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(country),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.vote_average),movie.vote_average))", "score": -0.30210205437364135, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Greece),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.31897162811805035, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),movie.status,=,Greece),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.32411864662611517, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),country.name,=,Greece),getData(production_country),movie.id,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.3547880576307284, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),country.name,=,Greece),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.3713755737108745, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Greece),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.3784187909631447, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),movie.status,=,Greece),getData(production_country),movie.id,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.3883887835979515, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}, {"orig_question": "What is the movie vote average from production country Greece?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),production_country.iso_3166_1,=,Greece),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.39471341119942027, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Greece), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 27, "beams": [{"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.id),movie.budget)", "score": -0.054867091152245084, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.budget),movie.budget)", "score": -0.15936909280853653, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.budget)", "score": -0.267923987522007, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)", "score": -0.2996281172751657, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.id),movie.budget)", "score": -0.30619580840326127, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,crew.person_id),getData(movie),cast.movie_id,movie.id), movie.id),movie.budget)", "score": -0.31551279241499713, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.budget)", "score": -0.32377368056042416, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_place,=,Alhambra, Kalifornien),getData(movie),cast.movie_id,movie.id), movie.id),movie.budget)", "score": -0.3296229147253016, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id), movie.id),movie.budget)", "score": -0.32967784150197593, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(spoken_language),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.id),movie.budget)", "score": -0.3626567802860136, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(crew),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.id),movie.budget)", "score": -0.372773623050219, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.death_place,!=,Alhambra, Kalifornien),getData(movie),cast.movie_id,movie.id), movie.id),movie.budget)", "score": -0.38430797448967496, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)", "score": -0.3925293232873051, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.budget),movie.budget)", "score": -0.41069780095031605, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}, {"orig_question": "What is the sum of the movie budgets of all movies having cast members who died in Alhambra, Kalifornien?", "inferred_code": "sum(distinct(merge(merge(merge(filter(getData(person),person.death_place,=,Alhambra, Kalifornien),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),getData(movie),person.id,cast.person_id), movie.id),movie.budget)", "score": -0.42834353883766835, "correct_code": "sum(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,Alhambra, Kalifornien), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 28, "beams": [{"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.11603294704635574, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.20916951334640238, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),person.gender,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.26583652828842863, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.2776082300068164, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),genre.name,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.28408187207053187, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Fame),getData(has_genre),genre.id,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.28717272214642875, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Fame),getData(has_genre),movie.id,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2905996715708435, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(genre),genre.name,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),genre.id,has_genre.genre_id),genre.name,=,Fame), genre.name),genre.name))", "score": -0.3111312776949535, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),genre.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3268643942195983, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),movie.original_language,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.33650641134858417, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Fame),getData(has_genre),genre.id,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3366188452988465, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Fame),getData(has_genre),movie.id,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3400457947232612, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),genre.name,=,Fame), genre.name),genre.name))", "score": -0.3493117271001086, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),movie.original_language,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3576305287854511, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}, {"orig_question": "What are the genres of Fame?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,Fame),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.genre_id), genre.name),genre.name))", "score": -0.37356561083272005, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Fame), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 29, "beams": [{"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),company.name))", "score": -0.10914439144971119, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,!=,119), company.name),company.name))", "score": -0.13804989183533256, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,!=,119),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.1427603685421627, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.1691423204010707, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.runtime,!=,119),getData(company),production_company.company_id,company.id),movie.runtime,!=,119), company.name),company.name))", "score": -0.2742917162363067, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.29363255649344666, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>=,119), company.name),company.name))", "score": -0.2969739740497525, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.runtime,!=,119),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3050306476257118, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,>=,119), company.name),company.name))", "score": -0.3245253650674248, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,!=,119), company.name),company.name))", "score": -0.37597554373916764, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,!=,119),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3888717421328678, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),company.name))", "score": -0.4030881623509485, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,119), company.name),company.name))", "score": -0.40644921582548776, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,!=,119), movie.title),company.name))", "score": -0.4211669365665339, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "What are the names of companies that have produced a movie that does not have a runtime of 119?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,>,119), company.name),company.name))", "score": -0.4485750901435837, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,119),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 30, "beams": [{"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.vote_average),movie.vote_average))", "score": -0.09331510972697288, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.vote_count,>=,621),movie.vote_count), movie.vote_average))", "score": -0.3798741527280072, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.vote_average),movie.vote_count))", "score": -0.3817301878007129, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.vote_count),movie.vote_average))", "score": -0.45494542096275836, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.vote_count,>=,621),movie.vote_average), movie.vote_average))", "score": -0.46304360557405744, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.vote_count,>=,621),movie.vote_count), movie.id))", "score": -0.48658834178058896, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,621), movie.vote_average),movie.vote_average))", "score": -0.49114284210372716, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.vote_count,>=,621),movie.vote_average), movie.id))", "score": -0.5697577946266392, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.vote_average),movie.revenue))", "score": -0.6122077592881396, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,621), movie.vote_average),movie.vote_average))", "score": -0.6172394511522725, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.revenue),movie.vote_average))", "score": -0.6680751499952748, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.revenue),movie.vote_count,>=,621), movie.vote_average),movie.vote_average))", "score": -0.7127545769807069, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.vote_count),movie.vote_count))", "score": -0.7433604990364984, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.revenue),movie.vote_count,>=,621), movie.vote_count),movie.vote_average))", "score": -0.7468129859084089, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}, {"orig_question": "are there movies with at least 621 votes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.vote_average),movie.title))", "score": -0.7658761033089831, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,621), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 31, "beams": [{"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.15189958537397982, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1911-08-06), movie.title),movie.title))", "score": -0.21025854170147795, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,=,1911-08-06), movie.title),movie.title))", "score": -0.2200650182246183, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,1911-08-06),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "score": -0.224175680754907, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(crew),person.id,crew.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))", "score": -0.26129190551548837, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(crew),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.2670761820851339, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.birth_day,=,1911-08-06),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.27730431323360827, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,1911-08-06),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.32534601004480684, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,1911-08-06),merge(getData(crew),merge(getData(movie),merge(getData(production_company),getData(movie),crew.movie_id,movie.id),person.id,movie.id),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "score": -0.3263355683564621, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.3401778710026062, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,=,1911-08-06),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.3439317095098039, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,=,1911-08-06), movie.title),movie.title))", "score": -0.3503262145479376, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_day,=,1911-08-06), movie.title),movie.title))", "score": -0.35974356924585316, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.birth_day,=,1911-08-06),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))", "score": -0.3621147958569253, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What is the title of the movies in which persons born in 1911-08-06 were involved?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,=,1911-08-06),merge(getData(crew),merge(getData(movie),merge(getData(movie),getData(movie),crew.movie_id,movie.id),person.id,movie.id),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "score": -0.3656660409475548, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1911-08-06),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 32, "beams": [{"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,sound), person.death_day),person.death_day))", "score": -0.10160672053496969, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.15506897794308377, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound), person.death_day),person.death_day))", "score": -0.2227978429973377, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_day),person.death_day))", "score": -0.2607268564342621, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,sound), person.death_day),movie.budget))", "score": -0.30838323572598053, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.3115253473200845, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,movie.id),oscar.category,=,sound), person.death_day),person.death_day))", "score": -0.31317866534434347, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,sound), person.death_day),person.death_day))", "score": -0.33206616979909764, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,sound), movie.budget),person.death_day))", "score": -0.34522678297131715, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,sound), person.death_day),person.death_place))", "score": -0.35080673365170173, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))", "score": -0.35174414842048923, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,sound), person.death_day),person.death_day))", "score": -0.3594509073601901, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.sub_category,=,sound), person.death_day),person.death_day))", "score": -0.3708527356739237, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,sound), person.death_day),person.death_day))", "score": -0.3818790613805856, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "How many different death days for oscar winners in the category sound are there?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,sound), person.death_day),oscar_nominee.person_id))", "score": -0.38435683490114386, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,sound),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 33, "beams": [{"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.category),oscar.year))", "score": -0.2784143432075594, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), keyword.name),oscar.year))", "score": -0.3087396911312119, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.category),movie.vote_average))", "score": -0.339226189890376, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.number),oscar.year))", "score": -0.3394609431005629, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), movie.title),oscar.year))", "score": -0.3477124896427125, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(language),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.category),oscar.year))", "score": -0.36488263359719586, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), keyword.name),movie.vote_average))", "score": -0.3695515378140285, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.category),language.name))", "score": -0.37620107422492766, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), language.name),oscar.year))", "score": -0.37851501718905955, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.category),oscar.year))", "score": -0.38260007283066166, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), language.name),oscar.year))", "score": -0.38342272799891347, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(language),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), keyword.name),oscar.year))", "score": -0.3952079815208483, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), oscar.number),movie.vote_average))", "score": -0.4002727897833795, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085), person.birth_place),oscar.year))", "score": -0.40514514825908804, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}, {"orig_question": "Are there years in which people were nominated for an oscar for a movie with a popularity equal to or less than 127.085?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),movie.original_language,>=,127.085), movie.title),oscar.year))", "score": -0.5053435425915467, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.popularity,<=,127.085),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 34, "beams": [{"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>=,4358000), movie.revenue),movie.revenue))", "score": -0.1435129312958452, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.revenue),movie.revenue))", "score": -0.16005595458409516, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>=,4358000), movie.id),movie.revenue))", "score": -0.3983524149443838, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.id),movie.revenue))", "score": -0.41489543823263375, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,!=,4358000), movie.revenue),movie.revenue))", "score": -0.4151825947847101, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>=,4358000), movie.budget),movie.revenue))", "score": -0.5316157048728201, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.budget),movie.revenue))", "score": -0.54815872816107, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,<=,4358000), movie.revenue),movie.revenue))", "score": -0.5663709087457391, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,=,4358000), movie.revenue),movie.revenue))", "score": -0.5975668473329279, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>=,4358000), movie.vote_count),movie.revenue))", "score": -0.6437168723132345, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,<,4358000), movie.revenue),movie.revenue))", "score": -0.6588574094857904, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.vote_count),movie.revenue))", "score": -0.6602598956014845, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,!=,4358000), movie.id),movie.revenue))", "score": -0.6700220632992568, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,>=,4358000), movie.revenue),movie.revenue))", "score": -0.6899344694029423, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}, {"orig_question": "How many movies with a revenue larger than 4358000 exist?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,>,4358000), movie.revenue),movie.revenue))", "score": -0.7064774926911923, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.revenue,>,4358000), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 35, "beams": [{"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)", "score": -0.02004325802211969, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.revenue)", "score": -0.5451153326335599, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.popularity),movie.popularity)", "score": -0.7327256251382493, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.vote_average)", "score": -0.8105951954009843, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.runtime)", "score": -0.8125371423012171, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.release_date)", "score": -0.84864317838938, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.release_date),movie.popularity)", "score": -0.8719637371387963, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(filter(getData(movie),movie.vote_average,>,2.8),movie.popularity)", "score": -0.9189429798149742, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),person.birth_day)", "score": -0.9249235733298605, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(filter(getData(movie),movie.vote_average,=,2.8),movie.popularity)", "score": -0.9380823415918732, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,2.8), movie.id),movie.popularity)", "score": -0.9785938296933103, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,!=,2.8), movie.id),movie.popularity)", "score": -1.0143158261300702, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.id)", "score": -1.0240825438738617, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.status)", "score": -1.0296617077075894, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}, {"orig_question": "What is the summed popularity of movies with a vote average of 2.8?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_count,=,2.8), movie.id),movie.popularity)", "score": -1.040479193677867, "correct_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,2.8), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 36, "beams": [{"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.07784032431139822, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1448),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.10999245151338566, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>=,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.2619526159659656, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,!=,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.32325865381886654, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>=,1448),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.33265641129921825, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.vote_count,>,1448),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3476224197887757, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(production_company),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.35912803144935057, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1448),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.3685688440927411, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,!=,1448),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3729950136452954, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,company.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.38037237573374544, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,production_company.movie_id), keyword.name),keyword.name))", "score": -0.39133760060770567, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1448),getData(production_company),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.39523057389926214, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),has_keyword.keyword_id))", "score": -0.3959082212996426, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(company),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3978980310514567, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of all movies with a vote count more than 1448.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1448),merge(getData(has_keyword),getData(keyword),production_company.company_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3994876215572555, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.vote_count,>,1448), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 37, "beams": [{"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.revenue),movie.revenue))", "score": -0.050348083346761996, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))", "score": -0.2747945085611718, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,Released), movie.revenue),movie.revenue))", "score": -0.39793269322035485, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Released), movie.revenue),movie.revenue))", "score": -0.485375036343612, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,Released), movie.revenue),movie.revenue))", "score": -0.4931857137453335, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Released), movie.revenue),movie.revenue))", "score": -0.5193605915155786, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,Released), movie.revenue),movie.revenue))", "score": -0.6099403052103298, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Released), movie.revenue),movie.revenue))", "score": -0.6191871956434625, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<=,Released), movie.revenue),movie.revenue))", "score": -0.6223791184347647, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,!=,Released), movie.revenue),movie.revenue))", "score": -0.6829686908495205, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,Released), movie.revenue),movie.revenue))", "score": -0.6933260158148187, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.revenue),movie.budget))", "score": -0.7163099521749245, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,<,Released), movie.revenue),movie.revenue))", "score": -0.7176321389597433, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.revenue),movie.revenue))", "score": -0.7641495074494742, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies that have already been released? ", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,Released), movie.revenue),movie.vote_count))", "score": -0.7760561579816567, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Released), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 38, "beams": [{"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.10327223347849213, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.15737274693674408, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Fast Five), language.name),movie.original_language))", "score": -0.3093710641924387, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Fast Five), language.name),movie.original_language))", "score": -0.3794247934500759, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),language.name,=,Fast Five), language.name),movie.original_language))", "score": -0.3926059846306238, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Fast Five), language.name),movie.original_language))", "score": -0.4387024178152989, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.iso_639_1),language.name,=,Fast Five), language.name),movie.original_language))", "score": -0.4530477561015537, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),language.name,=,Fast Five), language.name),movie.original_language))", "score": -0.462659713888261, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.movie_id,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Fast Five), language.name),movie.original_language))", "score": -0.4657014923928496, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Fast Five), language.name),language.name))", "score": -0.4749033419919417, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),language.name,=,Fast Five), language.name),movie.original_language))", "score": -0.47653013987369786, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.original_language,=,Fast Five), language.name),movie.original_language))", "score": -0.49595591596250155, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.5073846161726402, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Fast Five), language.name),movie.original_language))", "score": -0.50875618251407, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "What is the original language of the movie titled \"Fast Five\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),language.iso_639_1,spoken_language.movie_id),language.name,=,Fast Five), language.name),movie.original_language))", "score": -0.5219374249181316, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 39, "beams": [{"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.09392744525393937, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))", "score": -0.16424828990420792, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.release_date))", "score": -0.47071302066615317, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.original_language))", "score": -0.5408213747577975, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.release_date))", "score": -0.5410338653164217, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.release_date),movie.title))", "score": -0.5585222718218574, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.status))", "score": -0.5643349898891756, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.status),movie.title))", "score": -0.5772179243067512, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.status,=,Post Production),movie.status), movie.title))", "score": -0.5785029787293752, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.original_language))", "score": -0.611142219408066, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.release_date),movie.title))", "score": -0.628843116472126, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.status))", "score": -0.6346558345394442, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.status,=,Post Production),movie.title), movie.title))", "score": -0.6397799584738095, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.status),movie.title))", "score": -0.6475387689570198, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}, {"orig_question": "What movies are not in Post Production now?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.status,=,Post Production),movie.status), movie.id))", "score": -0.7476782981029828, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 40, "beams": [{"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.17302594718527614, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.20829592519318565, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.26266649707517026, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.3202209351130198, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.32898696129775573, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.35417937899023205, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.36410498818108933, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.40519401975967645, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.4156459301755255, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(getData(movie),language.name,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.41983824565101957, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(merge(filter(getData(movie),language.name,!=,Fran\u00e7ais),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.id),movie.runtime)", "score": -0.42226993385062006, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.iso_639_1,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.44377396653430956, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,movie.id),language.name,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.4461582282153717, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.4595645916416611, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}, {"orig_question": "Whats the total sum of runtimes of movies translatet to Fran\u00e7ais?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,!=,Fran\u00e7ais), movie.id),movie.runtime)", "score": -0.4799093491379524, "correct_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,Fran\u00e7ais), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 41, "beams": [{"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1957-04-28), person.name),person.name))", "score": -0.2650996923111961, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))", "score": -0.3449364110492752, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,=,1957-04-28),person.name), person.name))", "score": -0.3771678431221517, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-04-28), person.name),person.name))", "score": -0.3997229590677307, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,1957-04-28), person.name),person.name))", "score": -0.4810834388845251, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-04-28), person.name),person.name))", "score": -0.49027427580585936, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_day,<=,1957-04-28),person.name), person.name))", "score": -0.5053677855321439, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1957-04-28), person.name),person.name))", "score": -0.5085251286291168, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1957-04-28), person.name),person.name))", "score": -0.5210024967454956, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.death_day,=,1957-04-28),person.name), person.name))", "score": -0.5444753429183038, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1957-04-28), person.birth_place),person.name))", "score": -0.5485973983668373, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1957-04-28),person.name), person.name))", "score": -0.5579974761494668, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,<=,1957-04-28), person.name),person.name))", "score": -0.5609201743864105, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1957-04-28), person.name),person.name))", "score": -0.5766186110340641, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}, {"orig_question": "Who was born before April 28th 1957?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.birth_day,=,1957-04-28),person.name), person.name))", "score": -0.6058275830437196, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1957-04-28), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 42, "beams": [{"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.048737064835816156, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,has_genre.movie_id), person.death_place),person.death_place))", "score": -0.2318943270259845, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,<,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.2856189619996142, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>=,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.303387533928909, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,genre.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.3154073127856156, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),movie.budget))", "score": -0.32377500739918064, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), movie.budget),person.death_place))", "score": -0.328234386955434, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.budget,>,380000000),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.33179774302106496, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), genre.name),person.death_place))", "score": -0.33408826991191587, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,380000000),merge(getData(oscar_nominee),getData(genre),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.33440450118123577, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,380000000),merge(getData(has_genre),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.370570036001333, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),person.death_place))", "score": -0.3726578635041496, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.3779800626149765, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,production_company.movie_id), person.death_place),person.death_place))", "score": -0.38183331610375315, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "How many different death places are there for oscar nominees in movies with a budget over 380000000?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,<=,380000000),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_place),person.death_place))", "score": -0.38213361381457916, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,380000000),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 43, "beams": [{"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.34865690668313276, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(oscar_winner),country.iso_3166_1,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.35961321423556153, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.36505644520453107, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(oscar_winner),country.iso_3166_1,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.3760127527569598, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(country),oscar.sub_category,=,Afghanistan),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.38497389282031114, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3878057354982808, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(country),oscar.sub_category,=,Afghanistan),getData(oscar_winner),country.iso_3166_1,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.39593020037273985, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(oscar_winner),country.iso_3166_1,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3976771899442635, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(country),oscar.sub_category,=,Afghanistan),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.4013734313417094, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(country),oscar.sub_category,=,Afghanistan),getData(oscar_winner),country.iso_3166_1,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.41232973889413815, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar_winner.oscar_id,oscar_winner.movie_id), oscar.category),oscar.sub_category))", "score": -0.42941126766364496, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.sub_category))", "score": -0.43745229223276066, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(oscar),getData(oscar_winner),country.iso_3166_1,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar_winner.oscar_id,oscar_winner.movie_id), oscar.category),oscar.sub_category))", "score": -0.4440157021855202, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(country),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar_winner.oscar_id,oscar_winner.movie_id), oscar.category),oscar.sub_category))", "score": -0.44717746824405463, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Does an oscar category exist where a movie produced in Afghanistan has won an oscar in? ", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(oscar),getData(oscar_winner),country.iso_3166_1,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.sub_category))", "score": -0.45205668072083016, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(country),country.name,=,Afghanistan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 44, "beams": [{"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "score": -0.06678146024205489, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.vote_count))", "score": -0.48011683386721415, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,2998), movie.runtime),movie.runtime))", "score": -0.4958437093810062, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.vote_average),movie.runtime))", "score": -0.546942237233452, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.title))", "score": -0.5687486426249961, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.revenue),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "score": -0.5823596698666523, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "score": -0.6006717457042617, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,movie.revenue),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "score": -0.6038723735857341, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "score": -0.6180811937320225, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.id),movie.runtime)", "score": -0.624893317257675, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.vote_count,>,2998),movie.vote_average),movie.runtime))", "score": -0.6422688522870885, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.vote_count,>,2998),movie.runtime),movie.runtime))", "score": -0.6571417683298932, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))", "score": -0.6860157002593041, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.id),movie.runtime))", "score": -0.7046770187371294, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}, {"orig_question": "Find the runtime of the movies that received vote count of more than 2998.", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.vote_count,>,2998),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_count),movie.runtime))", "score": -0.7469583998335343, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,2998), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 45, "beams": [{"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,=,7.1), genre.name),genre.name))", "score": -0.11448139253472261, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.15128063812482836, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,=,7.1), genre.name),genre.name))", "score": -0.16198364663916517, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,=,7.1), genre.name),genre.name))", "score": -0.18952918331874527, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.vote_average,!=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,=,7.1), genre.name),genre.name))", "score": -0.2626305719504045, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.vote_average,>,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,=,7.1), genre.name),genre.name))", "score": -0.2721726081372997, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,>,7.1), genre.name),genre.name))", "score": -0.2814992873518462, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,>,7.1), genre.name),genre.name))", "score": -0.29663699818752687, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.1),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.30563581321877714, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,!=,7.1), genre.name),genre.name))", "score": -0.3080997012280079, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,!=,7.1), genre.name),genre.name))", "score": -0.3140687907426301, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,>,7.1), genre.name),genre.name))", "score": -0.34159510268080673, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,!=,7.1), genre.name),genre.name))", "score": -0.3643332452531063, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.vote_average,=,7.1), genre.name),genre.name))", "score": -0.3750110404369809, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "In which genres are movies with a vote average of 7.1?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.vote_average,<,7.1), genre.name),genre.name))", "score": -0.3983120948883938, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,=,7.1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 46, "beams": [{"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.1574671003545518, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.17286990168940974, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.3100496936167474, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.34811614039790584, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.42786570036837723, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.48218802306782393, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,cast.person_id),person.name,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.48480223198117495, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.name,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.4887444200405837, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),company.name,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.502521108421206, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.5161423052110325, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.575008969339251, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),movie.budget))", "score": -0.592620044531941, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),movie.budget))", "score": -0.6080228458667989, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),oscar.category,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.6101732659662957, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of people who died in Bloomfield Hills bei Detroit, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),country.name,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))", "score": -0.6135092783297296, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bloomfield Hills bei Detroit, Michigan), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 47, "beams": [{"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.026429956984429737, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.popularity))", "score": -0.423086747267007, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.popularity),movie.status))", "score": -0.4413785219385318, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.vote_average),movie.status))", "score": -0.576033550520151, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.6468493414304248, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.vote_average))", "score": -0.6494609263918392, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.title,=,Topsy-Turvy), movie.popularity),movie.status))", "score": -0.6572285296629553, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.6665769887349597, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.popularity,movie.id),movie.id,spoken_language.movie_id),movie.title,=,Topsy-Turvy), movie.popularity),movie.status))", "score": -0.6672673105620189, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.7070197785765809, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.7083851531424443, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.popularity,movie.id),movie.id,spoken_language.movie_id),movie.title,=,Topsy-Turvy), movie.status),movie.status))", "score": -0.7170585594756446, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.runtime),movie.status))", "score": -0.7686341583921603, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.runtime))", "score": -0.7975638059160701, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}, {"orig_question": "is there a status for the movie with the title Topsy-Turvy?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.title),movie.status))", "score": -0.8023826658918551, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Topsy-Turvy), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 48, "beams": [{"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.0970806816710639, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.runtime)", "score": -0.14670083922258226, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.popularity)", "score": -0.38202737971596173, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.status)", "score": -0.46313314453376087, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.title)", "score": -0.6009170016240485, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.7256718546998846, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.revenue)", "score": -0.7334270849709237, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.7418498001059896, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity),movie.status,=,Rumored), movie.id),movie.runtime)", "score": -0.7855536159026367, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_count)", "score": -0.79941092598032, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity),movie.status,=,Rumored), movie.id),movie.runtime)", "score": -0.8017314115911703, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),oscar.year)", "score": -0.8068976283255325, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.release_date)", "score": -0.8139893849286243, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),person.name)", "score": -0.8447302773610721, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}, {"orig_question": "What is the sum of the movie.vote_average of movies with the status rumored? ", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),oscar_winner.movie_id)", "score": -0.8454094363942516, "correct_code": "sum(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 49, "beams": [{"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.06478483881983266, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.3059995351377438, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.39518823009166226, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.6015369771066617, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.6092727165741962, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.6395091293397854, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.revenue,movie.id),movie.id,movie.revenue),movie.vote_count,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.7172215399834847, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.revenue),movie.vote_count,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.7172890287625748, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.7660929439607571, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,<=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.7808234059502865, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.title,=,The Spanish Apartment),movie.vote_count),movie.vote_count))", "score": -0.7861105529136694, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.tagline,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.7880495069566678, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.7923680562598747, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),keyword.name,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.797204049771608, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count of the movie The Spanish Apartment?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.homepage,=,The Spanish Apartment), movie.vote_count),movie.vote_count))", "score": -0.8126142942364822, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Spanish Apartment), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 50, "beams": [{"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))", "score": -0.13502759812372722, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.name))", "score": -0.1884482869095652, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.19295561942742204, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.name))", "score": -0.21249439858070823, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.21517237052395585, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.name))", "score": -0.2564342854269373, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.death_day))", "score": -0.34012749516664, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.3406408043581009, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),getData(person),oscar_winner.person_id,person.id), person.name),person.birth_day))", "score": -0.34514813687595775, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.death_day),person.birth_day))", "score": -0.3531402003045095, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),cast.person_id))", "score": -0.35629832762131053, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.3662007331140366, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.death_day))", "score": -0.3680256678602488, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.name),person.birth_day))", "score": -0.36887870505728426, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "How many different birth days do exist of oscar winners who won the sub category writing (screenplay based on material previously produced or published)?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(person),filter(getData(person),person.name,=,writing (screenplay based on material previously produced or published)),person.id,oscar_winner.person_id),oscar_winner.movie_id,oscar_winner.person_id), person.birth_day),person.birth_day))", "score": -0.5266021603210441, "correct_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (screenplay based on material previously produced or published)),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 51, "beams": [{"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id), movie.title),company.name))", "score": -0.2294271337890741, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id), company.name),company.name))", "score": -0.2348619518869069, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_country.iso_3166_1,company.id), company.name),company.name))", "score": -0.2948713408986324, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),language.iso_639_1,movie.id), company.name),company.name))", "score": -0.29673317433031143, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(company),has_keyword.keyword_id,company.id), company.name),company.name))", "score": -0.2967720134646434, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id), company.name),company.name))", "score": -0.29795274512676373, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3106864506930808, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),language.iso_639_1,movie.id), movie.title),company.name))", "score": -0.31912594183948495, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id), movie.title),company.name))", "score": -0.32034551263593725, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),language.iso_639_1,production_company.company_id), company.name),company.name))", "score": -0.3340796667611359, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id), movie.title),movie.title))", "score": -0.3343521130804626, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),spoken_language.movie_id,production_company.company_id), company.name),company.name))", "score": -0.33529923755758817, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id), company.name),movie.title))", "score": -0.3397869311782954, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(production_company),getData(company),production_company.company_id,company.id),language.iso_639_1,movie.id), company.name),company.name))", "score": -0.3405654792328587, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "Are there companies that produce movies that were translated to Italiano?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Italiano),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(production_company),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id), company.name),company.name))", "score": -0.341785050029311, "correct_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(language),language.name,=,Italiano),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 52, "beams": [{"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,factory worker),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.11198947701969493, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,factory worker),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_average))", "score": -0.11327091471479432, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,factory worker),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))", "score": -0.22734443744013072, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))", "score": -0.2274646121540885, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,factory worker), movie.vote_average),movie.vote_average))", "score": -0.2577213832078203, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,factory worker),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))", "score": -0.280733555918653, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))", "score": -0.3374636111702907, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,factory worker),getData(movie),has_keyword.movie_id,movie.id),movie.vote_average),movie.vote_average))", "score": -0.34529612676734306, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,factory worker),movie.vote_average),movie.vote_average))", "score": -0.35998401554886716, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(keyword),keyword.name,=,factory worker),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.vote_average),movie.vote_average))", "score": -0.3650470060737375, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,factory worker),getData(movie),has_keyword.movie_id,movie.id),getData(movie),has_keyword.movie_id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))", "score": -0.37024430529940705, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,factory worker),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),movie.vote_average),movie.vote_average))", "score": -0.3987903244460039, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,factory worker),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_count))", "score": -0.4063129281091333, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,factory worker),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.vote_average),movie.vote_count))", "score": -0.406514865278088, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}, {"orig_question": "What are the movie vote averages for movies that have the keyword factory worker? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,factory worker),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_count))", "score": -0.43704033002689946, "correct_code": "done(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,factory worker),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 53, "beams": [{"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.22835097609514185, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_count,!=,393),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.2724329812815598, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_count,!=,393),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.number),oscar.number)", "score": -0.333602127585163, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_count,!=,393),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.runtime),oscar.number)", "score": -0.3348505089902299, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count,!=,393), oscar.number),oscar.number)", "score": -0.3380326017646041, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.vote_count,!=,393),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.number)", "score": -0.34213134707521176, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count,!=,393), oscar.number),oscar.number)", "score": -0.35573774352569043, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.36134627091372007, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,movie.id),movie.vote_count,!=,393), oscar.number),oscar.number)", "score": -0.37077962292661587, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count,>=,393), oscar.number),oscar.number)", "score": -0.378018208898205, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393), oscar.id),oscar.number)", "score": -0.3789533854981476, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,movie.id),movie.vote_count,!=,393), oscar.number),oscar.number)", "score": -0.3884847646877022, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count,!=,393), oscar.id),oscar.number)", "score": -0.3946984454139415, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_count,>=,393), oscar.number),oscar.number)", "score": -0.3957233620015315, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "Whats the average oscar number for movies with oscar nominees and a vote count other than 393", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393), oscar.number),oscar.number)", "score": -0.39684091501940827, "correct_code": "avg(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_count,!=,393),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 54, "beams": [{"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.popularity))", "score": -0.028391935211402597, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,2.6), movie.popularity),movie.popularity))", "score": -0.41546734357325477, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,2.6), movie.popularity),movie.popularity))", "score": -0.5002879419371311, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,2.6), movie.popularity),movie.popularity))", "score": -0.5116930820986454, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))", "score": -0.5800240932803717, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.status))", "score": -0.6326796033426945, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.release_date))", "score": -0.6359372355982487, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.revenue))", "score": -0.6454136588617985, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,2.6), movie.popularity),movie.popularity))", "score": -0.6755979874178593, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.id))", "score": -0.6974037661057082, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.popularity),movie.id))", "score": -0.7024973847910587, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.status),movie.popularity))", "score": -0.729024040792865, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,2.6), movie.popularity),movie.popularity))", "score": -0.7305770137354557, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,2.6), movie.release_date),movie.popularity))", "score": -0.747963237856311, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}, {"orig_question": "What are the movie popularities of movies with ratings of 2.6?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,null,2.6), movie.popularity),movie.popularity))", "score": -0.8080304482027714, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.vote_average,=,2.6),movie.popularity), movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 55, "beams": [{"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.09553447091454652, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.budget),movie.budget)", "score": -0.16270840790563804, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.budget)", "score": -0.2219987075743326, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_count),movie.budget)", "score": -0.2916593717613815, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,crime novelist), movie.id),movie.budget)", "score": -0.3368462953294817, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,crime novelist),movie.budget),movie.budget))", "score": -0.3983849788349022, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,crime novelist),movie.budget),movie.budget))", "score": -0.404702360220866, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.4155700058171168, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,crime novelist), movie.budget),movie.budget)", "score": -0.42117637789511153, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.4249722847515619, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.budget))", "score": -0.4342720490773051, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(merge(filter(getData(company),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.44123716616076275, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.4414666196810936, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "avg(distinct(merge(filter(getData(genre),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)", "score": -0.44607836095752806, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}, {"orig_question": "What is the averaged movie budget of movies with the keyword \"crime novelist\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,crime novelist), movie.budget),movie.budget))", "score": -0.44802637603762463, "correct_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,crime novelist),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 56, "beams": [{"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.death_day,>,1962-06-30),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.vote_average),movie.revenue))", "score": -0.09959327554413325, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.death_day,!=,1962-06-30),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.vote_average),movie.revenue))", "score": -0.13111777423082405, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.death_day,<,1962-06-30),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.vote_average),movie.revenue))", "score": -0.22618687024605044, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.release_date,>,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.2567378306306606, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.death_day,>,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.vote_average),movie.revenue))", "score": -0.26874716164055784, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.death_day,!=,1962-06-30),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.vote_average),movie.revenue))", "score": -0.3097582993722789, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,>,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.3098753810473926, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.death_day,>,1962-06-30),getData(cast),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.vote_average),movie.revenue))", "score": -0.32806801023859194, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,>,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.3349688882660718, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.death_day,!=,1962-06-30),getData(cast),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.vote_average),movie.revenue))", "score": -0.35959250892528277, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime,>,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.3658120665960713, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.birth_day,>,1962-06-30),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.vote_average),movie.revenue))", "score": -0.3675214425789527, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.death_day,>,1962-06-30),getData(crew),person.id,crew.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.revenue))", "score": -0.3767257362318596, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.release_date,!=,1962-06-30),movie.vote_average),movie.revenue))", "score": -0.3784665172477209, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}, {"orig_question": "What is the revenue of the movie with the highest vote average were a crew member is older than 1962-06-30?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_day,!=,1962-06-30),getData(movie),crew.movie_id,movie.id),movie.vote_average),movie.revenue))", "score": -0.3792084156233366, "correct_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_day,<,1962-06-30),movie.vote_average),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 57, "beams": [{"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), oscar.number),movie.title))", "score": -0.2144375317330387, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,=,6), oscar.number),movie.title))", "score": -0.24198539343979894, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.vote_count),movie.title))", "score": -0.25235160611400725, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.title),movie.title))", "score": -0.2568346260140587, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,=,6), oscar.number),movie.title))", "score": -0.26083795016776107, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,=,6), movie.vote_count),movie.title))", "score": -0.27989946782076747, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.vote_count,=,6), movie.title),movie.title))", "score": -0.284382487720819, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,=,6), movie.vote_count),movie.title))", "score": -0.2987520245487296, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.year,=,6), movie.title),movie.title))", "score": -0.3032350444487811, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,6),oscar.number,=,6), oscar.number),movie.title))", "score": -0.3778000467575376, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), oscar.number),movie.title))", "score": -0.38581550281827093, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,6),oscar.number,=,6), oscar.number),oscar.number))", "score": -0.3891390655626918, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.year,=,6),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.title))", "score": -0.3927154716746194, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,6), oscar.number),movie.title))", "score": -0.41084235631469945, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}, {"orig_question": "How many movies were nominated for an oscar in the 6th edition?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,6), oscar.number),movie.title))", "score": -0.452291824453348, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),oscar.number,=,6), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 58, "beams": [{"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.popularity))", "score": -0.030377152441360522, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.popularity))", "score": -0.3810383080308384, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))", "score": -0.6307022381297429, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.revenue))", "score": -0.6679591094798525, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.release_date))", "score": -0.680170253450342, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.status))", "score": -0.7010753905124147, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.id))", "score": -0.7153091584987123, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,738), movie.popularity),movie.popularity))", "score": -0.7450809329820913, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.id),movie.popularity))", "score": -0.7804106110197608, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,738), movie.popularity),movie.popularity))", "score": -0.8312577414981206, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.revenue),movie.popularity))", "score": -0.8405213588339393, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.popularity),movie.vote_average))", "score": -0.8480269467181643, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,738), movie.popularity),movie.popularity))", "score": -0.8547580647937139, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,738), movie.popularity),movie.popularity))", "score": -0.8744942396951956, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}, {"orig_question": "Show me the movie popularities of all movies with a vote count greater than 738", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,738), movie.status),movie.popularity))", "score": -0.8980288141829078, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,738), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 59, "beams": [{"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))", "score": -0.0763014112089877, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.original_language,=,is),movie.revenue),movie.revenue))", "score": -0.4437143122704583, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue),movie.revenue))", "score": -0.4749845345946328, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity),movie.revenue))", "score": -0.5382418505225081, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,is),movie.revenue),movie.revenue))", "score": -0.5652072354167071, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.popularity),movie.revenue))", "score": -0.5686883599919383, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.revenue))", "score": -0.606932332137346, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,is), movie.revenue),movie.revenue))", "score": -0.6071099653865422, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,is), movie.revenue),movie.revenue))", "score": -0.6749170767407408, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.revenue),movie.revenue))", "score": -0.6762086268984239, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.revenue),movie.revenue))", "score": -0.6824155744300908, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.original_language,=,is),merge(getData(spoken_language),getData(movie),movie.original_language,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue),movie.revenue))", "score": -0.6833886772114385, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,is),movie.revenue),movie.revenue))", "score": -0.6854042149291403, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.id),movie.revenue))", "score": -0.7175904185933177, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}, {"orig_question": "What is the movie revenue of all movies where the original language is Islandish?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.vote_average),movie.revenue))", "score": -0.7223022253674571, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,is), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 60, "beams": [{"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>=,8.2),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_day),person.death_day))", "score": -0.12496787482852549, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>=,8.2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_day))", "score": -0.202269509766006, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>=,8.2),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_day),movie.budget))", "score": -0.23272490561412001, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>=,8.2),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_day),person.death_place))", "score": -0.23427672223958787, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,<=,8.2),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_day),person.death_day))", "score": -0.25393678305109074, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.vote_average,>=,8.2),getData(person),crew.person_id,person.id), person.death_day),person.death_day))", "score": -0.28854254522816997, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>=,8.2),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_day),movie.release_date))", "score": -0.2900037408494027, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.vote_average,>=,8.2), movie.budget),person.death_day))", "score": -0.30132826734647866, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>=,8.2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.30628183478157595, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>=,8.2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),movie.budget))", "score": -0.30803266223376613, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.vote_average,>=,8.2), person.death_day),person.death_day))", "score": -0.32604718231002977, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>=,8.2),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),movie.release_date))", "score": -0.3393399067700971, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>=,8.2),getData(crew),movie.id,crew.movie_id),getData(person),crew.movie_id,person.id), person.death_day),person.death_day))", "score": -0.35913563237200535, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,<=,8.2),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_day),movie.budget))", "score": -0.36169381383668525, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}, {"orig_question": "What are the death days of crew members in movies with a vote average greater or equal to 8.2?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,<=,8.2),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_day),person.death_place))", "score": -0.36324563046215314, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),movie.vote_average,>=,8.2), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 61, "beams": [{"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))", "score": -0.017175808225147193, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>=,142), movie.revenue),movie.revenue))", "score": -0.4159719912822766, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.budget))", "score": -0.5772166374626977, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.vote_count))", "score": -0.6020738008919579, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.budget),movie.revenue))", "score": -0.6963464848486183, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.vote_count),movie.revenue))", "score": -0.6987447373358009, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,142), movie.revenue),movie.revenue))", "score": -0.7318904368694348, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,>,142), movie.revenue),movie.revenue))", "score": -0.7599340736305749, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.vote_average))", "score": -0.7806461575928552, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.id),movie.revenue))", "score": -0.8298021785703895, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),cast.movie_id))", "score": -0.8596170071068627, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),spoken_language.movie_id))", "score": -0.8637355688515527, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.popularity),movie.revenue))", "score": -0.8649155132261512, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.vote_average),movie.revenue))", "score": -0.8790793649641273, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}, {"orig_question": "How many movie revenues are known of the movies with a runtime more than 142?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,>,142), movie.revenue),movie.revenue))", "score": -0.8852646409904992, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,142), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 62, "beams": [{"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.runtime)", "score": -0.06888473050510897, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.runtime),movie.runtime)", "score": -0.2805610090764097, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,Rumored), movie.id),movie.runtime)", "score": -0.3951876119396491, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)", "score": -0.5407545674187445, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,Rumored), movie.runtime),movie.runtime)", "score": -0.6068638905109498, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,Rumored), movie.id),movie.runtime)", "score": -0.6479985249325185, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,Rumored), movie.id),movie.runtime)", "score": -0.6843005637151316, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(merge(getData(movie),getData(movie),movie.id,movie.runtime),movie.runtime,=,Rumored), movie.id),movie.runtime)", "score": -0.6924881418493066, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(filter(getData(movie),movie.runtime,=,Rumored),movie.runtime)", "score": -0.7152493388737169, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),oscar.sub_category,=,Rumored), movie.id),movie.runtime)", "score": -0.7889214593282899, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.id)", "score": -0.8349704002701136, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,Rumored), movie.runtime),movie.runtime)", "score": -0.8596748035038192, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Rumored), movie.id),movie.vote_average)", "score": -0.8806541052073541, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,Rumored), movie.id),movie.runtime)", "score": -0.8819198893901348, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}, {"orig_question": "What is the average runtime of rumored movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,Rumored), movie.runtime),movie.runtime)", "score": -0.8959768422864324, "correct_code": "avg(filter(getData(movie),movie.status,=,Rumored),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 63, "beams": [{"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.02156358055934231, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Released), movie.runtime),movie.runtime)", "score": -0.5730976293710055, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),crew.movie_id,movie.id),movie.id,movie.id),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.6373643292907976, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),movie.id,movie.id),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.640449745296302, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),crew.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.6838647558978194, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.686950171903324, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),crew.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.688999106773076, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),crew.movie_id,movie.id),movie.id,crew.movie_id),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.6903787224347734, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.6920845227785806, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),movie.id,crew.movie_id),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.693464138440278, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),crew.movie_id,movie.id),movie.id,movie.id),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.6936669830649738, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),crew.movie_id,movie.id),movie.id,movie.id),movie.runtime,=,Released), movie.id),movie.runtime)", "score": -0.6940994899072209, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,movie.id),movie.status,=,Released), movie.id),movie.runtime)", "score": -0.6967523990704783, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,=,Released), movie.id),movie.runtime)", "score": -0.7002062038184965, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}, {"orig_question": "What is the total runtime of unreleased movies?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,=,Released), movie.id),movie.runtime)", "score": -0.7184535979786509, "correct_code": "sum(distinct(filter(getData(movie),movie.status,!=,Released), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 64, "beams": [{"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.023902134424133692, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.3495880850518546, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_count,>,950), language.name),movie.original_language))", "score": -0.4487949168197053, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), language.name),movie.original_language))", "score": -0.4511435212667989, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.4962253819786691, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,cast.movie_id), language.name),movie.original_language))", "score": -0.549682702754176, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,950), movie.original_language),movie.original_language))", "score": -0.5598574601244763, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.5640283633245888, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,950), movie.original_language),movie.original_language))", "score": -0.5674361311030225, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.5953303787682671, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.5968802908593221, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.iso_639_1),movie.original_language))", "score": -0.6153255957335485, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), movie.original_language),movie.original_language))", "score": -0.6155052238249471, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_count,>,950), language.name),language.name))", "score": -0.6230362000622274, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}, {"orig_question": "Of how many original languages are there movies which have a vote count of more than 950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_genre.movie_id), language.name),movie.original_language))", "score": -0.6252245724350187, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,>,950), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 65, "beams": [{"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,30127963),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.09584038471817712, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),country.name))", "score": -0.14736960166260243, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,30127963), country.name),country.name))", "score": -0.1735327919191671, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.23659258757265397, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),country.name))", "score": -0.2807865378100889, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(distinct(extractValues(merge(merge(filter(getData(movie),movie.revenue,<,30127963),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),country.name), country.name))", "score": -0.35317133103968334, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963),country.name), country.name))", "score": -0.3536187903151716, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,30127963),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),movie.status))", "score": -0.36759420839528845, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,<,30127963), country.name),movie.status))", "score": -0.4121795564038258, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,<,30127963),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.4153799889096666, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.vote_count,<,30127963), country.name),country.name))", "score": -0.41756424194231934, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,30127963),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.name), country.name),country.name))", "score": -0.4235450834510577, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.revenue,>,30127963), country.name),country.name))", "score": -0.4246459849184264, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.revenue,<,30127963), country.name),movie.status))", "score": -0.42546036078667393, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "Are there any countries in which movies were produced which generated a revenue of less than 30127963?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,30127963),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), movie.status),country.name))", "score": -0.43481255875925273, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,30127963),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 66, "beams": [{"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,oscar.id), person.name),person.name))", "score": -0.5561605654867062, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.oscar_id,oscar.id), person.name),person.name))", "score": -0.5631776264553919, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,oscar.id), person.name),person.name))", "score": -0.5797509239956607, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),person.gender,=,Eamonn Butler), person.name),person.name))", "score": -0.5845086590333379, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.oscar_id,oscar.id), person.name),person.name))", "score": -0.5867679849643465, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.5891826957353851, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),language.name,=,Eamonn Butler),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,oscar.id), person.name),person.name))", "score": -0.5895347015066971, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.oscar_id,person.id), person.name),person.name))", "score": -0.5961997567040708, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),language.name,=,Eamonn Butler),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.oscar_id,oscar.id), person.name),person.name))", "score": -0.5965517624753828, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,oscar.id), person.name),person.name))", "score": -0.5981403049757789, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,oscar.id), person.name),person.name))", "score": -0.6013905006055146, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(person),oscar_winner.oscar_id,oscar.id), person.name),person.name))", "score": -0.6051573659444646, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),movie.title,=,Eamonn Butler),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,oscar.id), person.name),person.name))", "score": -0.6081685642536271, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.oscar_id,oscar.id), person.name),person.name))", "score": -0.6084075393888813, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}, {"orig_question": "Has the person Eamonn Butler won an oscar in cinematography and is dead?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),oscar.category,=,cinematography),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.6127730320590205, "correct_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,=,cinematography),person.name,=,Eamonn Butler), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 67, "beams": [{"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)", "score": -0.030309793810932257, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<=,3462), movie.id),movie.budget)", "score": -0.6059935599025508, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(filter(getData(movie),movie.vote_count,<,3462),movie.budget)", "score": -0.6534299067525797, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.revenue)", "score": -0.6570496206941776, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,movie.revenue),movie.vote_count,<,3462), movie.id),movie.budget)", "score": -0.6725152166467602, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.budget),movie.budget))", "score": -0.7006194689020049, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.revenue),movie.vote_count,<,3462), movie.id),movie.budget)", "score": -0.7042298217319262, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.budget),movie.budget)", "score": -0.7160519875298971, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>,3462), movie.id),movie.budget)", "score": -0.7246049063806627, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,cast.movie_id),movie.vote_count,<,3462), movie.id),movie.budget)", "score": -0.7545574743619722, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.release_date),movie.budget)", "score": -0.8357674679225803, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,<,3462), movie.id),movie.budget)", "score": -0.8378738676762799, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<,3462), movie.id),movie.budget)", "score": -0.8786702050757486, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,=,3462), movie.id),movie.budget)", "score": -0.9245738870822093, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}, {"orig_question": "What is the average movie budget of all movies with a vote count less than 3462?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,<,3462), movie.id),movie.budget)", "score": -0.925825963444337, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,3462), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 68, "beams": [{"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,1971-01-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.08037374962061637, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.release_date,>,1971-01-05), oscar.category),oscar.category))", "score": -0.20542943035788722, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.2222648806242447, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.release_date,>,1971-01-05), oscar.sub_category),oscar.category))", "score": -0.2358783260740608, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,1971-01-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.25305602808179034, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,1971-01-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.27219835151992244, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,>,1971-01-05), oscar.category),oscar.category))", "score": -0.30468026562464307, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_place,>,1971-01-05), oscar.category),oscar.category))", "score": -0.31448383257878, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_day,>,1971-01-05), oscar.sub_category),oscar.category))", "score": -0.33512916134081666, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.death_place,>,1971-01-05), oscar.sub_category),oscar.category))", "score": -0.3449327282949536, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1971-01-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.38592272534492056, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.39810585124529013, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.4039774547686855, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,1971-01-05),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.42265237056393645, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}, {"orig_question": "Are there any oscar categories in which people were nominated who died after 1971-01-05?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(person),person.death_day,>,1971-01-05),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.movie_id), oscar.category),oscar.category))", "score": -0.46423934290228497, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.death_day,>,1971-01-05), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 69, "beams": [{"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Belgium), movie.release_date),movie.release_date))", "score": -0.30535574927068876, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Belgium),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.movie_id,person.id), movie.release_date),movie.release_date))", "score": -0.3148227308953845, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Belgium),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), movie.release_date),movie.release_date))", "score": -0.33850073975843503, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),movie.title,=,Belgium), movie.release_date),movie.release_date))", "score": -0.34316505079978105, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Belgium),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.movie_id,person.id), movie.release_date),movie.release_date))", "score": -0.35117218554129015, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Belgium),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.3531399127325019, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),movie.original_language,=,Belgium), movie.release_date),movie.release_date))", "score": -0.3581925256963406, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,Belgium), movie.release_date),movie.release_date))", "score": -0.3585974760914485, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.person_id,movie.id),movie.title,=,Belgium), movie.release_date),movie.release_date))", "score": -0.3607725128723753, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Belgium),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,person.id), movie.release_date),movie.release_date))", "score": -0.36236368267286606, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Belgium),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), movie.release_date),movie.release_date))", "score": -0.3748501944043407, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Belgium),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,movie.id), movie.release_date),movie.release_date))", "score": -0.3768179215955525, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Belgium),getData(oscar_winner),movie.id,oscar_winner.person_id),getData(movie),oscar_winner.person_id,person.id), movie.release_date),movie.release_date))", "score": -0.3860416117933655, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Belgium),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.movie_id,movie.id), movie.release_date),movie.release_date))", "score": -0.38948928763585644, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}, {"orig_question": "On which different dates did the persons, who won an oscar for their performance in a movie produced in Belgium, die?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Belgium),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(person),oscar_winner.movie_id,person.id), movie.release_date),movie.release_date))", "score": -0.3960475321161589, "correct_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,=,Belgium),merge(getData(production_country),merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 70, "beams": [{"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2006-03-09),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.08867369800069266, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>=,2006-03-09),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.09585541847713887, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.32723454596607693, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.release_date,>,2006-03-09),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.349201496759233, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,<=,2006-03-09),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3497266084734102, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2006-03-09),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.36635508010629975, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>=,2006-03-09),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.3735368005827459, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2006-03-09),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.38283734266419206, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>=,2006-03-09),getData(keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3900190631406382, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2006-03-09),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3918237168148283, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>=,2006-03-09),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.39850907846019706, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>=,2006-03-09),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.39900543729127447, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2006-03-09),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),oscar.number))", "score": -0.39904568623641223, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2006-03-09),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),language.name))", "score": -0.4032168241587857, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}, {"orig_question": "is there any keyword for the movies with a release date of 2006-03-09 or after?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>=,2006-03-09),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),oscar.number))", "score": -0.40622740671285845, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.release_date,>=,2006-03-09), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 71, "beams": [{"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.year),oscar.year))", "score": -0.19984520547979154, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.year),oscar.sub_category))", "score": -0.24216266353310217, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.year),movie.runtime))", "score": -0.24930437096945762, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), movie.runtime),oscar.year))", "score": -0.26209492997296374, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), movie.runtime),oscar.sub_category))", "score": -0.30441238802627435, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), movie.runtime),movie.runtime))", "score": -0.3115540954626298, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.id),oscar.year))", "score": -0.31748687038301066, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.year),person.name))", "score": -0.32299694333037804, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.sub_category),oscar.year))", "score": -0.32691541697955667, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.year),oscar.id))", "score": -0.33683624535510215, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), movie.popularity),oscar.year))", "score": -0.3588193484449999, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.year),movie.status))", "score": -0.35894332596126866, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.id),oscar.sub_category))", "score": -0.3598043284363213, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), movie.status),oscar.year))", "score": -0.3664907236264006, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}, {"orig_question": "How many oscar winner are there where the movie popularity was 1.03114 or more?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.popularity,>=,1.03114), oscar.id),movie.runtime))", "score": -0.36694603587267677, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,1.03114),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 72, "beams": [{"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,=,7.4),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.14405162146049044, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,=,7.4),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)", "score": -0.16097947496009993, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.vote_average,=,7.4), oscar.id),oscar.number)", "score": -0.2601175918094158, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,=,7.4),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.2678139686267079, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.2785926159139901, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,=,7.4),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)", "score": -0.28474182212631743, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.vote_average,=,7.4), oscar.id),oscar.number)", "score": -0.29468868083925137, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,=,7.4),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.id),oscar.number)", "score": -0.3017383801120392, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,=,7.4),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), movie.id),oscar.number)", "score": -0.3186662336116487, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,=,7.4),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.number)", "score": -0.36034672985393273, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,=,7.4),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.number),oscar.number)", "score": -0.3623558489234984, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,=,7.4),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.sub_category),oscar.number)", "score": -0.36401522774639555, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.vote_average,=,7.4), oscar.id),oscar.number)", "score": -0.3719523849657268, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.37645906108358473, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of all oscar numbers from movies with a vote average of 7.4?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_average,=,7.4),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.category),oscar.number)", "score": -0.3772746022100167, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,7.4),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 73, "beams": [{"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))", "score": -0.1679258503245001, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,106),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))", "score": -0.20556635459345765, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.runtime,>,106), oscar.number),oscar.number))", "score": -0.24134899145170605, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.sub_category))", "score": -0.27051506762223687, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,106),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.28061089608365186, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,106),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.sub_category))", "score": -0.3081555718911944, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),person.name))", "score": -0.308304947409992, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,106),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.3231437299072295, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.runtime,>,106), oscar.sub_category),oscar.number))", "score": -0.32352869200146617, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), person.death_day),oscar.number))", "score": -0.32425422183161356, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_nominee),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.number))", "score": -0.3369499004897229, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.sub_category),oscar.number))", "score": -0.3391823286492055, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,106),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),person.name))", "score": -0.34594545167894947, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.number),oscar.category))", "score": -0.35062786339791197, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "How many people who have received oscars have died where the movie runtime was greater than 106 minutes", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,106),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), person.death_day),oscar.number))", "score": -0.3618947261005711, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,106),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 74, "beams": [{"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.08916891717672115, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_place))", "score": -0.34694343411683803, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.4543323682373739, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.death_place,=,Bainbridge Island, Washington),person.death_day), person.death_day))", "score": -0.479618848519749, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.5238843725746847, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.gender,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.5308867444742948, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.gender,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.5457143579569201, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.name,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.5523284177928584, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Bainbridge Island, Washington),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_day),person.death_day))", "score": -0.555731023544131, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Bainbridge Island, Washington),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id), person.death_day),person.death_day))", "score": -0.5624367401343515, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.name,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.5671560163237553, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Bainbridge Island, Washington),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id), person.death_day),person.death_day))", "score": -0.5768048494583295, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Bainbridge Island, Washington),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id), person.death_day),person.death_day))", "score": -0.5788868398632958, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Bainbridge Island, Washington), person.death_day),person.death_day))", "score": -0.5913682447499014, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}, {"orig_question": "When did people die in Bainbridge Island, Washington?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Bainbridge Island, Washington),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.death_day),person.death_day))", "score": -0.59597022890608, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Bainbridge Island, Washington), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 75, "beams": [{"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,!=,Hrvatski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.vote_average))", "score": -0.08863054822341111, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_average))", "score": -0.19583585551782914, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,Hrvatski),movie.revenue),movie.vote_average))", "score": -0.2081353809780308, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,!=,Hrvatski),getData(spoken_language),language.iso_639_1,spoken_language.movie_id),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.vote_average))", "score": -0.2858850635318835, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.vote_average))", "score": -0.2995727631193451, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,!=,Hrvatski),getData(spoken_language),movie.id,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.vote_average))", "score": -0.32874585244109744, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(movie),language.name,!=,Hrvatski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.vote_average))", "score": -0.3327006360856496, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.revenue))", "score": -0.35964172812895506, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(filter(getData(language),language.name,!=,Hrvatski),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.revenue),movie.vote_average))", "score": -0.3689297420843324, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.vote_average))", "score": -0.37220609230136237, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,!=,Hrvatski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.popularity),movie.vote_average))", "score": -0.3752670534292508, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,!=,Hrvatski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.vote_average))", "score": -0.3909200491092456, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,!=,Hrvatski),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.revenue))", "score": -0.4059517199037896, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,Hrvatski),movie.revenue),movie.revenue))", "score": -0.412602974967406, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}, {"orig_question": "What is the rating for the movie with the highest received revenue for movies that weren't translated to Hrvatski?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(language),language.name,!=,Hrvatski),getData(spoken_language),oscar.id,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.revenue),movie.vote_average))", "score": -0.41484406208117003, "correct_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,Hrvatski),movie.revenue),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 76, "beams": [{"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_day))", "score": -0.28576084024098236, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,f), person.death_day),person.death_day))", "score": -0.3362326378264697, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.death_day),person.death_place))", "score": -0.343126019302872, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,f), person.death_day),person.death_place))", "score": -0.3935978168883594, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,=,f), person.death_day),person.death_day))", "score": -0.5125131119947482, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,=,f), person.death_day),person.death_place))", "score": -0.5242333266059688, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.name),person.death_day))", "score": -0.5320012176671298, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.birth_day,=,f), person.death_day),person.death_day))", "score": -0.5385613087044672, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,f), person.death_day),person.death_day))", "score": -0.5479031557479175, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id),person.birth_day,=,f), person.death_day),person.death_place))", "score": -0.5502815233156876, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,=,f), person.death_day),person.death_day))", "score": -0.5619503171605205, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,cast.movie_id),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,=,f), person.death_day),person.death_day))", "score": -0.5646531650189118, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),merge(merge(getData(movie),getData(crew),person.id,crew.person_id),getData(movie),crew.person_id,movie.id),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,=,f), person.death_day),person.death_day))", "score": -0.5646826933744773, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,=,f), person.death_day),person.death_place))", "score": -0.5699898723971066, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "When were the people that their gender is \"f\" born?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),merge(getData(movie),merge(getData(cast),getData(person),crew.person_id,person.id),movie.id,cast.movie_id),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,=,f), person.death_day),person.death_place))", "score": -0.572692720255498, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 77, "beams": [{"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.category))", "score": -0.09623149817560617, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,186),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.category))", "score": -0.14040172578976995, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,<=,186), oscar.category),oscar.category))", "score": -0.23510750150362578, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.number))", "score": -0.23902665279522198, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,186),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.number))", "score": -0.283028180612369, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.sub_category))", "score": -0.29562348543198724, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,186),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.sub_category))", "score": -0.31498982796424957, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,<=,186), oscar.category),oscar.number))", "score": -0.3157286759782704, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.runtime,<=,186),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186), oscar.category),oscar.category))", "score": -0.33899109612860956, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.3434824963205472, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,186),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), company.name),oscar.category))", "score": -0.34456285364973005, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186),movie.runtime,<=,186), oscar.category),oscar.category))", "score": -0.346737723034119, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(filter(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186),movie.runtime,<=,186), oscar.category),oscar.category))", "score": -0.3528264228113817, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,186),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.title),oscar.category))", "score": -0.3601050312725763, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "Are there oscar categories for which movies with a runtime of at most 186 minutes have been nominated ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.runtime,<=,186),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.36437298469569074, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<=,186),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 78, "beams": [{"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.23261588743480388, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.3727772825077409, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_place))", "score": -0.38187504118832294, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,?\u00f3d?),person.death_day), person.death_day))", "score": -0.4239468904270325, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.4426013075426454, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),merge(merge(getData(movie),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.5792284887357683, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),merge(merge(getData(movie),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.5797022389488881, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),merge(merge(getData(movie),getData(crew),person.id,crew.person_id),getData(movie),cast.person_id,person.id),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.580357822641533, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.5804901578787888, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),merge(merge(getData(movie),getData(crew),person.id,crew.person_id),getData(movie),cast.person_id,person.id),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.5808315728546528, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.5809639080919086, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),cast.person_id,person.id),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.5816194917845535, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),cast.person_id,person.id),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.5820933090020294, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),merge(merge(getData(movie),getData(cast),person.id,crew.person_id),getData(person),cast.person_id,person.id),cast.movie_id,movie.id),person.id,cast.person_id),person.name,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.5846235242229446, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}, {"orig_question": "What are the death day of people who were born in ?\u00f3d? ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),merge(merge(getData(movie),getData(cast),person.id,crew.person_id),getData(person),cast.person_id,person.id),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))", "score": -0.5850972744360644, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,?\u00f3d?), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 79, "beams": [{"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,brain scan),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.10910918548545842, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.1244884660809478, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.12979740243604782, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,brain scan),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.19837091224512557, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,brain scan),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.28827851984943137, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,brain scan),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.33398011930951094, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.33927559491208237, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),merge(merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),movie.id,has_keyword.movie_id),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.364637946457405, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,brain scan),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.39400460710191954, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.4009733009954152, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(has_keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,brain scan),getData(movie),has_keyword.movie_id,movie.id), movie.title),movie.title))", "score": -0.4191062610714078, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,brain scan),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.4230815236996301, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id),keyword.name,=,brain scan), movie.title),movie.title))", "score": -0.43445104969093545, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,brain scan),getData(movie),has_keyword.movie_id,movie.id),getData(production_company),keyword.id,has_keyword.keyword_id), movie.title),movie.title))", "score": -0.4644937130385733, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}, {"orig_question": "How many distinct movies have the keyword \"brain scan\" ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,brain scan),getData(movie),keyword.id,movie.id), movie.title),movie.title))", "score": -0.4901703822016987, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,brain scan), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 80, "beams": [{"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id),language.name,!=,??????), genre.name),genre.name))", "score": -0.1888081633078781, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id),language.name,=,??????), genre.name),genre.name))", "score": -0.25134864686296743, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,has_genre.genre_id), genre.name),genre.name))", "score": -0.2693745092077388, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),language.iso_639_1,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id),language.name,!=,??????), genre.name),genre.name))", "score": -0.2796743593976845, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id),language.name,!=,??????), genre.name),genre.name))", "score": -0.3199212389634638, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,has_genre.movie_id),language.iso_639_1,has_genre.genre_id),language.name,=,??????), genre.name),genre.name))", "score": -0.32001102272320714, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(has_genre),movie.id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id),language.name,!=,??????), genre.name),genre.name))", "score": -0.32305204873349364, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(distinct(extractValues(filter(merge(getData(language),merge(getData(spoken_language),merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,??????),genre.name), genre.name))", "score": -0.32444346498673393, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(has_genre),movie.id,has_genre.movie_id),language.iso_639_1,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id),language.name,=,??????), genre.name),genre.name))", "score": -0.32541070583800674, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(distinct(extractValues(merge(merge(filter(getData(language),language.name,!=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,has_genre.genre_id),genre.name), genre.name))", "score": -0.3279553119496348, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(distinct(extractValues(merge(merge(filter(getData(language),language.name,!=,??????),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id),genre.name), genre.name))", "score": -0.332409346548871, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(language),merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,genre.id),language.iso_639_1,has_genre.genre_id),language.name,=,??????), genre.name),genre.name))", "score": -0.34232080206903026, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),spoken_language.movie_id,movie.id), genre.name),genre.name))", "score": -0.34244819489636297, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(genre),has_genre.genre_id,genre.id),movie.original_language,!=,??????), genre.name),genre.name))", "score": -0.34340607383186217, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "Are there any movie genres with a spoken language named ???????", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,??????),getData(has_genre),language.iso_639_1,has_genre.genre_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3520115275803241, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,??????),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 81, "beams": [{"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,176),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.08642755362597494, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.runtime,=,176), country.name),country.name))", "score": -0.13091097046708805, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.17362571763217072, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,176),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.2555009986244102, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.2687142513138825, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,176), country.name),country.name))", "score": -0.29388052750953747, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.runtime,=,176), country.name),country.name))", "score": -0.34223890639266885, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.runtime,=,176), country.name),country.name))", "score": -0.34981022169537485, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),getData(country),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3575041247561578, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,176),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.name), country.name),country.name))", "score": -0.3746867352973441, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),movie.runtime,=,176),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.37608970161483785, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(filter(getData(movie),movie.runtime,=,176),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),getData(country),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.38459588980218185, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "done(extractValues(distinct(merge(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),getData(production_country),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.416370667191483, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.42065305058489677, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}, {"orig_question": "In which countries were movies with a runtime of 176 minutes produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,176),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.4273248917600207, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,176),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 82, "beams": [{"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.08151254161753857, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.11446541103043587, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.14985310848796027, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>,92),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.23758892406897789, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,92),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.24623435008205616, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.265259700437085, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,!=,92),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2733725211420591, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>,92), genre.name),genre.name))", "score": -0.3409643016893335, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,null,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4235338677187839, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.42435659819944505, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,92),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.4294182828329648, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),oscar.category))", "score": -0.441987590139178, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.44630458355586194, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.runtime,>=,92), genre.name),genre.name))", "score": -0.4587947727262456, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}, {"orig_question": "What are the genre names which have movies with a runtime of 92 and more?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.runtime,>,92),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.46619104785008314, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>=,92),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 83, "beams": [{"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(getData(person),person.death_day,<=,f), movie.id),movie.revenue)", "score": -0.21104146078315375, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,=,f), movie.id),movie.revenue)", "score": -0.2967288283820249, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,<=,f), movie.id),movie.revenue)", "score": -0.2979671832467076, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,=,f), movie.id),movie.revenue)", "score": -0.3122875509868275, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<=,f), movie.id),movie.revenue)", "score": -0.31352590585151013, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,=,f), movie.id),movie.revenue)", "score": -0.34551106419879, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),crew.movie_id,movie.id),person.death_day,<=,f), movie.id),movie.revenue)", "score": -0.34674941906347273, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime,=,f), movie.id),movie.revenue)", "score": -0.35214708685156126, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime,<=,f), movie.id),movie.revenue)", "score": -0.353385441716244, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_day,<=,f), movie.id),movie.revenue)", "score": -0.35855742154296893, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,=,f), movie.id),movie.revenue)", "score": -0.3610697868035926, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_day,<=,f), movie.id),movie.revenue)", "score": -0.3623081416682753, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),cast.movie_id,movie.id),person.death_day,=,f), movie.id),movie.revenue)", "score": -0.3639256360081419, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),cast.movie_id,movie.id),person.death_day,<=,f), movie.id),movie.revenue)", "score": -0.36516399087282453, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue when the gender of the nomineed persons is female?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime,=,f), movie.id),movie.revenue)", "score": -0.3677058141350379, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,=,f), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 84, "beams": [{"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))", "score": -0.14889464100266325, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(genre),genre.name,=,War),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.budget),movie.release_date))", "score": -0.21123470419859047, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,War),movie.budget),movie.release_date))", "score": -0.22988646204336188, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,War),movie.budget),movie.release_date))", "score": -0.2859235432216158, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.revenue),movie.release_date))", "score": -0.30884105055996797, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,War),movie.budget),movie.release_date))", "score": -0.3564645684985114, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(filter(merge(getData(genre),merge(merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,movie.id),genre.id,has_genre.genre_id),genre.name,=,War),movie.budget),movie.release_date))", "score": -0.37151621783500577, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,=,War),getData(movie),has_genre.movie_id,movie.id),movie.budget),movie.release_date))", "score": -0.39016393823463374, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(genre),genre.name,=,War),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.revenue),movie.release_date))", "score": -0.4146325147623764, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(genre),genre.name,!=,War),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),movie.budget),movie.release_date))", "score": -0.42013045133647886, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))", "score": -0.4204672408720917, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,!=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))", "score": -0.43907077535329603, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "done(extractValues(min(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,War),movie.revenue),movie.release_date))", "score": -0.44246156953012966, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "sum(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,=,War), movie.release_date),movie.budget)", "score": -0.4672329267417085, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}, {"orig_question": "Whats the release date of the movie with the smallest budget in the genre War?", "inferred_code": "sum(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,=,War), movie.release_date),movie.budget)", "score": -0.4914170022102183, "correct_code": "done(extractValues(min(merge(filter(getData(genre),genre.name,=,War),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),movie.budget),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 85, "beams": [{"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production), company.name),company.name))", "score": -0.07720737010922647, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Post Production),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.1270830945530847, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.19642386338180653, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.status,!=,Post Production),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.21907025891174697, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,=,Post Production), company.name),company.name))", "score": -0.29663336145649366, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.status,!=,Post Production), company.name),company.name))", "score": -0.29780047442960367, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.status,!=,Post Production),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production), company.name),company.name))", "score": -0.3175798189056067, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,!=,Post Production),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3227393734561181, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,!=,Cambodia), company.name),company.name))", "score": -0.3331758783563159, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production), movie.title),company.name))", "score": -0.35848493139196924, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production), company.name),movie.title))", "score": -0.3700788653669899, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Post Production),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.37094178526492255, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.vote_average,!=,Post Production), company.name),company.name))", "score": -0.4073533208691242, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),person.name,!=,Post Production), company.name),company.name))", "score": -0.422720809143337, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies from Cambodia have their movies not on status Post Production?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,!=,Post Production), company.name),company.name))", "score": -0.43271479272612706, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Cambodia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.status,!=,Post Production),production_country.movie_id,movie.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 86, "beams": [{"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.1231497003098647, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,iodine),movie.revenue),movie.title))", "score": -0.24067346014594473, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(keyword),keyword.name,!=,iodine),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.2850446490156728, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.28563161731271575, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.title))", "score": -0.2874099977020506, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(getData(keyword),keyword.name,!=,iodine),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.title))", "score": -0.3026723322279128, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))", "score": -0.33521653348449976, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,iodine),movie.revenue),movie.title))", "score": -0.3599062759647695, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),getData(movie),has_keyword.movie_id,movie.id),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.revenue),movie.title))", "score": -0.3639992552636768, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),language.name,!=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.38762749742225466, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.vote_count,!=,iodine),has_keyword.movie_id,has_keyword.keyword_id),movie.revenue),movie.title))", "score": -0.408391570191564, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,=,iodine),movie.revenue),movie.title))", "score": -0.40951425528350216, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(has_keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.415770661638837, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),movie.vote_count,!=,iodine),getData(movie),has_keyword.movie_id,movie.id),movie.revenue),movie.title))", "score": -0.4407290281163199, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}, {"orig_question": "What is the title of the movie with the lowest revenue not having the keyword name iodine?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),filter(merge(getData(has_keyword),getData(has_keyword),movie.id,has_keyword.movie_id),movie.vote_count,!=,iodine),has_keyword.movie_id,has_keyword.keyword_id),movie.revenue),movie.title))", "score": -0.4488880774613967, "correct_code": "done(extractValues(min(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,iodine),movie.revenue),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 87, "beams": [{"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.revenue))", "score": -0.10770167790178675, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.release_date),movie.revenue))", "score": -0.26510239027265925, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.revenue))", "score": -0.28735603771929163, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.revenue),movie.revenue))", "score": -0.3397391029429855, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.id),movie.revenue))", "score": -0.3513500877452316, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.budget))", "score": -0.43549599692050833, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,98337295), movie.budget),movie.revenue))", "score": -0.5081943940167548, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.release_date),movie.budget))", "score": -0.5928967092913808, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.budget))", "score": -0.6151503567380132, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.original_language),movie.revenue))", "score": -0.6314139255118789, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.budget),movie.vote_count))", "score": -0.6455037538689794, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.vote_count),movie.revenue))", "score": -0.6559698470664443, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,>,98337295), movie.release_date),movie.revenue))", "score": -0.6655951063876273, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<,98337295), movie.budget),movie.revenue))", "score": -0.6666032109205844, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}, {"orig_question": "What are the movies with a revenue less than 98337295?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.revenue),movie.budget))", "score": -0.6675334219617071, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,98337295), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 88, "beams": [{"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.31989895217931896, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.336976958792302, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.3430158215695122, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.36009382818249525, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.4034032402588033, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.year),oscar.number)", "score": -0.4045901036211826, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.4136617861673933, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.movie_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.42048124687178634, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.year),oscar.number)", "score": -0.4216681102341656, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.42652010964899656, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.year),oscar.number)", "score": -0.42770697301137584, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.43073979278037633, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.431894517904997, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.4358484024413773, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}, {"orig_question": "What was the average oscar nominee vote for Andrea Raffaghello", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Andrea Raffaghello), oscar.id),oscar.number)", "score": -0.43677859317526513, "correct_code": "avg(distinct(merge(filter(getData(person),person.name,=,Andrea Raffaghello),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 89, "beams": [{"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.06620634872160736, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,>=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.25025733340226, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.3662661788839488, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,cast.movie_id),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.37782357249622606, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.revenue),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.4314792872012196, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,movie.revenue),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.44303668081349684, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.46153013468309806, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.release_date,<=,1980-05-17),movie.vote_count), movie.vote_count))", "score": -0.47553577613507514, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.release_date,>=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.48426141561358094, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,cast.movie_id),movie.release_date,>=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.4958188092258582, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.revenue),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.5267432430003689, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.person_id,movie.id),movie.id,cast.movie_id),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.5326727973461551, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.person_id),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.5349047026796928, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,cast.person_id),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.5464620857011625, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there vote counts for movies that were released before or on May 17th 1980?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,<=,1980-05-17), movie.vote_count),movie.vote_count))", "score": -0.580462617926969, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.release_date,<=,1980-05-17), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 90, "beams": [{"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,nervous breakdown),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.2000815279119386, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,nervous breakdown),merge(getData(has_keyword),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.22289856974107033, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,nervous breakdown),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.2805166915717342, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,nervous breakdown),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,oscar_winner.oscar_id), person.name),person.name))", "score": -0.28089000434871747, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,nervous breakdown),merge(getData(has_keyword),getData(person),oscar_winner.person_id,person.id),keyword.id,oscar_winner.oscar_id), person.name),person.name))", "score": -0.3037070461778492, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,nervous breakdown),getData(oscar_winner),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.32866800391077267, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),getData(person),oscar_winner.person_id,person.id), person.name),person.name))", "score": -0.34320558957634195, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),keyword.name,=,nervous breakdown),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.3437672606327858, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),keyword.name,=,nervous breakdown),merge(getData(has_keyword),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.3665843024619175, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,nervous breakdown),merge(getData(oscar_winner),getData(person),oscar_nominee.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.38296280556285395, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),oscar_winner.person_id,person.id),keyword.name,=,nervous breakdown), person.name),person.name))", "score": -0.39416948670885166, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,nervous breakdown),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),movie.status))", "score": -0.3953241104137303, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(company),keyword.name,=,nervous breakdown),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),person.name))", "score": -0.3961627412268223, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,nervous breakdown),merge(getData(has_keyword),getData(person),oscar_winner.person_id,person.id),keyword.id,has_keyword.keyword_id), person.name),movie.status))", "score": -0.41814115224286197, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}, {"orig_question": "Is there any person who have been involved in a movie which has the keyword nervous breakdown, have won the oscar and who have died?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))", "score": -0.46774809542627116, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,nervous breakdown),merge(getData(movie),getData(oscar_winner),movie.id,oscar_winner.movie_id),has_keyword.movie_id,movie.id),getData(person),oscar_winner.person_id,person.id), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 91, "beams": [{"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,fa), country.name),country.name))", "score": -0.15448627688812655, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))", "score": -0.19258302004926997, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),country.iso_3166_1,production_country.movie_id),movie.original_language,=,fa), country.name),country.name))", "score": -0.22568032019650744, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,fa), country.name),country.name))", "score": -0.22835243549239012, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,=,fa), country.name),country.name))", "score": -0.27705841486624716, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),country.name,=,fa), country.name),country.name))", "score": -0.28866503178326847, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),country.iso_3166_1,production_country.movie_id),movie.status,=,fa), country.name),country.name))", "score": -0.299546478800771, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.status,=,fa), country.name),country.name))", "score": -0.30599284079801164, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,fa),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3110329221098387, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,fa),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3214921756472066, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),production_country.iso_3166_1,production_country.movie_id),movie.original_language,=,fa), country.name),country.name))", "score": -0.32510328862011956, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(company),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,fa), country.name),country.name))", "score": -0.3266606539981022, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,fa), country.name),country.name))", "score": -0.33991529445385715, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),country.iso_3166_1,production_country.movie_id),movie.title,=,fa), country.name),country.name))", "score": -0.34825243354926994, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}, {"orig_question": "In how many countries are Farsi speaking movies produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,fa),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.35462718168464574, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,fa), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 92, "beams": [{"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))", "score": -0.21980295348162024, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))", "score": -0.22793828854595094, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(filter(getData(person),person.death_place,=,San Pedro, Kalifornien),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))", "score": -0.252260790051053, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,San Pedro, Kalifornien),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "score": -0.25563739582507666, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,San Pedro, Kalifornien),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.28226894328096114, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))", "score": -0.28270755481550697, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.death_place,=,San Pedro, Kalifornien),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.29022841797262283, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),crew.movie_id,movie.id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))", "score": -0.29084288987983764, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))", "score": -0.29719614727222615, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(movie),cast.movie_id,movie.id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))", "score": -0.3053314823365568, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,San Pedro, Kalifornien),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,cast.person_id), movie.title),movie.title))", "score": -0.3079941974054504, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,movie.id),getData(movie),crew.movie_id,movie.id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))", "score": -0.3089282894330798, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))", "score": -0.3136230217200127, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,=,San Pedro, Kalifornien),merge(getData(crew),getData(movie),cast.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))", "score": -0.3373248456068294, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}, {"orig_question": "How many movie titles are there where the persons death place is San Pedro, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(filter(merge(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),getData(movie),person.id,movie.id),person.death_place,=,San Pedro, Kalifornien),movie.title,=,San Pedro, Kalifornien), movie.title),movie.title))", "score": -0.3594633940716132, "correct_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_place,=,San Pedro, Kalifornien), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 93, "beams": [{"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.revenue),movie.release_date))", "score": -0.1903644424532947, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.revenue),movie.release_date))", "score": -0.2153318999600422, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m),movie.revenue),movie.release_date))", "score": -0.23809897103429198, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,!=,m),getData(movie),oscar_nominee.movie_id,movie.id),movie.revenue),movie.release_date))", "score": -0.2752562737584031, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(merge(merge(getData(movie),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.revenue),movie.release_date))", "score": -0.3026967158802381, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.popularity,!=,m),movie.revenue),movie.release_date))", "score": -0.326185415744415, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(genre),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.revenue),movie.release_date))", "score": -0.33963327509463975, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))", "score": -0.3463558536944169, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.popularity,!=,m),movie.revenue),movie.release_date))", "score": -0.35570810319172874, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),genre.id,oscar_nominee.person_id),person.gender,!=,m),movie.revenue),movie.release_date))", "score": -0.3587165637079136, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m),movie.revenue),movie.release_date))", "score": -0.3617831639418489, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id),movie.revenue),movie.release_date))", "score": -0.3724006923567057, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.oscar_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m),movie.revenue),movie.release_date))", "score": -0.37706545900719535, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))", "score": -0.41633783272272606, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}, {"orig_question": "What is the release date of the oscar nominated movie with the highest revenue, that has people which don't have the gender m?", "inferred_code": "done(extractValues(max(merge(filter(getData(genre),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))", "score": -0.42066873761508866, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,!=,m),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),movie.revenue),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 94, "beams": [{"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.08983379054248254, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.15710368962027246, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1959),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.2166223823627162, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,!=,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.28179799451416565, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1959),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.2838922814405061, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),production_company.company_id))", "score": -0.3019877468827256, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),movie.title))", "score": -0.3174466023999445, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),movie.vote_count,>,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.3417215833824811, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,!=,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.34906789359195556, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,<,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.35958986561919204, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,>,1959),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3602944021465898, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.36779783667080207, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),production_company.company_id))", "score": -0.3692576459605155, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,m),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.37150932377801754, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}, {"orig_question": "What are the names of the companies that produced oscar nominated movies with a vote count bigger than 1959 and that have a male oscar nominated person ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,>=,1959),merge(getData(oscar_nominee),getData(company),production_company.company_id,company.id),movie.id,oscar_nominee.movie_id), company.name),company.name))", "score": -0.37940447192488946, "correct_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_company),movie.id,production_company.movie_id),person.id,oscar_nominee.person_id),getData(company),production_company.company_id,company.id),movie.vote_count,>,1959),person.gender,=,m), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 95, "beams": [{"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.06750813305552583, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.4043216930068075, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.42223860380173545, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.4370588765395168, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.4545758920100959, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_place))", "score": -0.45465161830361467, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.45476816016110766, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.4549757873344447, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.45986796211315134, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.4600602302641631, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.47024913398939394, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.48643525791105474, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.5366319654276595, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(genre),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))", "score": -0.5696951429563342, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}, {"orig_question": "When is the deathday of the persons with deathplace Santa Monica, Kalifornien?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),movie.budget))", "score": -0.5770672801154433, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Santa Monica, Kalifornien), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 96, "beams": [{"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.vote_count),movie.vote_count))", "score": -0.03269328532041982, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))", "score": -0.30867985618533567, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.vote_count),movie.vote_count))", "score": -0.34541484211129797, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.vote_average),movie.vote_count))", "score": -0.49953461793484166, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,no), movie.vote_count),movie.vote_count))", "score": -0.5295730826421043, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.vote_average),movie.vote_count))", "score": -0.6192556944812956, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.vote_count),movie.title))", "score": -0.6229922182974406, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),language.name,!=,no), movie.vote_count),movie.vote_count))", "score": -0.6366153446142562, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,!=,no), movie.vote_count),movie.vote_count))", "score": -0.651800594357497, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,!=,no), movie.vote_count),movie.vote_count))", "score": -0.661516713636522, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.title),movie.vote_count))", "score": -0.6624882927280851, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,!=,no), movie.vote_count),movie.vote_count))", "score": -0.6970088145608315, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), movie.vote_count),movie.title))", "score": -0.7160942901654457, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,!=,no), oscar.number),movie.vote_count))", "score": -0.7330723794463718, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}, {"orig_question": "Which vote counts have the movies without an original language?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_average),movie.vote_count))", "score": -0.7755211887997575, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,no), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 97, "beams": [{"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.original_language,=,en), movie.title),movie.title))", "score": -0.27001545849913955, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),language.name,=,en), movie.title),movie.title))", "score": -0.2815232300939172, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.original_language,=,en), movie.title),movie.status))", "score": -0.3289970541488595, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),language.name,=,en), movie.title),movie.status))", "score": -0.34050482574363716, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),language.name,=,en), movie.title),movie.title))", "score": -0.34112974134872975, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),language.name,=,en), movie.title),movie.status))", "score": -0.3616801321735272, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),language.name,=,en), oscar.category),movie.title))", "score": -0.36519725270268133, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar_winner.movie_id,oscar_winner.oscar_id),language.name,=,en), movie.title),movie.title))", "score": -0.3690691385131165, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),language.iso_639_1,oscar_winner.oscar_id),language.name,=,en), movie.title),movie.title))", "score": -0.37237156155201595, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),language.name,=,en), movie.title),oscar.category))", "score": -0.3745030622226425, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar_winner.movie_id,movie.id),language.name,=,en), movie.title),movie.title))", "score": -0.3755520224042085, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),language.name,=,en), oscar.category),movie.title))", "score": -0.3964525152518042, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),language.name,=,en), movie.title),movie.title))", "score": -0.3964855892556026, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar_winner.movie_id,oscar_winner.oscar_id),language.name,=,en), movie.title),movie.status))", "score": -0.40220208326524803, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}, {"orig_question": "Are there movies with an oscar in an a original language in English in the oscar categories?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),movie.id,oscar_winner.movie_id),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),language.name,=,en), oscar.category),oscar.category))", "score": -0.4077189741229476, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id),movie.original_language,=,en), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 98, "beams": [{"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "score": -0.020126725408772472, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6.4), movie.budget),movie.budget))", "score": -0.3587646157029667, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,6.4), movie.budget),movie.budget))", "score": -0.549326238084177, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.release_date))", "score": -0.7168520370978513, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,movie.revenue),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "score": -0.7202985459757197, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.release_date),movie.budget))", "score": -0.7512494535549195, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "score": -0.7561372160416795, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))", "score": -0.7899693951185327, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.title))", "score": -0.8051413575667539, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.revenue))", "score": -0.8257061521071591, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<,6.4), movie.budget),movie.budget))", "score": -0.8301545948270359, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.title),movie.budget))", "score": -0.8442613692386658, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.revenue),movie.budget))", "score": -0.8832624764545471, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6.4), movie.budget),movie.budget))", "score": -0.9040086240056553, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}, {"orig_question": "What are the movies budget if the movies vote average is 6.4 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.original_language))", "score": -0.9458781758803525, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,6.4), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 99, "beams": [{"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.020746798189215754, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<=,2006-01-10), movie.id),movie.vote_count)", "score": -0.5805438812858862, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.vote_count),movie.vote_count)", "score": -0.6419680655793822, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.budget)", "score": -0.725691618902488, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),oscar.number)", "score": -0.7388528275986138, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<,2006-01-10), movie.id),movie.vote_count)", "score": -0.7512544706243711, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(filter(getData(movie),movie.release_date,>=,2006-01-10),movie.vote_count)", "score": -0.7772094907608953, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.revenue)", "score": -0.7826218621037928, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.revenue),movie.vote_count)", "score": -0.7866160521410166, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.7913436929690302, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_average)", "score": -0.8107246320905749, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(filter(getData(movie),movie.release_date,<=,2006-01-10),movie.vote_count)", "score": -0.8863231050366868, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), oscar.id),movie.vote_count)", "score": -0.9018025752852689, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,2006-01-10), movie.id),movie.vote_count)", "score": -0.9314482081982527, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}, {"orig_question": "What is the summed vote count of the movies with the release date 2006-01-10?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.runtime)", "score": -0.9396304054357395, "correct_code": "sum(distinct(filter(getData(movie),movie.release_date,=,2006-01-10), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 100, "beams": [{"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.14088972627359908, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.2442733837078556, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.name,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.24851010731950515, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.name,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.262623845528816, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.27933039485651534, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.3032386960277112, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.3099195523072081, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.3130538547916221, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.3192800620205115, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.3260893819023125, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.3528453779144911, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.35887695231785616, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.36940946621127696, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),country.name,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.3831682700017839, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}, {"orig_question": "In which movies were crew persons involved whose birth place is other than Eastoft, North Lincolnshire?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire),country.name,!=,Eastoft, North Lincolnshire), movie.title),movie.title))", "score": -0.4423040699529858, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.birth_place,!=,Eastoft, North Lincolnshire), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 101, "beams": [{"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.03150676352743176, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.5279094532444939, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.5530214192424705, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.budget),movie.budget))", "score": -0.5772731576962552, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.budget),movie.budget))", "score": -0.5913090871314518, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.5971854932724224, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6008642829636704, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6032423476023318, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.budget),movie.budget))", "score": -0.6094019631558311, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),has_genre.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6111914395084013, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,has_genre.movie_id),movie.title,=,The Last Legion), movie.budget),movie.budget))", "score": -0.6141382008869672, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(spoken_language),getData(movie),has_genre.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.budget),movie.budget))", "score": -0.6506547377073334, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,has_genre.movie_id),movie.budget),movie.budget))", "score": -0.6546126573384615, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.title,=,The Last Legion),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,has_genre.genre_id),movie.budget),movie.budget))", "score": -0.6566849358744631, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}, {"orig_question": "What are the distinct movie budgets for movies titled \"The Last Legion\" ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,The Last Legion), movie.budget),movie.budget))", "score": -0.661618184287363, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Last Legion), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 102, "beams": [{"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.03162579770287266, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,6), movie.vote_count),movie.vote_count))", "score": -0.4506888899122714, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.46341878264174396, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.revenue),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.4844592268842515, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,!=,6), movie.vote_count),movie.vote_count))", "score": -0.4896504196440219, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.vote_average,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.528475945540034, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.5305532899431019, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.5363357257888594, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.5401989821515354, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.543122667475606, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.vote_average,movie.id),movie.id,movie.revenue),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.5495163897825415, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.revenue,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.5505069386696784, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,movie.revenue),movie.vote_average,>,6), movie.vote_count),movie.vote_count))", "score": -0.5515937566824229, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_average))", "score": -0.5698201614068239, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}, {"orig_question": "Is there any vote count of the movies which have a higher vote average than 6?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_average),movie.vote_count))", "score": -0.6795953595647006, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,6), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 103, "beams": [{"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),movie.release_date))", "score": -0.012904282586532645, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,42), movie.release_date),movie.release_date))", "score": -0.5858458312432049, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,42), movie.release_date),movie.release_date))", "score": -0.6212312014977215, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.budget),movie.release_date))", "score": -0.6363106311036972, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),movie.budget))", "score": -0.6444917909539072, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),movie.release_date))", "score": -0.7263246655056719, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.popularity),movie.release_date))", "score": -0.7417080343439011, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),movie.popularity))", "score": -0.747546791259083, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.id),movie.release_date))", "score": -0.8122909010126023, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,42), movie.release_date),movie.release_date))", "score": -0.8189653280278435, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,42), movie.release_date),movie.release_date))", "score": -0.8258726122876396, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,42), movie.release_date),movie.release_date))", "score": -0.8334048512479058, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),movie.runtime))", "score": -0.8602644197380869, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.release_date),movie.id))", "score": -0.8624687187111704, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}, {"orig_question": "What are the release dates of movies with a runtime of at least 42 minutes?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,42), movie.title),movie.release_date))", "score": -0.8629555643274216, "correct_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,>=,42),movie.release_date), movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 104, "beams": [{"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.popularity)", "score": -0.03172971350830929, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.popularity),movie.popularity)", "score": -0.5065398232095532, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(filter(getData(movie),movie.status,=,Post Production),movie.popularity)", "score": -0.623606582522168, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity), movie.id),movie.popularity)", "score": -0.7044106770801227, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.popularity),movie.popularity))", "score": -0.7097766663791845, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),movie.popularity,movie.id),movie.id,movie.id), movie.id),movie.popularity)", "score": -0.7236701639824615, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.popularity), movie.id),movie.popularity)", "score": -0.7417137264344433, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)", "score": -0.7499201359060281, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(spoken_language),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity), movie.id),movie.popularity)", "score": -0.7560386310706646, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id), movie.id),movie.popularity)", "score": -0.7609731951891977, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,movie.popularity), movie.id),movie.popularity)", "score": -0.7613336425106656, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,movie.popularity), movie.id),movie.popularity)", "score": -0.7945616764358213, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,Post Production), movie.id),movie.popularity)", "score": -0.810140105466265, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.popularity),movie.popularity))", "score": -0.811518266586063, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies which dont have the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,Post Production), movie.id),movie.popularity)", "score": -0.815764813494554, "correct_code": "avg(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 105, "beams": [{"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "score": -0.0228940005399636, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,49.3535), movie.revenue),movie.revenue))", "score": -0.3390052075483254, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.vote_count),movie.revenue))", "score": -0.5634587289750925, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.budget),movie.revenue))", "score": -0.6346515299737803, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>,49.3535), movie.revenue),movie.revenue))", "score": -0.642438536415284, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.budget))", "score": -0.7059030171003542, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.popularity,>=,49.3535),movie.revenue), movie.revenue))", "score": -0.770491402814514, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.vote_count))", "score": -0.8107085462179384, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))", "score": -0.8154178494223743, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,>=,49.3535), movie.revenue),movie.revenue))", "score": -0.8334811595486826, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),cast.movie_id))", "score": -0.8436790938940248, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.vote_average),movie.revenue))", "score": -0.8654690863550059, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),spoken_language.movie_id))", "score": -0.866029583987256, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,<=,49.3535), movie.vote_count),movie.revenue))", "score": -0.8795699359834543, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenues of movies with a popularity of more than or equal 49.3535?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),cast.person_id))", "score": -0.8836113448705873, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,>=,49.3535), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 106, "beams": [{"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)", "score": -0.06258131902488147, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>,732), movie.id),movie.popularity)", "score": -0.3272456716986239, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.popularity),movie.popularity)", "score": -0.3750508825397654, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<=,732), movie.id),movie.popularity)", "score": -0.43064450646486535, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.revenue),movie.vote_count,>=,732), movie.id),movie.popularity)", "score": -0.52180429191304, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,>=,732), movie.id),movie.popularity)", "score": -0.5464922657386846, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,movie.revenue),movie.vote_count,>=,732), movie.id),movie.popularity)", "score": -0.5671273758341515, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.revenue),movie.vote_count,>=,732), movie.id),movie.popularity)", "score": -0.5700011910054845, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.vote_count,>=,732), movie.id),movie.popularity)", "score": -0.5881713873014499, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,>=,732), movie.id),movie.popularity)", "score": -0.591815349659796, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_count,>=,732), movie.id),movie.popularity)", "score": -0.5946891874447205, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>,732), movie.popularity),movie.popularity)", "score": -0.6397152352135078, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(filter(getData(movie),movie.vote_count,>=,732),movie.popularity)", "score": -0.6725390315769209, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.popularity),movie.popularity))", "score": -0.7371342971746344, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity of the movies with a vote count higher than or equal to 732?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<=,732), movie.popularity),movie.popularity)", "score": -0.7431140699797493, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,732), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 107, "beams": [{"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,The Bourne Supremacy),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.06519949074515474, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.title,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.19160466023418352, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.title,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.26232809717943295, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))", "score": -0.2643214565563491, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,The Bourne Supremacy),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.31175310684420143, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,The Bourne Supremacy),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3212854210062904, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,The Bourne Supremacy),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.gender),person.name))", "score": -0.3234758624975422, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,The Bourne Supremacy),getData(crew),movie.id,crew.person_id),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3286873848712276, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.release_date,=,The Bourne Supremacy), person.name),person.name))", "score": -0.33219565797688233, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,The Bourne Supremacy),getData(crew),movie.id,crew.movie_id),getData(person),crew.movie_id,person.id), person.name),person.name))", "score": -0.3433057860182655, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,The Bourne Supremacy),getData(crew),movie.id,production_country.movie_id),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.3461169091937659, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,The Bourne Supremacy),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.birth_place),person.name))", "score": -0.35191046137265525, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,The Bourne Supremacy),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), country.name),person.name))", "score": -0.3785617155552918, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(crew),movie.id,crew.movie_id),movie.runtime,=,The Bourne Supremacy),getData(person),crew.person_id,person.id), person.name),person.name))", "score": -0.37984265926146743, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}, {"orig_question": "What are the names of the crew members who worked on the movie The Bourne Supremacy?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,The Bourne Supremacy),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.name),person.name))", "score": -0.3968073111740797, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.title,=,The Bourne Supremacy), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 108, "beams": [{"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,tr),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.029689271448226768, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,tr),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.1480861646771471, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.original_language,=,tr),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3717215404332538, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,tr),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),oscar.category))", "score": -0.40497037056828017, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,tr),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),has_genre.genre_id))", "score": -0.41264206471988535, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,tr),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),person.death_place))", "score": -0.4136401579307228, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,tr),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.name),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.41430377128780954, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,tr),merge(getData(has_genre),getData(has_genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4219048669777151, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,tr),merge(getData(has_genre),getData(genre),genre.name,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.43110182556189713, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,tr),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4339688373288139, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))", "score": -0.4342572584591443, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,tr), genre.name),genre.name))", "score": -0.43516932099884736, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,tr),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), oscar.category),genre.name))", "score": -0.43914292085163664, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,tr),merge(getData(has_genre),getData(genre),has_genre.movie_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.44517918568253756, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}, {"orig_question": "What are the genre names of the movies with tr as original language?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,tr),merge(getData(has_genre),getData(genre),has_genre.genre_id,has_genre.movie_id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.44973987247385827, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,tr), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 109, "beams": [{"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.04617608919592869, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.popularity),movie.popularity)", "score": -0.21390353654217195, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera), movie.id),movie.popularity)", "score": -0.30005245046821394, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(oscar),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.36136921695802854, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.37752719038038285, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(company),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.3935289868255649, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),has_keyword.movie_id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.3946929258190556, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(genre),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.39488907568644166, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.vote_average),movie.popularity)", "score": -0.41030411734371536, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,production_company.company_id), movie.id),movie.popularity)", "score": -0.41225041741563634, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,spoken_language.iso_639_1), movie.id),movie.popularity)", "score": -0.41326410518537526, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),spoken_language.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.42461833106782965, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(language),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.42546426171665336, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(has_keyword),keyword.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.42631345978133817, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the average popularity of movies with the keyword rock opera?", "inferred_code": "avg(distinct(merge(filter(getData(keyword),company.name,=,rock opera),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), movie.id),movie.popularity)", "score": -0.42667530659347536, "correct_code": "avg(distinct(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,=,rock opera),getData(movie),has_keyword.movie_id,movie.id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 110, "beams": [{"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.death_place,=,f),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.13010960886806938, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.name,=,f),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.19430728882991954, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,f),movie.runtime),movie.budget))", "score": -0.23492695093579893, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.death_day,=,f),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.2375824106206544, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.23810434936416836, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,f),movie.runtime),movie.budget))", "score": -0.23918885360190345, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.2615997557057872, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),company.name,=,f),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.26806283122536717, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime,=,f),movie.runtime),movie.budget))", "score": -0.296602249962044, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),crew.person_id,=,f),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.3179044774312948, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.death_day,=,f),movie.runtime),movie.budget))", "score": -0.32159888165026385, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),person.gender,=,f),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.32798450294984965, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(person),country.name,=,f),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.runtime),movie.budget))", "score": -0.3300809791968555, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),oscar.sub_category,=,f),movie.runtime),movie.budget))", "score": -0.34241914743354507, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}, {"orig_question": "What is the budget of the movie with the highest runtime, in which a women was part of the crew?", "inferred_code": "done(extractValues(max(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.release_date,=,f),movie.runtime),movie.budget))", "score": -0.35044394160146913, "correct_code": "done(extractValues(max(merge(filter(getData(person),person.gender,=,f),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.runtime),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 111, "beams": [{"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.15106023911463015, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), movie.popularity),person.birth_day))", "score": -0.3185750241656862, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.name))", "score": -0.33514550524335124, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id), person.birth_day),person.birth_day))", "score": -0.34473478966203464, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),movie.popularity),person.birth_day))", "score": -0.3450243144687284, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.name),person.birth_day))", "score": -0.34876718430841663, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,movie.id),movie.popularity),person.birth_day))", "score": -0.3518948662203148, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id),person.birth_day),person.birth_day))", "score": -0.3645173677973547, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), oscar.year),person.birth_day))", "score": -0.36970268735366224, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,movie.id),person.birth_day),person.birth_day))", "score": -0.3713879195489411, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.3773040001205125, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.37980664117522756, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,movie.id), person.birth_day),person.birth_day))", "score": -0.3817681401409369, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1961),getData(oscar_winner),person.id,oscar_winner.person_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),movie.revenue))", "score": -0.3839010047414481, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of oscar winners who were born on or before the year 1961", "inferred_code": "done(extractValues(min(merge(filter(getData(person),person.birth_day,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),person.id,oscar_winner.person_id),person.birth_day),person.birth_day))", "score": -0.39041303660282095, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(oscar),oscar.year,<=,1961),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 112, "beams": [{"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.0389658137743209, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.3032854275603785, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(language),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.39013070678321266, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.popularity)", "score": -0.39315285364591246, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,country.name), movie.id),movie.revenue)", "score": -0.4003427866525996, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),movie.status,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.40046006484971003, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.vote_average),movie.revenue)", "score": -0.4077202733136736, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),production_country.iso_3166_1,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.40984918947924304, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4190712095920094, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(merge(filter(getData(country),country.name,=,Japan),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.4241426115912785, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(company),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.42697150086754876, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.id)", "score": -0.44071789014451596, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.budget)", "score": -0.4411185162178583, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,=,Japan),merge(getData(production_country),getData(movie),oscar_winner.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.441386158919345, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}, {"orig_question": "What is the average movie revenue of movies produced in the country named Japan?", "inferred_code": "avg(distinct(merge(filter(getData(production_country),country.name,=,Japan),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.44230704447932884, "correct_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Japan),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 113, "beams": [{"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)", "score": -0.033497124727213265, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,>=,7000000), movie.id),movie.revenue)", "score": -0.3202021491102876, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.revenue),movie.revenue)", "score": -0.5977736642796141, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.revenue),movie.budget,<=,7000000), movie.id),movie.revenue)", "score": -0.6380857941626469, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,<=,7000000), movie.id),movie.revenue)", "score": -0.6559936126832732, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.revenue),movie.budget,<=,7000000), movie.id),movie.revenue)", "score": -0.6961084533023238, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),has_genre.movie_id,movie.id),movie.id,movie.revenue),movie.budget,<=,7000000), movie.id),movie.revenue)", "score": -0.7098657695517734, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.movie_id),movie.budget,<=,7000000), movie.id),movie.revenue)", "score": -0.7140162696962802, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.revenue),movie.budget,>=,7000000), movie.id),movie.revenue)", "score": -0.714520177996705, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,cast.person_id),movie.budget,<=,7000000), movie.id),movie.revenue)", "score": -0.7156072709022513, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,movie.revenue),movie.budget,<=,7000000), movie.id),movie.revenue)", "score": -0.7183044646729104, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.budget)", "score": -0.7533729884679309, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.release_date,<=,7000000), movie.id),movie.revenue)", "score": -0.7547942697312768, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(filter(getData(movie),movie.budget,<=,7000000),movie.revenue)", "score": -0.7578934863961395, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}, {"orig_question": "Whats the total revenue for movies with a budget of less than or equal to 7000000?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,=,7000000), movie.id),movie.revenue)", "score": -0.771141381688804, "correct_code": "sum(distinct(filter(getData(movie),movie.budget,<=,7000000), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 114, "beams": [{"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,202),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_day))", "score": -0.15750312496049634, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_day))", "score": -0.16467562631200577, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,!=,202),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_day),person.death_day))", "score": -0.17017192436098372, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,!=,202), person.death_day),person.death_day))", "score": -0.24590020046638505, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,!=,202),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_day))", "score": -0.25865977618780983, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,202),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.26121457690058325, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.2683870782520927, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.runtime,!=,202), person.death_place),person.death_day))", "score": -0.3597071058935959, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,!=,202),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_place))", "score": -0.36237122812789674, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,202),merge(getData(oscar_nominee),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_day))", "score": -0.36353307931265294, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,202),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id), person.death_day),person.death_day))", "score": -0.3640258900133685, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_nominee),getData(person),crew.person_id,person.id),movie.id,crew.movie_id), person.death_day),person.death_day))", "score": -0.37070558066416237, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,!=,202),getData(crew),movie.id,crew.person_id),getData(person),crew.person_id,person.id), person.death_day),person.death_day))", "score": -0.3902977811919849, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,202),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,cast.movie_id), person.death_day),person.death_day))", "score": -0.39252735128273764, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}, {"orig_question": "When are the deathdays of the persons who where involved in a film which don't have a runtime of 202?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),movie.release_date,!=,202), person.death_day),person.death_day))", "score": -0.39415491666491664, "correct_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,!=,202),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id), person.death_day),person.death_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 115, "beams": [{"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))", "score": -0.02530030092020752, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.release_date))", "score": -0.4811720040233922, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.popularity),movie.popularity))", "score": -0.492990376202215, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.status))", "score": -0.5711716499718023, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,!=,Post Production), movie.popularity),movie.popularity))", "score": -0.6002000155931455, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Post Production),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.popularity),movie.popularity))", "score": -0.6137344087500348, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Post Production),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,spoken_language.iso_639_1), movie.popularity),movie.popularity))", "score": -0.6214361569831254, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Post Production),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.popularity),movie.popularity))", "score": -0.6232592843483228, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Post Production),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,spoken_language.iso_639_1), movie.popularity),movie.popularity))", "score": -0.6309610325814132, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.revenue))", "score": -0.6471962418945623, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.id))", "score": -0.6477468696029973, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),country.name,!=,Post Production), movie.popularity),movie.popularity))", "score": -0.6484466972833616, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,!=,Post Production),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,movie.popularity), movie.popularity),movie.popularity))", "score": -0.6892909635200556, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))", "score": -0.7093691941190627, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}, {"orig_question": "Find the popularity of the movies that are not in status of Post Production.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.status),movie.popularity))", "score": -0.7143173841832322, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,!=,Post Production), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 116, "beams": [{"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,42),getData(crew),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.status),movie.status))", "score": -0.2706364199399162, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,42),getData(crew),oscar.id,oscar_winner.oscar_id),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "score": -0.27233656657073374, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,42),getData(crew),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.status))", "score": -0.30432853381260333, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,42),getData(crew),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.status),movie.status))", "score": -0.30519171148724467, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,42),getData(crew),oscar.id,oscar_nominee.oscar_id),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "score": -0.3068918581180622, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,42),getData(crew),oscar.id,crew.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.status),movie.status))", "score": -0.32566513302965316, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,42),getData(crew),oscar.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "score": -0.3273652796604707, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,=,42),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.status),movie.status))", "score": -0.3354756126575369, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,42),getData(crew),oscar.id,oscar_nominee.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.status))", "score": -0.3388838253599318, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(oscar),oscar.number,<,42),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.status),movie.status))", "score": -0.33980701538707625, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,42),getData(crew),oscar.id,crew.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.status),movie.status))", "score": -0.3593572469023403, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,<,42),getData(crew),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.status),movie.status))", "score": -0.36894245673926895, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(crew),person.id,crew.person_id),oscar.number,=,42),getData(movie),crew.movie_id,movie.id),merge(getData(crew),getData(movie),crew.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id), movie.status),movie.status))", "score": -0.36907884212383607, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,<,42),getData(crew),oscar.id,oscar_winner.oscar_id),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "score": -0.3706426033700865, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}, {"orig_question": "How many movie status are counted for movies with an oscar number less than 42 and the crew departement Camera?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(merge(getData(oscar),getData(crew),person.id,crew.person_id),oscar.number,=,42),getData(movie),crew.movie_id,movie.id),getData(movie),crew.movie_id,movie.id), movie.status),movie.status))", "score": -0.3925013961460094, "correct_code": "count(extractValues(distinct(filter(merge(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.number,<,42),merge(getData(person),getData(crew),person.id,crew.person_id),oscar_nominee.person_id,person.id),getData(movie),crew.movie_id,movie.id),crew.department,=,Camera), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 117, "beams": [{"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))", "score": -0.138002055711695, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))", "score": -0.15216929597954731, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,=,The Croods), movie.budget),movie.budget))", "score": -0.4946999792155111, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),has_genre.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.title,=,The Croods), movie.budget),movie.budget))", "score": -0.5661307430555947, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),has_genre.movie_id,movie.id),movie.id,has_genre.movie_id),movie.title,=,The Croods), movie.budget),movie.budget))", "score": -0.5663824814291682, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,The Croods), movie.budget),movie.budget))", "score": -0.5727679179253755, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),has_genre.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.title,=,The Croods), movie.budget),movie.budget))", "score": -0.577957402489439, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),has_genre.movie_id,movie.id),movie.id,has_genre.movie_id),movie.title,=,The Croods), movie.budget),movie.budget))", "score": -0.5860002361944812, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),has_genre.movie_id,movie.id),movie.id,movie.revenue),movie.title,=,The Croods), movie.budget),movie.budget))", "score": -0.604274422406736, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.title,=,The Croods), movie.budget),movie.budget))", "score": -0.6125000350376496, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.revenue),movie.budget))", "score": -0.6209090491029201, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.revenue),movie.budget))", "score": -0.6236224225867772, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,The Croods), movie.budget),movie.budget))", "score": -0.6765372697409475, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.release_date),movie.budget))", "score": -0.6782373924943386, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}, {"orig_question": "How much was the budget of the movie The Croods?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.release_date),movie.budget))", "score": -0.6840311340201879, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,The Croods), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 118, "beams": [{"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.06721980027710257, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.130472367093045, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.category))", "score": -0.26256157863610213, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.293237381227694, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.number),oscar.number))", "score": -0.32581414545204457, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3425090985605488, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.35648994804363643, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1903-02-16),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id), oscar.category),oscar.category))", "score": -0.3730970372654296, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.3929993505836641, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar.id), oscar.category),oscar.category))", "score": -0.39376668250117214, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.sub_category))", "score": -0.39803822827703395, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),oscar_nominee.movie_id,movie.id), oscar.category),oscar.category))", "score": -0.40030317475983324, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number))", "score": -0.4057616653764912, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.407462525260127, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}, {"orig_question": "In how many oscar categories were people, who were born on or before February 16, 1903, nominated?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))", "score": -0.4184574305721461, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1903-02-16),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.category))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 119, "beams": [{"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_count,<=,1957),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.budget)", "score": -0.15358750227665294, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(merge(filter(getData(movie),person.death_day,<=,1957),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.budget)", "score": -0.21198500884602384, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_count,=,1957),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.budget)", "score": -0.23295796344658132, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.vote_count,<=,1957), movie.id),movie.budget)", "score": -0.27980577713100296, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(merge(filter(getData(movie),person.death_day,=,1957),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.budget)", "score": -0.29135547001595224, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_count,>=,1957),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.budget)", "score": -0.2994751030628583, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),movie.vote_count,<=,1957),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.budget)", "score": -0.3039652804767025, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),person.death_day,<=,1957), movie.id),movie.budget)", "score": -0.311044752837739, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.vote_count,<,1957),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.budget)", "score": -0.31476148486848304, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(merge(filter(getData(movie),oscar.number,<=,1957),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.budget)", "score": -0.3273665341403309, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(merge(filter(getData(movie),oscar.year,<=,1957),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.budget)", "score": -0.3376299098583769, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),person.death_day,<=,1957), movie.id),movie.budget)", "score": -0.3470125074683772, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.revenue,<=,1957),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id), movie.id),movie.budget)", "score": -0.3480374675674149, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.year,<=,1957), movie.id),movie.budget)", "score": -0.35152885752694074, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "What's the total budget of movies, which won an oscar before 1957?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),movie.vote_count,<=,1957), movie.id),movie.budget)", "score": -0.3603302249980829, "correct_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1957),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 120, "beams": [{"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)", "score": -0.03832457879554002, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.revenue)", "score": -0.3193063551945151, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,<=,286168572), movie.id),movie.budget)", "score": -0.6283274963039157, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>,286168572), movie.id),movie.budget)", "score": -0.6485526220886008, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.vote_count)", "score": -0.6872280928763912, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,286168572), movie.id),movie.budget)", "score": -0.7017717987411155, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),person.death_day)", "score": -0.7514506623068354, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,>=,286168572), movie.id),movie.budget)", "score": -0.7971519774720998, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(filter(getData(movie),movie.revenue,<=,286168572),movie.revenue)", "score": -0.8223607296414344, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.budget),movie.budget)", "score": -0.8381344168454097, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),oscar_nominee.movie_id)", "score": -0.8549681121731975, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.release_date)", "score": -0.8646560755483891, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.release_date),movie.budget)", "score": -0.8682077865361456, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.revenue),movie.budget)", "score": -0.8911357225373427, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}, {"orig_question": "What is the total budget of all movies with a revenue of at least 286168572?", "inferred_code": "sum(distinct(filter(getData(movie),movie.budget,>=,286168572), movie.id),movie.budget)", "score": -0.8951066544099193, "correct_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,286168572), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 121, "beams": [{"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,!=,6900000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.09795678111963696, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>,6900000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.1302112564096218, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,<,6900000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.20979839814865753, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,>,6900000),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.22972796602544146, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,!=,6900000),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.24121628043774807, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,=,6900000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.25434815145719886, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,>,6900000), genre.name),genre.name))", "score": -0.25626742906640526, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,>,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2606831182231548, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<,6900000),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.28415151289479806, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,>=,6900000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.29655434207085946, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,!=,6900000), genre.name),genre.name))", "score": -0.3336558914656452, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3457459660851, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,<,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3642909642556904, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.budget,<,6900000), genre.name),genre.name))", "score": -0.3721873329541979, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "How many distinct genre names are there for movies with a budget different than 6900000 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.budget,null,6900000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.4072696972856464, "correct_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.budget,!=,6900000),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 122, "beams": [{"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Berlin),getData(movie),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.14000277879804277, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_place,=,Berlin),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.vote_count),movie.vote_count))", "score": -0.17521561624264564, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.20467992960083894, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.22316155942216714, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.name,=,Berlin),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.vote_count),movie.vote_count))", "score": -0.2272258389753247, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Berlin),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.vote_count),movie.vote_count))", "score": -0.25775847323044815, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.25839402471352907, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),country.name,=,Berlin),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.vote_count),movie.vote_count))", "score": -0.2788944667697534, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),country.name,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.30355289592887247, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),company.name,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.31766853247404614, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),keyword.name,=,Berlin),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.vote_count),movie.vote_count))", "score": -0.32392657390968094, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),keyword.name,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.32822799651384604, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,!=,Berlin),getData(movie),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.34609610322133305, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(cast),person.id,cast.person_id),person.name,=,Berlin),merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.movie_id),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.38929837877986406, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}, {"orig_question": "What are the vote counts of movies with a minimal vote average and having cast who died in Berlin?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),company.name,=,Berlin),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.vote_count),movie.vote_count))", "score": -0.39011146329455043, "correct_code": "done(extractValues(min(merge(merge(filter(getData(person),person.death_place,=,Berlin),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),movie.vote_average),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 123, "beams": [{"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.18531249249164364, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime))", "score": -0.24207062955974834, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime)", "score": -0.3080611114529084, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.runtime),movie.runtime))", "score": -0.5194394079371705, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.status,movie.id),movie.id,movie.popularity),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.5429351600054748, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.status,movie.id),movie.id,movie.id),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.5495486116001413, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,movie.id),movie.runtime),movie.runtime))", "score": -0.5608481181790721, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.5865687764087444, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.popularity,movie.id),movie.id,movie.id),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.593182233390975, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.status,movie.id),movie.id,movie.popularity),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.6014613493945312, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),movie.status,movie.id),movie.id,movie.id),movie.status,=,Post Production), movie.id),movie.runtime)", "score": -0.6080748009891978, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.status,movie.id),movie.id,movie.popularity),movie.status,=,Post Production), movie.runtime),movie.runtime)", "score": -0.6094507683484286, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Post Production),getData(movie),movie.id,movie.id),movie.vote_average),movie.runtime))", "score": -0.6140247190231065, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.status,movie.id),movie.id,movie.id),movie.status,=,Post Production), movie.runtime),movie.runtime)", "score": -0.616064219943095, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}, {"orig_question": "What is the movie average runtime of movies with the status Post Production?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,movie.id),movie.runtime),movie.runtime))", "score": -0.6583202949348067, "correct_code": "avg(distinct(filter(getData(movie),movie.status,=,Post Production), movie.id),movie.runtime)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 124, "beams": [{"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.12811041330860462, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.25894344481438014, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),genre.id,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.3571041949773087, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.36450261702702846, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.3830201708333334, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.3994053501090589, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.40329266657146184, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.4072635665178541, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),has_genre.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.4080747786300215, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.4095724279125765, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,has_genre.genre_id),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.41768971679457656, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(genre),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.4306831873645969, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.43386956237259355, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),country.iso_3166_1,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.4347661325173964, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}, {"orig_question": "What is the popularity of the movie Austin Powers in Goldmember?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),oscar.id,spoken_language.iso_639_1),language.name,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))", "score": -0.4447448141137728, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Austin Powers in Goldmember), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 125, "beams": [{"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<=,10037390),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,10037390), company.name),company.name))", "score": -0.11996173524992218, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.14913031229374715, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,10037390), company.name),company.name))", "score": -0.15730676568391933, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,10037390), company.name),company.name))", "score": -0.16492602136407372, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,10037390),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), movie.budget),company.name))", "score": -0.28017487935861046, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,10037390), movie.title),company.name))", "score": -0.2805551526139876, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,10037390),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), movie.vote_count),company.name))", "score": -0.319675476095347, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<=,10037390),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,10037390), company.name),production_company.company_id))", "score": -0.33160847167535895, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<=,10037390),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,10037390), movie.title),company.name))", "score": -0.336803305636934, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<=,10037390),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>=,10037390), company.name),company.name))", "score": -0.3522200180619971, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,10037390),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), person.death_day),company.name))", "score": -0.35576727369833, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,>=,10037390),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,10037390), company.name),company.name))", "score": -0.37226183050520867, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,<=,10037390), company.name),movie.title))", "score": -0.3732235077563482, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<=,10037390),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,10037390), company.name),movie.budget))", "score": -0.3754220647698705, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "What are the company names where the move revenue was less or the same as 10037390?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<=,10037390),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<=,10037390), company.name),movie.title))", "score": -0.3909279689278248, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<=,10037390),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 126, "beams": [{"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.09135709925003757, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.vote_average),movie.vote_count)", "score": -0.15297214531317946, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.vote_count),movie.vote_count)", "score": -0.29208361502120866, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.vote_average)", "score": -0.367723720272335, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(company),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.37700358765350894, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(language),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.38100843287534875, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(merge(filter(getData(country),country.name,!=,United States of America),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.38142913447884325, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.3824900867330398, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(merge(filter(getData(country),country.name,!=,United States of America),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.386088422426421, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(movie),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.3862129786070869, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(genre),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.40205329727911415, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(country),production_country.iso_3166_1,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.4061750407330159, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(country),company.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.4068006605578213, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),company.id,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.4097686370228479, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}, {"orig_question": "What is the average movie vote count of all movies that were not produced in the country called United States of America?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,United States of America),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),genre.id,production_country.iso_3166_1), movie.id),movie.vote_count)", "score": -0.42611692472997775, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,United States of America), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 127, "beams": [{"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,=,Released), country.name),country.name))", "score": -0.08087930079244357, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,Released), country.name),country.name))", "score": -0.18977087093903883, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.21877071657036978, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,=,Released), country.name),country.name))", "score": -0.23205809691996968, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.status,=,Released), country.name),country.name))", "score": -0.2329466415861477, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.title,=,Released), country.name),country.name))", "score": -0.2431164394966865, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,Released), country.name),country.name))", "score": -0.259963595893404, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.title,=,Released), country.name),country.name))", "score": -0.2608675222842205, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.32850681571000073, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.34205132724383486, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,=,Released), country.name),country.name))", "score": -0.3721848273369879, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Released),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.38617638209316235, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,=,Released), country.name),country.name))", "score": -0.38823833952810377, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Released),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.39934011895442084, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}, {"orig_question": "In which countries are currently unreleased movies being produced?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),country.name,=,Released), country.name),country.name))", "score": -0.40061476542611885, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.status,!=,Released), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 128, "beams": [{"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Manchester), movie.title),movie.title))", "score": -0.14977537795017737, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.name,=,Manchester), movie.title),movie.title))", "score": -0.20244091747174175, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),country.name,=,Manchester), movie.title),movie.title))", "score": -0.2191545250966922, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.gender,=,Manchester), movie.title),movie.title))", "score": -0.22219605355487743, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_place,=,Manchester),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.2239586736660668, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Manchester),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.2530223260857597, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),country.name,=,Manchester), movie.title),movie.title))", "score": -0.2683484903762119, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),person.birth_place,=,Manchester), movie.title),movie.title))", "score": -0.2824198255041017, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),movie.status,=,Manchester), movie.title),movie.title))", "score": -0.28343549172303595, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.death_place,=,Manchester), movie.title),movie.title))", "score": -0.29208486499239417, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.name,=,Manchester),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id), movie.title),movie.title))", "score": -0.29918445604854327, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.gender,=,Manchester), movie.title),movie.title))", "score": -0.30709880746492507, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),person.name,=,Manchester), movie.title),movie.title))", "score": -0.3113626621645802, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(movie),crew.movie_id,movie.id),oscar.category,=,Manchester), movie.title),movie.title))", "score": -0.31273387963234883, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}, {"orig_question": "What are the distinct titles of movies with a crew member dead in Manchester ?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id),movie.status,=,Manchester),movie.title,=,Manchester), movie.title),movie.title))", "score": -0.36647593282122104, "correct_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_place,=,Manchester),merge(getData(crew),getData(movie),crew.movie_id,movie.id),person.id,crew.person_id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 129, "beams": [{"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,!=,Cheap Thrills),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.10053009030370767, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,!=,Cheap Thrills), person.gender),person.gender))", "score": -0.11218103029119575, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,!=,Cheap Thrills), person.gender),person.gender))", "score": -0.21186446020184438, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.2731912130194068, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,>,Cheap Thrills),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.28252512363953747, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,!=,Cheap Thrills),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.gender),person.gender))", "score": -0.2873950887311773, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,>,Cheap Thrills), person.gender),person.gender))", "score": -0.31599890357106053, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>,Cheap Thrills), person.gender),person.gender))", "score": -0.3190186727421746, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.sub_category,!=,Cheap Thrills), person.gender),person.gender))", "score": -0.3229805250672223, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,>=,Cheap Thrills), person.gender),person.gender))", "score": -0.35961359572527585, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),person.name,!=,Cheap Thrills), person.gender),person.gender))", "score": -0.3898308144109251, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,>=,Cheap Thrills), person.gender),person.gender))", "score": -0.3910948192906604, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.year,!=,Cheap Thrills), person.gender),movie.release_date))", "score": -0.4009464010639852, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,!=,Cheap Thrills),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.oscar_id,person.id), person.gender),person.gender))", "score": -0.40363702598953477, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}, {"orig_question": "What are the genders from the persons who won the oscar but not for Cheap Thrills?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.number,!=,Cheap Thrills), person.gender),person.gender))", "score": -0.40451265131113945, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),movie.id,oscar_winner.movie_id),movie.title,!=,Cheap Thrills), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 130, "beams": [{"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.status))", "score": -0.043422941940661985, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.vote_average))", "score": -0.37657685660087736, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.status))", "score": -0.3950052716609207, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.popularity))", "score": -0.4198020257827011, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.popularity),movie.status))", "score": -0.4451398708697525, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.title))", "score": -0.6065510072585312, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.runtime))", "score": -0.6229739346381393, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.runtime),movie.status))", "score": -0.6341549613352981, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.status))", "score": -0.6774207052330894, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.status))", "score": -0.7086775758143631, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.vote_average))", "score": -0.7281591863211361, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.status),movie.release_date))", "score": -0.7434225239630905, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.vote_average),movie.popularity))", "score": -0.7713843555029598, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.popularity),movie.vote_average))", "score": -0.7782937855299679, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}, {"orig_question": "Do movies exist with the status Rumored?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Rumored), movie.status),movie.status))", "score": -0.8008515649198671, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.status,=,Rumored), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 131, "beams": [{"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.15543622709336566, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,<,visual effects), person.birth_place),person.birth_place))", "score": -0.19394749534750633, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.birth_place))", "score": -0.25423247734064586, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.death_place))", "score": -0.25543725591519306, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,<,visual effects), person.birth_place),person.birth_place))", "score": -0.27598631664726014, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,<,visual effects), person.birth_place),person.death_place))", "score": -0.29691636250094017, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,<,visual effects), person.death_place),person.birth_place))", "score": -0.3074912115923112, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.category,=,visual effects),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_place),person.death_place))", "score": -0.3193243725500864, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,=,visual effects), person.birth_place),person.birth_place))", "score": -0.33689748895820626, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,visual effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),filter(getData(person),person.death_day,!=,visual effects),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.34078606193183725, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,<,visual effects), person.death_place),person.birth_place))", "score": -0.3462536806294651, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(crew),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,<,visual effects), person.birth_place),person.birth_place))", "score": -0.3480469717331656, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,<,visual effects), person.birth_place),person.birth_place))", "score": -0.35555471519968684, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,1922-03-23),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.3612990593327285, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of all the persons that were part of the crew of a movie that won an oscar in the category of visual effects that were born before 1922-03-23 ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.category,<,visual effects), person.birth_place),person.death_place))", "score": -0.3753255465319224, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),filter(merge(getData(crew),getData(person),crew.person_id,person.id),person.birth_day,<,1922-03-23),movie.id,crew.movie_id),oscar.id,oscar_winner.oscar_id),oscar.category,=,visual effects), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 132, "beams": [{"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,>,1975-03-06), oscar.id),oscar.number)", "score": -0.1571384252372905, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,>,1975-03-06), oscar.year),oscar.number)", "score": -0.26461539329772077, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,>,1975-03-06), oscar.number),oscar.number)", "score": -0.26872036781651953, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,>,1975-03-06),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.3091737994240002, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.gender,>,1975-03-06), oscar.id),oscar.number)", "score": -0.32603930786767676, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.birth_day,>=,1975-03-06), oscar.id),oscar.number)", "score": -0.3282326506693911, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,>=,1975-03-06), oscar.id),oscar.number)", "score": -0.34251516401938725, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,>,1975-03-06), oscar.sub_category),oscar.number)", "score": -0.3434566935908567, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,>,1975-03-06),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.number)", "score": -0.35368162126326574, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.37287557278545064, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,>,1975-03-06),getData(oscar_winner),person.id,oscar_winner.person_id),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,>,1975-03-06),oscar_winner.person_id,oscar.id), oscar.id),oscar.number)", "score": -0.380767816822285, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,>,1975-03-06),getData(oscar_winner),person.id,oscar_winner.person_id),filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,>,1975-03-06),oscar_winner.person_id,oscar.id), oscar.id),oscar.number)", "score": -0.38269783968311416, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.3878109946023834, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,>,1975-03-06),getData(oscar_winner),person.id,oscar_winner.person_id),filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,>,1975-03-06),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.38937452641667625, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar edition of oscar winners that were born after 1975-03-06?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,>,1975-03-06),getData(oscar_winner),person.id,oscar_winner.person_id),filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.birth_day,>,1975-03-06),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.39130434461032, "correct_code": "avg(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1975-03-06),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 133, "beams": [{"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "score": -0.11328357996218591, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(person),oscar_nominee.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.17578852649943338, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.death_place))", "score": -0.21025246916029022, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.movie_id), person.birth_place),person.birth_place))", "score": -0.246336653564713, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,movie.id), person.birth_place),person.birth_place))", "score": -0.2852049183214854, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,!=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "score": -0.28729264101582513, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id), person.birth_place),person.birth_place))", "score": -0.29889539317858776, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(person),oscar_nominee.person_id,person.id), person.birth_place),person.death_place))", "score": -0.3061870813290229, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),getData(oscar_nominee),oscar.id,oscar_winner.oscar_id),getData(person),oscar_nominee.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.3115226919725203, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.oscar_id), person.death_place),person.birth_place))", "score": -0.314403620419667, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(filter(getData(movie),movie.title,!=,writing (adapted screenplay)),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,movie.id), person.birth_place),person.birth_place))", "score": -0.32045258647614516, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))", "score": -0.3346638524667515, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),oscar_nominee.movie_id,movie.id), person.birth_place),person.death_place))", "score": -0.33720345918393335, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),oscar.id,oscar_nominee.movie_id), person.birth_place),person.death_place))", "score": -0.3433055427628173, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of oscar nominees in the sub category \"writing (adapted screenplay)\" and whose name is not \"Danielle Tabary\" ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(person),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,cast.movie_id),oscar_nominee.movie_id,movie.id), person.birth_place),person.birth_place))", "score": -0.34623216317458766, "correct_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,writing (adapted screenplay)),filter(merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.name,!=,Danielle Tabary),oscar.id,oscar_nominee.oscar_id), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 134, "beams": [{"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.0826254111246839, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.21172529205730703, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))", "score": -0.2191047176746247, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.256200448424355, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,>,25035950), language.name),language.name))", "score": -0.2629401726514487, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.revenue,<,25035950),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3086620949751158, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,25035950),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3101304423117173, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.revenue,<,25035950), language.name),language.name))", "score": -0.33269324827920244, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),genre.name))", "score": -0.351025665137434, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),person.birth_place))", "score": -0.3639620688367802, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.revenue,>,25035950), language.name),language.name))", "score": -0.37547756795827514, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<=,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),language.name))", "score": -0.3848246362436806, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.3853003293569781, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(movie),movie.revenue,<,25035950),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.revenue,<,25035950), language.name),language.name))", "score": -0.3858700033622186, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}, {"orig_question": "How many different spoken languages are used on the movies which have revenue lower than 25035950?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.release_date,<,25035950), language.name),language.name))", "score": -0.39483864831876436, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,25035950), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 135, "beams": [{"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)", "score": -0.01965806897046504, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.vote_average,>=,24.5985), movie.id),movie.budget)", "score": -0.5230803030263322, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.revenue)", "score": -0.5805999592387356, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.budget),movie.budget)", "score": -0.6158269396840251, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,>=,24.5985), movie.id),movie.budget)", "score": -0.6221718644087405, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,<=,24.5985), movie.id),movie.budget)", "score": -0.6840716989780369, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.popularity,>=,24.5985), movie.id),movie.budget)", "score": -0.6992101830735133, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>,24.5985), movie.id),movie.budget)", "score": -0.7177725261320049, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.release_date),movie.budget)", "score": -0.7444622630936301, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.revenue,>=,24.5985), movie.id),movie.budget)", "score": -0.7815279982639058, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),person.death_day)", "score": -0.8164598297577097, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.revenue),movie.budget)", "score": -0.839214895374557, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,=,24.5985), movie.id),movie.budget)", "score": -0.8422881018764534, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.release_date)", "score": -0.8496159408374429, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}, {"orig_question": "Whats the total sum of budgets for movies which have a popularity of at least 24.5985?", "inferred_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.vote_count)", "score": -0.8567919041519071, "correct_code": "sum(distinct(filter(getData(movie),movie.popularity,>=,24.5985), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 136, "beams": [{"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.status))", "score": -0.03819267378275981, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,<,85), movie.status),movie.status))", "score": -0.316313781971985, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))", "score": -0.36630142592912307, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,=,85), movie.status),movie.status))", "score": -0.5239792849970399, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>=,85), movie.status),movie.status))", "score": -0.5694553043795167, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),movie.popularity,movie.id),movie.id,production_country.movie_id),movie.runtime,>,85), movie.status),movie.status))", "score": -0.7096705956719153, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.status))", "score": -0.7273822081369872, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.runtime,>,85),merge(getData(production_country),getData(movie),movie.status,movie.id),movie.id,spoken_language.movie_id), movie.status),movie.status))", "score": -0.75567565830612, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,null,85), movie.status),movie.status))", "score": -0.7692678358507692, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.popularity),movie.status))", "score": -0.7730240460587083, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.title))", "score": -0.7811893208054244, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.vote_average))", "score": -0.7918890101936995, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.status),movie.popularity))", "score": -0.7975499017265975, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), country.name),movie.status))", "score": -0.7988001342964708, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}, {"orig_question": "How many distinct status have movies with a runtime different than 85 ?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,>,85), movie.title),movie.status))", "score": -0.8016073938561021, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.runtime,!=,85), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 137, "beams": [{"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,f), oscar.id),oscar.year)", "score": -0.22964283099786964, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.year,=,f),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.id),oscar.year)", "score": -0.25121859215734693, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.year,=,f),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.id),oscar.number)", "score": -0.2625058089350509, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,=,f),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.29559616293942, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,f), oscar.id),oscar.number)", "score": -0.2972791684396208, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,=,f),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.31020605724114986, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,f), oscar.year),oscar.year)", "score": -0.31060602171851687, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,=,f),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.32152680621793966, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),oscar.year,=,f), oscar.id),oscar.year)", "score": -0.32977576201062486, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(merge(merge(filter(getData(oscar),oscar.year,=,f),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.year),oscar.number)", "score": -0.33613670051966954, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,f),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.id),oscar.year)", "score": -0.3411265162659421, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id),oscar.year,=,f), oscar.id),oscar.year)", "score": -0.34452444450099423, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,=,f),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.34473527495115636, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.category,=,f),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.id),oscar.number)", "score": -0.3524137330436461, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}, {"orig_question": "what is the sum of the oscar year where the winner of the oscar was a woman?", "inferred_code": "sum(distinct(merge(filter(getData(oscar),oscar.year,=,f),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id), oscar.year),oscar.year)", "score": -0.358911508532638, "correct_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.gender,=,f), oscar.id),oscar.year)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 138, "beams": [{"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825), company.name),company.name))", "score": -0.07679434956417694, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>,0.545825),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.17980308043077586, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>=,0.545825), company.name),company.name))", "score": -0.2216437797313456, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.popularity,>,0.545825),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.24393498712318867, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,>,0.545825), company.name),company.name))", "score": -0.2627592143472646, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,!=,0.545825), company.name),company.name))", "score": -0.2882419054078689, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825), movie.title),company.name))", "score": -0.30477816724017237, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,0.545825),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825), company.name),company.name))", "score": -0.30977634235937945, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,>=,0.545825),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3343117479647125, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.popularity,>,0.545825),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,>,0.545825), company.name),company.name))", "score": -0.3349714316393106, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.popularity,!=,0.545825),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3386704049261649, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,<,0.545825), company.name),company.name))", "score": -0.339333294595373, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825), company.name),movie.title))", "score": -0.34123408068376576, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(distinct(extractValues(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.popularity,>,0.545825),getData(company),production_company.company_id,company.id),company.name), company.name))", "score": -0.367446359568117, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}, {"orig_question": "Which companies produced movies with a popularity of more than 0.545825?", "inferred_code": "done(distinct(extractValues(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,>,0.545825),company.name), company.name))", "score": -0.4054123228623202, "correct_code": "done(distinct(extractValues(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,>,0.545825),company.name), company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 139, "beams": [{"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))", "score": -0.023161937562690582, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1584), movie.revenue),movie.revenue))", "score": -0.4643134908619686, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.popularity),movie.revenue))", "score": -0.5706296880598529, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.budget))", "score": -0.678534723665507, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.id),movie.revenue))", "score": -0.6945311148519977, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))", "score": -0.7114826169854496, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.vote_count))", "score": -0.7487869037649943, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,1584), movie.revenue),movie.revenue))", "score": -0.7639452950897976, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.budget),movie.revenue))", "score": -0.7658827622290119, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,1584), movie.revenue),movie.revenue))", "score": -0.775693132156448, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>,1584), movie.revenue),movie.revenue))", "score": -0.7899688176912605, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.vote_average),movie.revenue))", "score": -0.8399679382200702, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.id))", "score": -0.8759807123205974, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,>,1584), movie.revenue),movie.revenue))", "score": -0.9065936498445808, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}, {"orig_question": "What are the revenue of all movies with a vote count over 1584.0?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.popularity))", "score": -0.9153258575461223, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1584), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 140, "beams": [{"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))", "score": -0.15865327867504675, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1932-03-03),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.29122771560877425, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1932-03-03),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.29778708977521745, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1932-03-03),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.3090293674063549, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1932-03-03),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.3155887415727981, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1932-03-03),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id), person.death_place),person.death_place))", "score": -0.34208161585189667, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1932-03-03),getData(cast),person.id,crew.person_id),getData(person),cast.person_id,person.id), person.death_place),person.death_place))", "score": -0.34414694792566813, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1932-03-03),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.death_place),person.death_place))", "score": -0.3786229644235155, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1932-03-03),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id), person.death_place),person.death_place))", "score": -0.38518233858995865, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,<,1932-03-03), person.death_place),person.death_place))", "score": -0.39161845566597375, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.death_day,<,1932-03-03), person.death_place),person.death_place))", "score": -0.39395274299022276, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1932-03-03),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,cast.person_id), person.death_place),person.death_place))", "score": -0.39642461622109615, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,<,1932-03-03),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,cast.person_id), person.death_place),person.death_place))", "score": -0.4029839950945649, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_day,<,1932-03-03),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.43088126014125555, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}, {"orig_question": "How many different death places of persons born before 1932-03-03 are there?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,>,1932-03-03), person.death_place),person.death_place))", "score": -0.4346354276203783, "correct_code": "count(extractValues(distinct(filter(getData(person),person.birth_day,<,1932-03-03), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 141, "beams": [{"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),language.name,=,hi),merge(merge(merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.30440835328237775, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,hi),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,country.iso_3166_1), country.name),country.name))", "score": -0.3123520186898559, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,hi),merge(merge(merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.31536295386133123, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),language.name,=,hi),merge(merge(merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.3157173676822498, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),language.name,=,hi),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.3249897642548349, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,hi),merge(merge(merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.33594430324289404, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,hi),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3375599688025308, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,hi),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.original_language,country.iso_3166_1), country.name),country.name))", "score": -0.3410295275243723, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),language.name,=,hi),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.3513578399406377, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,hi),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),spoken_language.movie_id,country.iso_3166_1), country.name),country.name))", "score": -0.3656672314249034, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,hi),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.36620569031067823, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(country),language.name,=,hi),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.3666860190135268, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,hi),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),spoken_language.movie_id,country.iso_3166_1), country.name),country.name))", "score": -0.38191724265777255, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),language.name,=,hi),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.397910763014805, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}, {"orig_question": "In how many countries were produced films in the language hi?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,hi),merge(merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),getData(country),production_country.iso_3166_1,country.iso_3166_1),language.iso_639_1,production_country.iso_3166_1), country.name),country.name))", "score": -0.4104704705238134, "correct_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.original_language,=,hi), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 142, "beams": [{"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.3603570557093568, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity,=,Post Production),movie.popularity),movie.runtime))", "score": -0.36492967110180946, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.3733811097627989, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(crew),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.38619329228808125, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.3971696905332482, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(crew),getData(movie),crew.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.3992173463415234, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.status,=,Post Production),movie.popularity),movie.runtime))", "score": -0.4030121263095903, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.41019374458669033, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,movie.id),movie.popularity),movie.runtime))", "score": -0.4173222989322542, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),movie.status,=,Post Production),getData(production_country),movie.id,production_country.movie_id),getData(movie),production_country.movie_id,movie.id),movie.popularity),movie.runtime))", "score": -0.4188093502009588, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,crew.person_id),movie.popularity),movie.runtime))", "score": -0.42092435856876664, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(crew),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.42300592711197266, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),movie.id,movie.id),movie.popularity),movie.runtime))", "score": -0.4303463777668017, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),movie.id,crew.person_id),movie.popularity),movie.runtime))", "score": -0.4339484374033141, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}, {"orig_question": "What is the runtime of the movie with the lowest popularity, which is in post production?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),movie.status,=,Post Production),merge(getData(crew),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.iso_3166_1),movie.popularity),movie.runtime))", "score": -0.4360300059465201, "correct_code": "done(extractValues(min(filter(getData(movie),movie.status,=,Post Production),movie.popularity),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 143, "beams": [{"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))", "score": -0.038806008484661716, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))", "score": -0.1851735535424686, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,!=,TV Movie),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))", "score": -0.23516102500882813, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id),genre.name,!=,TV Movie), movie.title),movie.title))", "score": -0.28441060472932306, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(genre),getData(has_genre),genre.id,has_genre.genre_id),genre.name,!=,TV Movie),getData(movie),has_genre.movie_id,movie.id),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))", "score": -0.34353557619370445, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))", "score": -0.3791756808991475, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),person.death_place,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))", "score": -0.41438236464490585, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(genre),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id),genre.name,!=,TV Movie), movie.title),movie.title))", "score": -0.4184195733492498, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),oscar.category,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))", "score": -0.4283545000392137, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.budget),movie.title))", "score": -0.4325840599018625, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),has_genre.movie_id,has_genre.genre_id), movie.title),movie.title))", "score": -0.4380086187925404, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))", "score": -0.4471014645954138, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(genre),getData(movie),has_genre.movie_id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))", "score": -0.4502962703913324, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),has_genre.movie_id,movie.id),genre.name,has_genre.genre_id), movie.title),movie.title))", "score": -0.46065202107818626, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}, {"orig_question": "What are the movie titles form movies that are not from the genre TV Movie?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(genre),genre.name,!=,TV Movie),merge(getData(has_genre),getData(movie),genre.id,movie.id),genre.id,has_genre.genre_id), movie.title),movie.title))", "score": -0.46706689703499094, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),genre.name,!=,TV Movie),getData(has_genre),genre.id,has_genre.genre_id),getData(movie),has_genre.movie_id,movie.id), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 144, "beams": [{"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))", "score": -0.016540764234378003, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,50.0736), movie.release_date),movie.release_date))", "score": -0.5208184973889729, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.popularity,=,50.0736),movie.release_date), movie.release_date))", "score": -0.6017222736918484, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.budget))", "score": -0.6948231474816566, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.popularity),movie.release_date))", "score": -0.6997813088673865, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,50.0736), movie.release_date),movie.release_date))", "score": -0.7043696896726033, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.budget),movie.release_date))", "score": -0.7064693672436988, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,50.0736), movie.release_date),movie.release_date))", "score": -0.7570435659581563, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.id),movie.release_date))", "score": -0.7773110968846595, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.popularity))", "score": -0.7804490343987709, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.id))", "score": -0.8393815175950294, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))", "score": -0.8678722868753539, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.popularity,=,50.0736), movie.release_date),movie.release_date))", "score": -0.8756024509784766, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.runtime),movie.release_date))", "score": -0.8762021763104713, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}, {"orig_question": "What are the release dates of movies that have popularity of 50.0736?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.title))", "score": -0.8830050842225319, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,50.0736), movie.release_date),movie.release_date))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 145, "beams": [{"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2016-12-24), movie.release_date),movie.title))", "score": -0.26592950430494966, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2016-12-24), person.gender),movie.title))", "score": -0.29398894217592897, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.death_day,<,2016-12-24), person.death_place),movie.title))", "score": -0.42801504190184436, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2016-12-24), person.death_place),movie.title))", "score": -0.4358675321636838, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_day,<,2016-12-24), person.death_place),movie.title))", "score": -0.44539771304546333, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2016-12-24), movie.popularity),movie.title))", "score": -0.4465608140526456, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.death_day,<,2016-12-24), person.death_day),movie.title))", "score": -0.44933533819733373, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2016-12-24), person.name),movie.title))", "score": -0.45379288402182283, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.death_day,<,2016-12-24), person.death_day),movie.title))", "score": -0.4667180093409527, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<,2016-12-24), movie.status),movie.title))", "score": -0.5088526746330899, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),oscar_nominee.person_id,person.id),person.id,crew.person_id),person.death_day,<,2016-12-24), person.death_place),movie.title))", "score": -0.5162110831354079, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),crew.person_id,person.id),person.id,crew.person_id),person.death_day,<,2016-12-24), person.death_place),movie.title))", "score": -0.5178867731688138, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(movie),cast.person_id,person.id),person.id,crew.person_id),person.death_day,<,2016-12-24), person.death_place),movie.title))", "score": -0.5352694664631414, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),oscar_nominee.person_id,person.id),person.id,crew.person_id),person.death_day,<,2016-12-24), person.death_day),movie.title))", "score": -0.5375313794308972, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}, {"orig_question": "What are the name of the person with a death day before 2016-12-24?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.death_day,<,2016-12-24), person.death_place),movie.title))", "score": -0.5383137269546333, "correct_code": "done(extractValues(distinct(filter(getData(person),person.death_day,<=,2016-12-24), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 146, "beams": [{"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_place),person.birth_place))", "score": -0.05275380678358488, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_place),person.death_place))", "score": -0.27856355972471647, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.gender,!=,m), person.birth_place),person.birth_place))", "score": -0.3188343596807194, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.gender,!=,m), person.birth_place),person.birth_place))", "score": -0.3856909398256765, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.gender,=,m),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.42131792753391695, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.gender,!=,m), person.birth_place),person.birth_place))", "score": -0.43399786383048905, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.gender,=,m),getData(cast),person.id,crew.person_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.4477429077976347, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.gender,!=,m), person.birth_place),person.death_place))", "score": -0.46120792097028923, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.gender,=,m), person.birth_place),person.birth_place))", "score": -0.48923714360292075, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.gender,!=,m), person.birth_place),person.birth_place))", "score": -0.49815247018623965, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(filter(getData(crew),person.gender,!=,m),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.gender,!=,m), person.birth_place),person.birth_place))", "score": -0.5100464764141364, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.gender,!=,m), person.birth_place),person.birth_place))", "score": -0.5125108571780715, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))", "score": -0.5227670133754145, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.gender,!=,m), person.birth_place),person.death_place))", "score": -0.5280645011152463, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}, {"orig_question": "What are the birth places of male persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,m), person.birth_place),keyword.name))", "score": -0.5355942255991977, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.birth_place),person.birth_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 147, "beams": [{"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.gender), person.birth_day))", "score": -0.22889237097115256, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.gender), person.gender))", "score": -0.35566769531578757, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.gender), movie.popularity))", "score": -0.4100247918686364, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.birth_day), person.birth_day))", "score": -0.4336257985851262, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.gender), person.id))", "score": -0.4490833579620812, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.birth_place), person.birth_day))", "score": -0.4842277578136418, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.gender), person.birth_place))", "score": -0.5210048257431481, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.gender),person.birth_day))", "score": -0.5338351237878669, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),movie.popularity), person.birth_day))", "score": -0.5414174608013127, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.birth_day), person.gender))", "score": -0.5604011229297612, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.gender), cast.person_id))", "score": -0.5670585035404656, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.birth_day))", "score": -0.5821001938602421, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.gender), language.iso_639_1))", "score": -0.5923550128063653, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.birth_place), person.gender))", "score": -0.6110030821582768, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}, {"orig_question": "Are there non female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.birth_day), movie.popularity))", "score": -0.61475821948261, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 148, "beams": [{"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)", "score": -0.11205473350434716, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.vote_average),movie.vote_count)", "score": -0.22820306104512328, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,>=,72000000), movie.id),movie.vote_count)", "score": -0.44410520490300365, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(filter(getData(movie),movie.budget,<=,72000000),movie.vote_count)", "score": -0.4566407788322556, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,>=,72000000), movie.vote_average),movie.vote_count)", "score": -0.5602535324437797, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_average)", "score": -0.6124933971104064, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.vote_count),movie.vote_count)", "score": -0.6262615893342686, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,=,72000000), movie.id),movie.vote_count)", "score": -0.6810275439058104, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(filter(getData(movie),movie.budget,>=,72000000),movie.vote_count)", "score": -0.6861007802932789, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.vote_average),movie.vote_count))", "score": -0.7083258944694535, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.vote_average),movie.vote_average)", "score": -0.7286417246511825, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(filter(getData(movie),movie.budget,<=,72000000),movie.vote_average)", "score": -0.7338447817034119, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.revenue)", "score": -0.7607908312237183, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.runtime),movie.vote_count)", "score": -0.7967627879870449, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}, {"orig_question": "What is the average vote count of all movies with a budget of 72000000.0 or less?", "inferred_code": "avg(distinct(filter(getData(movie),movie.budget,=,72000000), movie.vote_average),movie.vote_count)", "score": -0.7971758714465866, "correct_code": "avg(distinct(filter(getData(movie),movie.budget,<=,72000000), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 149, "beams": [{"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id),language.name,=,T\u00fcrk\u00e7e), company.name),company.name))", "score": -0.16260507837074234, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,T\u00fcrk\u00e7e),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.19820298309421566, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),language.name,>=,T\u00fcrk\u00e7e), company.name),company.name))", "score": -0.23449976438093162, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),language.name,=,T\u00fcrk\u00e7e), company.name),company.name))", "score": -0.25681281113633403, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,T\u00fcrk\u00e7e),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id), company.name),company.name))", "score": -0.2645517222009996, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id),language.name,<=,T\u00fcrk\u00e7e), company.name),company.name))", "score": -0.2675251385618525, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),language.name,>=,T\u00fcrk\u00e7e), company.name),company.name))", "score": -0.2807864956863234, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),spoken_language.movie_id,movie.id),language.name,>=,T\u00fcrk\u00e7e), company.name),company.name))", "score": -0.28190415568274385, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),language.name,=,T\u00fcrk\u00e7e), company.name),company.name))", "score": -0.28294313665232207, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),movie.original_language,>=,T\u00fcrk\u00e7e), company.name),company.name))", "score": -0.28766643352545823, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,T\u00fcrk\u00e7e),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(production_company),getData(company),production_company.company_id,company.id),language.iso_639_1,movie.id), company.name),company.name))", "score": -0.2900336795532013, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,T\u00fcrk\u00e7e),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(production_company),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id), company.name),company.name))", "score": -0.29291047480527294, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),language.name,=,T\u00fcrk\u00e7e), company.name),company.name))", "score": -0.29967804441577334, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(language),language.name,!=,T\u00fcrk\u00e7e),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),merge(getData(production_company),getData(company),production_company.company_id,company.id),language.iso_639_1,production_company.company_id), company.name),company.name))", "score": -0.3039012546722163, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}, {"orig_question": "Are there names of companies that produced movies translated in any language except \"T\u00fcrk\u00e7e\" and that have a vote average smaller or equal than 1.9 ?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(company),production_company.company_id,company.id),movie.original_language,=,1.9), company.name),company.name))", "score": -0.30997948028086064, "correct_code": "isEmpty(extractValues(distinct(filter(merge(merge(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,!=,T\u00fcrk\u00e7e),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.vote_average,<=,1.9), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 150, "beams": [{"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))", "score": -0.09477647001040168, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))", "score": -0.41633954613644164, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.release_date))", "score": -0.4911158110771794, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.id),movie.runtime)", "score": -0.5377826488529116, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,2001-05-11), movie.runtime),movie.runtime))", "score": -0.5986186547961552, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.release_date,=,2001-05-11),movie.runtime),movie.runtime))", "score": -0.6179068276833277, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.title))", "score": -0.6407572056923527, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,2001-05-11), movie.runtime),movie.runtime))", "score": -0.7029505654063541, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.id))", "score": -0.7048985984001774, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,>=,2001-05-11), movie.runtime),movie.runtime))", "score": -0.7262932757439557, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<=,2001-05-11), movie.runtime),movie.runtime))", "score": -0.7268037299218122, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.status))", "score": -0.772273304668488, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.release_date,=,2001-05-11),getData(movie),person.id,crew.person_id),movie.runtime),movie.runtime))", "score": -0.7896894721842225, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,2001-05-11), movie.runtime),movie.runtime))", "score": -0.8155374059278984, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}, {"orig_question": "What is the runtime of movies released on May 11, 2001?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime)", "score": -0.8299940701700891, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,2001-05-11), movie.runtime),movie.runtime))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 151, "beams": [{"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.01379419846489327, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,movie.id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.48549497197563307, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.5052481587964083, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.status,movie.id),movie.id,movie.id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.5390646001665607, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,movie.id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.5720342509563251, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),movie.popularity,movie.id),movie.id,movie.id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.5853051347863057, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.5854685981557995, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,movie.id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.5861468661448399, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),crew.movie_id,movie.id),movie.id,movie.id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.5882283549454949, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,movie.id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.5917874377771002, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.6052217849765748, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),country.iso_3166_1,movie.id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.6059000529656151, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),movie.id,movie.id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.6100029997929924, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.status,=,Post Production), movie.title),movie.title))", "score": -0.6133809274841118, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of the movies which have a Post Production status?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,Post Production), movie.title),movie.title))", "score": -0.7452253472947632, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,Post Production), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 152, "beams": [{"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),person.name))", "score": -0.22336899432021476, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),person.birth_day))", "score": -0.23549648958109226, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.name))", "score": -0.2589245276971189, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.birth_day),person.birth_day))", "score": -0.2710520229579964, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.release_date,>,Released), person.birth_day),person.name))", "score": -0.29689443299437984, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.release_date,>,Released), person.birth_day),person.birth_day))", "score": -0.2992523316278936, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.release_date,>,Released), oscar.year),person.name))", "score": -0.3113029151982247, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.release_date,>,Released), oscar.year),person.birth_day))", "score": -0.31366081383173844, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.release_date,>=,Released), person.birth_day),person.name))", "score": -0.31584946333066116, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.release_date,>=,Released), person.birth_day),person.birth_day))", "score": -0.31820736196417493, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), oscar.year),person.name))", "score": -0.32669620677777395, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.release_date,>=,Released), oscar.year),person.name))", "score": -0.330257945534506, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.release_date,>=,Released), oscar.year),person.birth_day))", "score": -0.33261584416801976, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.release_date,=,Released),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), oscar.year),person.birth_day))", "score": -0.3388237020386514, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}, {"orig_question": "What are the people's birth days who were nominated for an oscar for movies that have already been released?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.release_date,=,Released), person.birth_day),person.name))", "score": -0.34135530436942463, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id),movie.status,=,Released), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 153, "beams": [{"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))", "score": -0.033106326158304, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,149), movie.budget),movie.budget))", "score": -0.3189971288993547, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.title),movie.budget))", "score": -0.4553424520745466, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,<=,149), movie.budget),movie.budget))", "score": -0.4741086867034028, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.vote_count),movie.budget))", "score": -0.5546881361260603, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<=,149), movie.budget),movie.budget))", "score": -0.6557393875300477, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), person.death_day),movie.budget))", "score": -0.6594499154343794, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.title))", "score": -0.6733786857548694, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.vote_count))", "score": -0.7119727528515796, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.release_date))", "score": -0.735096732420061, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.release_date),movie.budget))", "score": -0.7355056805863569, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,149), movie.title),movie.budget))", "score": -0.7412332548155973, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,149), movie.budget),movie.budget))", "score": -0.7469532033755968, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,>=,149), movie.budget),movie.budget))", "score": -0.7599994894444535, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}, {"orig_question": "Which budgets do movies with votes less than or equal 149 have?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.revenue))", "score": -0.770241836351488, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,149), movie.budget),movie.budget))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 154, "beams": [{"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,>=,Sloven\u0161?ina), company.name),company.name))", "score": -0.11253856029349589, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,!=,2013-02-13), company.name),company.name))", "score": -0.19658015194857675, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,<=,2013-02-13), company.name),company.name))", "score": -0.19915552623953678, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,!=,2013-02-13),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.22152196246726347, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,=,Sloven\u0161?ina), company.name),company.name))", "score": -0.22947762243916062, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,Sloven\u0161?ina),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.25492809456181725, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,>=,2013-02-13), company.name),company.name))", "score": -0.2880011934589397, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,!=,2013-02-13),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.2989628752806536, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.original_language,!=,Sloven\u0161?ina),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3482444257479489, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,<=,Sloven\u0161?ina), company.name),company.name))", "score": -0.3601824403422467, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,<,2013-02-13), company.name),company.name))", "score": -0.3606838009661176, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,!=,2013-02-13), company.name),company.name))", "score": -0.36245911751937193, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,>=,2013-02-13), company.name),company.name))", "score": -0.3640885365523707, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,>=,2013-02-13), company.name),company.name))", "score": -0.36523706962355595, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}, {"orig_question": "How many companies produced movies with a spoken language other than Sloven\u0161?ina and a release date of 2013-02-13 or before?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.original_language,>=,Sloven\u0161?ina), company.name),company.name))", "score": -0.38392511386908623, "correct_code": "count(extractValues(distinct(filter(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),spoken_language.movie_id,movie.id),movie.release_date,<=,2013-02-13),language.name,!=,Sloven\u0161?ina), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 155, "beams": [{"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,>=,1986-11-27),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.14396054089536464, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,>=,1986-11-27),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.163003018983379, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,>,1986-11-27),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.18493945606141676, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,>,1986-11-27),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.20398193414943108, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.death_day,>=,1986-11-27),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.popularity)", "score": -0.24015355023438853, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,>=,1986-11-27), movie.id),movie.popularity)", "score": -0.25645960858681804, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id),person.birth_day,>=,1986-11-27), movie.id),movie.popularity)", "score": -0.27924370000190596, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.death_day,<=,1986-11-27),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.id),movie.popularity)", "score": -0.2915708652127323, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.death_day,>=,1986-11-27),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.popularity),movie.popularity)", "score": -0.2955426636833692, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,<=,1986-11-27),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.popularity),movie.popularity)", "score": -0.33768832731803805, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(merge(filter(getData(person),person.death_day,<=,1986-11-27),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id), movie.popularity),movie.popularity)", "score": -0.34695997866171296, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.death_day,<=,1986-11-27),getData(cast),person.id,cast.person_id),getData(movie),cast.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.3567308054060524, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.gender,>=,1986-11-27), movie.id),movie.popularity)", "score": -0.36460339375710293, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,>=,1986-11-27), movie.popularity),movie.popularity)", "score": -0.4210913695290071, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}, {"orig_question": "What is the average popularity of movies that have a cast member who died on or after November 27th 1986?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.birth_day,<=,1986-11-27), movie.id),movie.popularity)", "score": -0.4379415723505043, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(cast),getData(movie),cast.movie_id,movie.id),person.id,cast.person_id),person.death_day,>=,1986-11-27), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 156, "beams": [{"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,best picture),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.06388500913340797, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,!=,best picture),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.17479662422995632, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,best picture),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.26021221382050813, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,best picture),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,oscar.id), person.birth_day),person.birth_day))", "score": -0.28465726739022956, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(oscar_winner),getData(person),oscar_winner.person_id,person.id),oscar.id,oscar_winner.oscar_id), person.birth_day),person.birth_day))", "score": -0.290355619584036, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,best picture),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.oscar_id,person.id), person.birth_day),person.birth_day))", "score": -0.2933244620122257, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.sub_category,!=,best picture),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.3476797693665215, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,best picture),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.movie_id,person.id), person.birth_day),person.birth_day))", "score": -0.3482160090537685, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id),oscar.category,!=,best picture), person.birth_day),person.birth_day))", "score": -0.3529224064858788, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.3543827510072319, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,best picture),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,movie.id), person.birth_day),person.birth_day))", "score": -0.3604481320793806, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,best picture),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.3711238380542238, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,!=,best picture),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.gender),person.birth_day))", "score": -0.38423417908564506, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,!=,best picture),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,oscar.id), person.birth_day),person.birth_day))", "score": -0.3955688916239452, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}, {"orig_question": "Are there birthday dates of Oscar winners except the category Oscar best picture?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(person),oscar_winner.person_id,person.id), person.birth_day),person.birth_day))", "score": -0.4128022908330499, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,!=,best picture),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),oscar_winner.movie_id,movie.id), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 157, "beams": [{"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.3715492300690309, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.3840426714132271, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),oscar.year,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.year)", "score": -0.3847915950002777, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),movie.runtime,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.4163403357008709, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Akbar Kurtha),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.42178960683416983, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),movie.runtime,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.4288337770450671, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),movie.runtime,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.year)", "score": -0.4295827006321177, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),oscar.year,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.43833270363404736, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),oscar.year,=,Akbar Kurtha),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.4414008665126306, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),person.name,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.4427522574547284, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(filter(merge(getData(oscar),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),oscar.year,=,Akbar Kurtha),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.4498998112949944, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),oscar.year,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.4508261449782435, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),oscar.year,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.year),oscar.year)", "score": -0.4512788999877915, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(movie),oscar.year,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.year)", "score": -0.4515749619482357, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}, {"orig_question": "Find the average oscar years of oscars in which a personality named Akbar Kurtha was nominated for the Oscar.", "inferred_code": "avg(distinct(merge(merge(filter(getData(oscar),person.name,=,Akbar Kurtha),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.year)", "score": -0.4552455921818662, "correct_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.id,oscar_nominee.person_id),person.name,=,Akbar Kurtha), oscar.id),oscar.year)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 158, "beams": [{"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.oscar_id),oscar.year,<=,1978), genre.name),genre.name))", "score": -0.15103906475904, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(genre),oscar_winner.person_id,genre.id),oscar.id,oscar_winner.oscar_id),oscar.year,<=,1978), genre.name),genre.name))", "score": -0.22809461086767555, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(genre),oscar_winner.oscar_id,genre.id),oscar.id,oscar_winner.oscar_id),oscar.year,<=,1978), genre.name),genre.name))", "score": -0.2308905973564255, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(genre),spoken_language.iso_639_1,genre.id),oscar.id,oscar_winner.oscar_id),oscar.year,<=,1978), genre.name),genre.name))", "score": -0.25782383006007353, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(genre),has_genre.genre_id,person.id),oscar.id,oscar_winner.oscar_id),oscar.year,<=,1978), genre.name),genre.name))", "score": -0.30882735070900147, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,<,1978),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.31526779363454616, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(genre),has_genre.genre_id,genre.id),oscar.year,<=,1978), genre.name),genre.name))", "score": -0.3187748266509481, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3519640375490629, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(genre),has_genre.genre_id,oscar.id),oscar.id,oscar_winner.oscar_id),oscar.year,<=,1978), genre.name),genre.name))", "score": -0.3540417681488708, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,oscar_winner.movie_id), genre.name),genre.name))", "score": -0.35439627096963267, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,<=,1978),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.36989548143474654, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.year,>,1978),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3723068961803392, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,=,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3764861711893269, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(merge(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),oscar.id,oscar_winner.movie_id), genre.name),genre.name))", "score": -0.37795573715279057, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}, {"orig_question": "How many different genre names do movies have who won an oscar before the year 1978 and had a revenue of less or equal to 2500000?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<=,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3819398085612164, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.year,<,1978),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),merge(filter(getData(movie),movie.revenue,<=,2500000),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),oscar_winner.movie_id,movie.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 159, "beams": [{"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,reference to family circus), person.death_place),person.gender))", "score": -0.29476256303485937, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,reference to family circus), movie.release_date),person.gender))", "score": -0.37754231342174593, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,reference to family circus),merge(getData(oscar_winner),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), person.birth_place),person.name))", "score": -0.3777387772618558, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,reference to family circus),merge(getData(oscar_winner),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), person.death_place),person.name))", "score": -0.3781166426073572, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(person),crew.person_id,person.id), person.gender),person.name))", "score": -0.3803341159936278, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,reference to family circus), person.death_place),person.name))", "score": -0.39266642224931725, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,reference to family circus), genre.name),person.gender))", "score": -0.3992371864388704, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,reference to family circus), person.death_place),movie.release_date))", "score": -0.3995186864464937, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),merge(getData(crew),getData(person),crew.person_id,person.id),keyword.id,crew.person_id), person.death_place),person.gender))", "score": -0.4060256182322968, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,reference to family circus),merge(getData(oscar_nominee),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), person.birth_place),person.name))", "score": -0.40700275077278253, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(keyword),keyword.name,=,reference to family circus),merge(getData(oscar_nominee),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id), person.death_place),person.name))", "score": -0.40738066841436665, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),merge(getData(crew),getData(person),crew.person_id,person.id),keyword.id,crew.person_id), person.death_place),person.name))", "score": -0.4077466300176552, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,reference to family circus), person.death_place),movie.status))", "score": -0.4078584996418642, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(keyword),merge(getData(has_keyword),merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),getData(person),crew.person_id,person.id),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,reference to family circus), oscar.category),person.gender))", "score": -0.4096327063999077, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}, {"orig_question": "Were there any crew members of movies with the keyword reference to family circus?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),merge(getData(crew),merge(getData(crew),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),crew.movie_id,crew.person_id),keyword.id,None), None),None))", "score": -0.4192782790926511, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(keyword),keyword.name,=,reference to family circus),getData(has_keyword),keyword.id,has_keyword.keyword_id),merge(getData(movie),merge(getData(crew),getData(person),crew.person_id,person.id),movie.id,crew.movie_id),has_keyword.movie_id,movie.id), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 160, "beams": [{"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Sky High), language.name),language.name))", "score": -0.21378949498897126, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Sky High), language.name),movie.original_language))", "score": -0.2162319561677964, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))", "score": -0.22890025075321319, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.original_language,=,Sky High), language.name),language.name))", "score": -0.259532949986225, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.original_language,=,Sky High), language.name),movie.original_language))", "score": -0.26197541116505013, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Sky High), language.name),language.name))", "score": -0.30281524860655984, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),language.name,=,Sky High), language.name),movie.original_language))", "score": -0.30525770978538497, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.status,=,Sky High), language.name),language.name))", "score": -0.3123635862354413, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.status,=,Sky High), language.name),movie.original_language))", "score": -0.31480604741426643, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Sky High),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3234698359624619, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Sky High), language.name),genre.name))", "score": -0.3728178938999271, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,=,Sky High), language.name),language.name))", "score": -0.37458418254674936, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.original_language,=,Sky High), movie.original_language),movie.original_language))", "score": -0.3753717511499417, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.vote_average,=,Sky High), language.name),movie.original_language))", "score": -0.3770266437255745, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}, {"orig_question": "What is the language of the movie Sky High?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Sky High),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.387331316898687, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Sky High), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 161, "beams": [{"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1981-01-18),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.06878459942208966, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id),person.birth_day,<=,1981-01-18), person.death_place),person.death_place))", "score": -0.15871951022299857, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1981-01-18),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_day))", "score": -0.2819436425056561, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,<=,1981-01-18),merge(getData(oscar_nominee),getData(person),oscar_nominee.person_id,person.id),person.id,oscar_nominee.person_id), person.death_place),person.death_place))", "score": -0.2988947271611409, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1981-01-18),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.3041402598929486, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id),person.birth_day,>=,1981-01-18), person.death_place),person.death_place))", "score": -0.3077677655908076, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>=,1981-01-18),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.32269407636448083, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id),person.birth_day,<=,1981-01-18), person.death_place),person.death_day))", "score": -0.33032551454718345, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<,1981-01-18),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.3326265072812129, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,=,1981-01-18),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_place),person.death_place))", "score": -0.3418763242398691, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id),person.birth_day,<,1981-01-18), person.death_place),person.death_place))", "score": -0.3505411738308033, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1981-01-18),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.death_day),person.death_place))", "score": -0.360767121120579, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id),person.birth_day,>,1981-01-18), person.death_place),person.death_place))", "score": -0.36366849891807573, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,<=,1981-01-18),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id), person.birth_place),person.death_place))", "score": -0.3641044709285372, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}, {"orig_question": "Show the place of death of all oscar nominees who were born on or before the 18-01-1981 and who's movie home page is other than http://www.hailcaesar-film.com/ww/", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(person),oscar_nominee.person_id,person.id),person.death_day,<=,1981-01-18), person.death_place),person.death_place))", "score": -0.37287282939653577, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.homepage,!=,http://www.hailcaesar-film.com/ww/),filter(getData(person),person.birth_day,<=,1981-01-18),oscar_nominee.person_id,person.id), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 162, "beams": [{"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), language.name),movie.original_language))", "score": -0.2073803005699597, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili),getData(movie),spoken_language.movie_id,movie.id), language.name),movie.original_language))", "score": -0.20781143899079063, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.22510192774532542, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), language.name),movie.title))", "score": -0.24191059282751487, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili),getData(movie),spoken_language.movie_id,movie.id), language.name),movie.title))", "score": -0.29882494847034496, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), language.name),movie.original_language))", "score": -0.30191043285181246, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.title))", "score": -0.3161154372248798, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),movie.original_language,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), language.name),movie.original_language))", "score": -0.3174686801496898, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(language),language.name,=,Kiswahili),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id), movie.original_language),movie.original_language))", "score": -0.3265773158007637, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), language.name),movie.original_language))", "score": -0.3274849537137024, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), language.name),genre.name))", "score": -0.33455487734856204, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), language.name),language.name))", "score": -0.33488556084773535, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(language),movie.original_language,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), language.name),movie.title))", "score": -0.351998972407245, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), language.name),movie.title))", "score": -0.3620152459712576, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}, {"orig_question": "How many movies were translated to the language Kiswahili?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Kiswahili),merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),spoken_language.movie_id,movie.id), language.name),movie.original_language))", "score": -0.4410029065520635, "correct_code": "count(extractValues(distinct(merge(filter(getData(language),language.name,=,Kiswahili),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 163, "beams": [{"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,!=,Algeria),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.09202616425935536, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),country.name,!=,Algeria),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.22239261163676843, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.24798200260655154, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,!=,Algeria), movie.title),movie.title))", "score": -0.2897189607939914, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),country.name,!=,Algeria),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.29818082114410704, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(company),country.name,!=,Algeria),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.30255620341750117, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,!=,Algeria),getData(production_country),country.iso_3166_1,spoken_language.iso_639_1),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.3122488938919956, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,!=,Algeria),getData(production_country),movie.id,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.3181635650382034, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,!=,Algeria),getData(production_country),country.iso_3166_1,crew.person_id),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.32074246793705014, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,!=,Algeria),getData(production_country),person.id,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.3388657945405994, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,!=,Algeria),getData(production_country),country.iso_3166_1,production_country.movie_id),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.34143617384676067, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(language),country.name,!=,Algeria),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.34181323096201127, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(country),country.name,=,Algeria),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.35142499077676004, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(genre),country.name,!=,Algeria),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.35997795225610285, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}, {"orig_question": "What are the movie titles of movies that weren't produced in Algeria? ", "inferred_code": "done(extractValues(distinct(merge(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria),getData(movie),production_country.movie_id,movie.id),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3767212996836444, "correct_code": "done(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Algeria), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 164, "beams": [{"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303), company.name),company.name))", "score": -0.041858455511953684, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,495303), company.name),company.name))", "score": -0.17108038463412284, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>=,495303), company.name),company.name))", "score": -0.19067796715683036, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303), company.name),movie.title))", "score": -0.3395785982962438, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303),production_company.movie_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303), company.name),company.name))", "score": -0.3413493403294492, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.revenue,!=,495303), company.name),company.name))", "score": -0.3556283874723943, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,>,495303), company.name),company.name))", "score": -0.3573055210787308, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303),company.id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303), company.name),company.name))", "score": -0.35837988851098956, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303), company.name),company.name))", "score": -0.36131109714769094, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303), company.name),production_company.company_id))", "score": -0.3630032384935648, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(production_company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303), company.name),company.name))", "score": -0.4193220517716045, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,<,495303), company.name),company.name))", "score": -0.42163823176046206, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(genre),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303), company.name),company.name))", "score": -0.4296667516775798, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,!=,495303), movie.title),company.name))", "score": -0.4377886832096693, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}, {"orig_question": "How many production companies have not created a movie with a revenue of 495303?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,null,495303), company.name),company.name))", "score": -0.44313962338952423, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,495303),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 165, "beams": [{"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip), movie.id),movie.budget)", "score": -0.08291458079345863, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,shqip), movie.id),movie.budget)", "score": -0.20719549332545073, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,shqip), movie.id),movie.budget)", "score": -0.2648287604700597, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip), movie.id),movie.revenue)", "score": -0.37553809857137443, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,=,shqip), movie.id),movie.budget)", "score": -0.38072545044382716, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),genre.id,spoken_language.iso_639_1),language.name,=,shqip), movie.id),movie.budget)", "score": -0.44451417108208924, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),movie.original_language,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip), movie.id),movie.budget)", "score": -0.4546042732388947, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(merge(getData(language),getData(spoken_language),genre.id,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,shqip), movie.id),movie.budget)", "score": -0.4584916345282345, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip), movie.id),movie.budget)", "score": -0.46444705118340374, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,shqip), movie.id),movie.budget)", "score": -0.46676949198396356, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,shqip), movie.id),movie.budget)", "score": -0.46865145022070775, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),has_genre.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip), movie.id),movie.budget)", "score": -0.47101850926775524, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip), movie.id),movie.budget)", "score": -0.47827058428212194, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(filter(getData(movie),movie.original_language,=,shqip),movie.budget)", "score": -0.48025153268648463, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}, {"orig_question": "Whats the average budget for movies with shqip as language ?", "inferred_code": "avg(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,has_genre.genre_id),language.name,=,shqip), movie.id),movie.budget)", "score": -0.48243031162263106, "correct_code": "avg(distinct(merge(filter(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),language.name,=,shqip),getData(movie),spoken_language.movie_id,movie.id), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 166, "beams": [{"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.06434227594918261, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.2551048673076957, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(production_company),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3245180891813716, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.popularity)", "score": -0.3525883868205318, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(crew),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3740783618474703, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(has_genre),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3754360915223743, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(movie),country.name,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3840346537831056, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.38545513003907783, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(language),country.name,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.38858222066418513, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),movie.status,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4000413943108142, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(company),country.name,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.40222179992290596, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.4159872372163771, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,!=,Italy), movie.id),movie.revenue)", "score": -0.4247984060588203, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,!=,Italy), movie.id),movie.revenue)", "score": -0.4320060817049382, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}, {"orig_question": "What is the average revenue of all produced movies except the movies produced in Italy?", "inferred_code": "avg(distinct(merge(filter(getData(country),country.name,!=,Italy),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.vote_average)", "score": -0.437119326850365, "correct_code": "avg(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Italy), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 167, "beams": [{"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.2759717862615299, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic), movie.title),movie.title))", "score": -0.29077491896807706, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3160381298175477, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic), movie.title),movie.title))", "score": -0.3268145516522084, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3294242061927497, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),person.name,=,Kyrgyz Republic), movie.title),movie.title))", "score": -0.34565437615284317, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Kyrgyz Republic),merge(getData(production_company),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.35258516878453916, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Kyrgyz Republic), movie.title),movie.title))", "score": -0.35483990732487874, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3694905497487675, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),person.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3746317513752629, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.38548620110907267, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),country.name,=,Kyrgyz Republic),merge(getData(production_company),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3926515123405569, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),crew.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3950333846687286, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,crew.person_id), movie.title),movie.title))", "score": -0.3959752881769541, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies are produced from Kyrgyz republic?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Kyrgyz Republic),merge(getData(crew),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.40428424714083266, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Kyrgyz Republic),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 168, "beams": [{"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(keyword),keyword.name,!=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.vote_average),movie.vote_average))", "score": -0.09103332086353763, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),movie.budget),movie.vote_average))", "score": -0.15407672526843177, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(keyword),keyword.name,=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.vote_average),movie.vote_average))", "score": -0.26392372295296923, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),movie.vote_average),movie.vote_average))", "score": -0.29960102240505226, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(keyword),keyword.name,!=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.vote_count),movie.vote_average))", "score": -0.3096677333792422, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),keyword.name,!=,tape recorder),movie.budget),movie.vote_average))", "score": -0.3349855318066933, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),getData(movie),keyword.id,has_keyword.keyword_id),movie.vote_average),movie.vote_average))", "score": -0.3354344247613615, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(keyword),keyword.name,!=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,has_keyword.keyword_id),movie.vote_average),movie.vote_average))", "score": -0.35254884528675123, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),getData(movie),has_keyword.movie_id,movie.id),getData(has_keyword),keyword.id,has_keyword.keyword_id),movie.vote_average),movie.vote_average))", "score": -0.36953469293520597, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,!=,tape recorder),movie.revenue),movie.vote_average))", "score": -0.4071002746508709, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(filter(merge(getData(keyword),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),keyword.name,=,tape recorder),movie.budget),movie.vote_average))", "score": -0.40933075659371543, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(getData(keyword),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.vote_average),movie.vote_average))", "score": -0.4125689994536389, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(keyword),keyword.name,<,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.vote_average),movie.vote_average))", "score": -0.41283152510742166, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(has_keyword),keyword.name,!=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.vote_average),movie.vote_average))", "score": -0.41546158132994476, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}, {"orig_question": "What is the vote average of the movie with a maximum budget without the keyword name tape recorder?", "inferred_code": "done(extractValues(max(merge(merge(filter(getData(keyword),keyword.name,!=,tape recorder),getData(has_keyword),keyword.id,has_keyword.keyword_id),getData(movie),has_keyword.movie_id,movie.id),movie.title),movie.vote_average))", "score": -0.4292448694733068, "correct_code": "done(extractValues(max(merge(filter(getData(keyword),keyword.name,!=,tape recorder),merge(getData(has_keyword),getData(movie),has_keyword.movie_id,movie.id),keyword.id,has_keyword.keyword_id),movie.budget),movie.vote_average))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 169, "beams": [{"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.gender), person.gender))", "score": -0.2894483695272356, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.gender), person.gender))", "score": -0.33155702450312674, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.gender))", "score": -0.3507562766317278, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.gender))", "score": -0.39286493160761893, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.gender),person.gender))", "score": -0.472737398580648, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.gender), person.birth_day))", "score": -0.48129320167936385, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.birth_day), person.gender))", "score": -0.5165449271444231, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.gender), person.birth_day))", "score": -0.523401856655255, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.gender), person.id))", "score": -0.5348268749658018, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,!=,f),person.name), person.birth_day))", "score": -0.542601108783856, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.birth_day), person.gender))", "score": -0.5586535821203142, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.name),person.gender))", "score": -0.5768270833650604, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.gender), person.id))", "score": -0.576935529941693, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.gender,=,f), person.gender),person.gender))", "score": -0.5784592857817188, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}, {"orig_question": "Are there female persons?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.birth_day))", "score": -0.5847097637597471, "correct_code": "isEmpty(distinct(extractValues(filter(getData(person),person.gender,=,f),person.name), person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 170, "beams": [{"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))", "score": -0.22023756502540848, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.sub_category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))", "score": -0.26575319555413845, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special effects),movie.runtime),movie.popularity))", "score": -0.26744928766970993, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special effects),movie.runtime),movie.popularity))", "score": -0.2815211588447489, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.sub_category,=,special effects),movie.runtime),movie.popularity))", "score": -0.31919616409704615, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime),movie.popularity))", "score": -0.32486680721229333, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special effects),movie.runtime),movie.popularity))", "score": -0.3301658994090536, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,special effects),movie.runtime),movie.popularity))", "score": -0.3412147004209284, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_winner.movie_id,movie.id),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,special effects),movie.runtime),movie.popularity))", "score": -0.3552865715959673, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special effects),movie.runtime),movie.popularity))", "score": -0.36022276619891097, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),oscar.category,=,special effects), movie.runtime),movie.popularity))", "score": -0.36390279299209455, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(oscar),oscar.sub_category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.runtime),movie.popularity))", "score": -0.3703824377410233, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_winner.oscar_id),oscar.sub_category,=,special effects),movie.runtime),movie.popularity))", "score": -0.3742946794602964, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,special effects),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id), movie.runtime),movie.popularity))", "score": -0.4032141198903864, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}, {"orig_question": "How much is the movie popularity from the movie with the shortest runtime in the oscar category special effects?", "inferred_code": "done(extractValues(min(merge(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))", "score": -0.4036511145302398, "correct_code": "done(extractValues(min(merge(filter(merge(getData(oscar),getData(oscar_winner),oscar.id,oscar_winner.oscar_id),oscar.category,=,special effects),getData(movie),oscar_winner.movie_id,movie.id),movie.runtime),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 171, "beams": [{"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1947-09-04),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.0859963885301964, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.15612094397136436, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,1947-09-04),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.19453344588005556, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.death_day,>,1947-09-04), movie.title),movie.title))", "score": -0.204703307854597, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1947-09-04),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.22088456084840638, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))", "score": -0.2782145172466564, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04),person.death_day,>,1947-09-04), movie.title),movie.title))", "score": -0.29578259135568297, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),person.birth_day,>,1947-09-04),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.34992206024800043, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id),person.birth_day,>,1947-09-04), movie.title),movie.title))", "score": -0.3518814763548878, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(filter(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04),person.birth_day,>,1947-09-04), movie.title),movie.title))", "score": -0.38040466453033883, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1947-09-04), movie.title),movie.title))", "score": -0.39796700001170393, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(person),getData(oscar_winner),person.id,crew.person_id),person.death_day,>,1947-09-04),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.400978945276653, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,1947-09-04),merge(getData(oscar_winner),getData(movie),production_country.movie_id,movie.id),person.id,oscar_winner.person_id), movie.title),movie.title))", "score": -0.4051347196210964, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.birth_day,>,1947-09-04), movie.title),movie.title))", "score": -0.4189811660551328, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}, {"orig_question": "What movies have an oscar winner that died after 1947-09-04?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1947-09-04),getData(oscar_winner),person.id,oscar_winner.person_id),getData(movie),oscar_winner.movie_id,movie.id), movie.title),movie.title))", "score": -0.43010960140952725, "correct_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(movie),oscar_winner.movie_id,movie.id),person.id,oscar_winner.person_id),person.death_day,>,1947-09-04), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 172, "beams": [{"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "score": -0.01012208058818942, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),language.name))", "score": -0.6419603037866182, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,>,1100000), movie.original_language),movie.original_language))", "score": -0.6504596983068041, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<=,1100000), movie.original_language),movie.original_language))", "score": -0.6643580709569505, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),spoken_language.iso_639_1))", "score": -0.7119165468247957, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.revenue,<,1100000), movie.original_language),movie.original_language))", "score": -0.7365297898868448, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),spoken_language.movie_id))", "score": -0.7458656239541597, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))", "score": -0.7732545410472085, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.popularity))", "score": -0.7933820891412324, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,=,1100000), movie.original_language),movie.original_language))", "score": -0.8045961176030687, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,!=,1100000), movie.original_language),movie.original_language))", "score": -0.813655248748546, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), language.name),movie.original_language))", "score": -0.8374841264667339, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,1100000), movie.original_language),movie.original_language))", "score": -0.8534925207713968, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,<,1100000), movie.original_language),movie.original_language))", "score": -0.8562075123409159, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}, {"orig_question": "What are the original languages of movies with a budget less than 1100000?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), spoken_language.movie_id),movie.original_language))", "score": -0.8818290285053081, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.budget,<,1100000), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 173, "beams": [{"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>,8),getData(person),oscar_nominee.person_id,person.id), oscar.year),oscar.category))", "score": -0.4265783577464533, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),oscar.category))", "score": -0.4267371880951428, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),oscar.number))", "score": -0.42795220762585223, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>,8),getData(person),oscar_nominee.person_id,person.id), oscar.year),oscar.category))", "score": -0.449088932024977, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>,8),getData(person),oscar_nominee.person_id,person.id), oscar.year),oscar.number))", "score": -0.4501477358980602, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),movie.vote_average,>,8),getData(person),oscar_nominee.person_id,person.id), oscar.year),oscar.number))", "score": -0.45940570795376034, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),oscar.category))", "score": -0.45970632223585184, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.category))", "score": -0.46430792816968863, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),person.name))", "score": -0.46445598182872433, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),oscar.category))", "score": -0.4676478812234563, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,person.id),movie.id,oscar_nominee.movie_id), person.death_day),oscar.number))", "score": -0.46886290075416565, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), oscar.number),oscar.category))", "score": -0.4731276830123936, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.category))", "score": -0.4740994789019314, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), oscar.number),oscar.number))", "score": -0.47434270254310296, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}, {"orig_question": "What are the names of oscar nominees in movies with a vote average greater than 8?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.vote_average,>,8),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.person_id,person.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.number))", "score": -0.47531449843264073, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,>,8),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(person),oscar_nominee.person_id,person.id), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 174, "beams": [{"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,=,it), keyword.name),keyword.name))", "score": -0.05826048323654082, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,=,it), keyword.name),keyword.name))", "score": -0.23382724487933593, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,=,it), oscar.number),keyword.name))", "score": -0.2428912736950885, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,it), keyword.name),keyword.name))", "score": -0.25754133706505916, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,=,it), keyword.name),oscar.number))", "score": -0.27482171789747295, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,!=,it), keyword.name),keyword.name))", "score": -0.3378854795488159, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.status,=,it), keyword.name),keyword.name))", "score": -0.34457008911489484, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(oscar),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,=,it), keyword.name),keyword.name))", "score": -0.3456914803690134, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,oscar.id),movie.id,has_keyword.movie_id),movie.original_language,=,it), keyword.name),keyword.name))", "score": -0.34842839285600247, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,keyword.id),movie.original_language,=,it), keyword.name),keyword.name))", "score": -0.36502684391035345, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,=,it), oscar.number),keyword.name))", "score": -0.3950031771438333, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),language.name,=,it), keyword.name),keyword.name))", "score": -0.4023972607124662, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.original_language,=,it), keyword.name),has_keyword.keyword_id))", "score": -0.41059781798462525, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.title,=,it), keyword.name),keyword.name))", "score": -0.4119613897632435, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}, {"orig_question": "How many keywords are associated to italian speaking movies?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.4182547123608932, "correct_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,it),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 175, "beams": [{"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,cs), movie.status),movie.status))", "score": -0.025671899231383577, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.vote_count,=,cs), movie.status),movie.status))", "score": -0.4571648006385658, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.budget,=,cs), movie.status),movie.status))", "score": -0.5470955436176155, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))", "score": -0.5902973477786873, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,cs), movie.status),movie.popularity))", "score": -0.6558011394517962, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.title,=,cs), movie.popularity),movie.status))", "score": -0.6718633305572439, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(oscar_winner),getData(movie),movie.popularity,movie.id),movie.id,spoken_language.movie_id), movie.status),movie.status))", "score": -0.6843387398142187, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),language.name,=,cs), movie.status),movie.status))", "score": -0.6892907761875756, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),language.name,=,cs), movie.status),movie.status))", "score": -0.7040890532716756, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),language.name,=,cs), movie.status),movie.status))", "score": -0.7153739975977992, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.iso_639_1),language.name,=,cs), movie.status),movie.status))", "score": -0.7154540679793979, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.status),movie.status))", "score": -0.7170660784644721, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),language.name,=,cs), movie.status),movie.status))", "score": -0.7301722422864877, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),language.name,=,cs), movie.status),movie.status))", "score": -0.7302523126680864, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}, {"orig_question": "How many different status do movies have with the original_language cs?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,cs),merge(getData(oscar_winner),getData(movie),movie.popularity,movie.id),movie.id,movie.popularity), movie.status),movie.status))", "score": -0.7307395536390903, "correct_code": "count(extractValues(distinct(filter(getData(movie),movie.original_language,=,cs), movie.status),movie.status))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 176, "beams": [{"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.20421210198137515, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),production_company.movie_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.2710389162186271, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.movie_id), company.name),company.name))", "score": -0.27110745472673903, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),crew.movie_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.28048032024789354, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),production_company.movie_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.2862864928289324, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),merge(getData(production_company),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),crew.movie_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.2957278968581989, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),production_company.movie_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.29581741952943674, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,production_company.company_id),getData(company),production_company.company_id,company.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.30996216068287347, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),production_company.movie_id,production_company.movie_id),person.id,production_company.company_id), company.name),company.name))", "score": -0.32151245428215686, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.death_day,>,2017-08-13),merge(getData(production_company),merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),crew.movie_id,production_company.movie_id),person.id,production_company.company_id), company.name),company.name))", "score": -0.3309538767861381, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(production_company),person.id,crew.person_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.3383722410640538, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),crew.movie_id,production_company.movie_id),getData(company),production_company.company_id,company.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.33929102410219286, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(production_company),person.id,crew.person_id),getData(company),production_company.company_id,company.id),person.death_day,>,2017-08-13), company.name),company.name))", "score": -0.3443494125243027, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,2017-08-13),merge(getData(production_company),getData(company),production_company.company_id,company.id),person.id,production_company.company_id), company.name),company.name))", "score": -0.3598628988166287, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}, {"orig_question": "Which companies produced movies, which employed a person that died after 2017-08-13?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(merge(getData(person),getData(crew),person.id,crew.person_id),merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),crew.movie_id,production_company.movie_id),getData(company),production_company.company_id,company.id),person.death_day,>=,2017-08-13), company.name),company.name))", "score": -0.393196997576528, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.death_day,>,2017-08-13),getData(crew),person.id,crew.person_id),merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),crew.movie_id,movie.id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 177, "beams": [{"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(country),getData(has_keyword),country.iso_3166_1,production_country.iso_3166_1),keyword.name,=,South Africa),getData(movie),production_country.movie_id,movie.id),movie.vote_average),movie.popularity))", "score": -0.3299190095530442, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(merge(filter(getData(country),keyword.name,=,South Africa),merge(getData(has_keyword),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))", "score": -0.3496545309213949, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(merge(filter(getData(country),keyword.name,=,South Africa),merge(getData(production_company),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))", "score": -0.39229811828818206, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(country),getData(has_keyword),country.iso_3166_1,production_country.iso_3166_1),oscar.number,=,South Africa),getData(movie),production_country.movie_id,movie.id),movie.vote_average),movie.popularity))", "score": -0.3976754135050198, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(merge(filter(merge(getData(country),getData(production_company),country.iso_3166_1,production_country.iso_3166_1),keyword.name,=,South Africa),getData(movie),production_country.movie_id,movie.id),movie.vote_average),movie.popularity))", "score": -0.4330014588951812, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(merge(filter(getData(movie),keyword.name,=,South Africa),merge(getData(has_keyword),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))", "score": -0.43723841960107235, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),keyword.name,=,South Africa),getData(has_keyword),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.vote_average),movie.popularity))", "score": -0.43755445359280654, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(company),keyword.name,=,South Africa),getData(has_keyword),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.vote_average),movie.popularity))", "score": -0.4573336904775962, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(merge(merge(filter(getData(movie),keyword.name,=,South Africa),getData(oscar_winner),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),movie.vote_average),movie.popularity))", "score": -0.458778448298056, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(country),getData(has_keyword),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),keyword.name,=,South Africa),movie.vote_average),movie.popularity))", "score": -0.46193066258755733, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(merge(filter(getData(country),oscar.number,=,South Africa),merge(getData(has_keyword),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))", "score": -0.4701478733481476, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(filter(merge(getData(country),merge(getData(has_keyword),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),keyword.name,=,South Africa),movie.vote_average),movie.popularity))", "score": -0.47306447047573696, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),keyword.name,=,South Africa),merge(getData(has_keyword),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.vote_average),movie.popularity))", "score": -0.49816214152849275, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(min(filter(merge(merge(getData(country),getData(has_keyword),country.iso_3166_1,production_country.iso_3166_1),merge(getData(movie),getData(movie),movie.id,production_country.movie_id),production_country.movie_id,movie.id),keyword.name,=,South Africa),movie.vote_average),movie.popularity))", "score": -0.5205613105462944, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}, {"orig_question": "What is the movie popularity of movies with a minimum vote average that were produced in the country called Souft Africa?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(country),keyword.name,=,South Africa),merge(getData(production_company),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.vote_average),movie.popularity))", "score": -0.5218833154774738, "correct_code": "done(extractValues(min(merge(filter(getData(country),country.name,=,South Africa),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.vote_average),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 178, "beams": [{"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,136),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.04001879245780535, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.runtime,=,136),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.20252081857211987, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.runtime,=,136), country.name),country.name))", "score": -0.244352229706871, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))", "score": -0.25397428244217635, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,136),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.32140372582782356, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3466488555936245, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,136),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),movie.status))", "score": -0.35401734815096264, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),getData(country),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.37487579695137124, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),getData(country),production_country.iso_3166_1,production_country.movie_id), country.name),country.name))", "score": -0.3794825649570172, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),getData(country),movie.id,country.iso_3166_1), country.name),country.name))", "score": -0.38754616939381675, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.3921529373994627, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,136),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.name), country.name),country.name))", "score": -0.3936611105937709, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,136),getData(country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.39801033772167055, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,136),getData(oscar_winner),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.40915699960388435, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}, {"orig_question": "Are there countries in which movies with a runtime of 136 minutes were produced?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,=,136),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), movie.status),country.name))", "score": -0.4269713533100099, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.runtime,=,136), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 179, "beams": [{"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,>,135), oscar.id),oscar.number)", "score": -0.12355161635054708, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.14810795509542388, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,>,135), oscar.id),oscar.number)", "score": -0.24839834329641436, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(getData(oscar),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,>,135), oscar.id),oscar.number)", "score": -0.2681616113154481, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,>,135), oscar.id),oscar.number)", "score": -0.28141533246094286, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,>,135), oscar.id),oscar.number)", "score": -0.28840091388453853, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.310621597881925, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,>,135), oscar.number),oscar.number)", "score": -0.3158622579069719, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(movie),getData(oscar_nominee),oscar.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,>,135), oscar.id),oscar.number)", "score": -0.3214179030490671, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,>,135), oscar.category),oscar.number)", "score": -0.35186927937336815, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id),movie.runtime,>,135), oscar.id),oscar.category)", "score": -0.35286928896847325, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(oscar),getData(oscar_nominee),movie.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.runtime,>,135), oscar.id),oscar.number)", "score": -0.358731298794947, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.number)", "score": -0.3606172868321809, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),movie.runtime,>,135),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), movie.id),oscar.number)", "score": -0.3680689484127306, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of movies nominated for the oscar with a runtime over 135 ?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.id,oscar_nominee.movie_id),movie.runtime,>,135), oscar.id),oscar.number)", "score": -0.3838113060165236, "correct_code": "sum(distinct(merge(merge(filter(getData(movie),movie.runtime,>=,135),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 180, "beams": [{"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.06652897059393581, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.birth_place),person.death_place))", "score": -0.24336450196278747, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.3638569466061461, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.3659857493204601, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,crew.person_id),getData(person),cast.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.369542311401422, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.37167111411573606, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1909-11-09),getData(crew),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_place),person.death_place))", "score": -0.4111692692992651, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.41439306063967946, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.42614653183598183, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.42793329876535413, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,cast.person_id),getData(person),crew.person_id,person.id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.4282753345502958, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.4299676907292946, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1909-11-09),getData(cast),person.id,cast.person_id),getData(person),cast.person_id,person.id), person.death_place),person.death_place))", "score": -0.43615356800937566, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1909-11-09),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id), person.death_place),person.death_place))", "score": -0.44078522802469783, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}, {"orig_question": "Where died those people who were born after 1909-11-09?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1909-11-09), person.death_place),person.death_place))", "score": -0.4435079050256522, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1909-11-09), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 181, "beams": [{"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.021533053331950214, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Fast Five), language.name),movie.original_language))", "score": -0.2953332515295186, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Fast Five), movie.original_language),movie.original_language))", "score": -0.40922674186173985, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_genre.movie_id),movie.title,=,Fast Five), language.name),movie.original_language))", "score": -0.4616313391336857, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Fast Five),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.48318586858225565, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Fast Five), language.name),language.name))", "score": -0.48378482436692155, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Fast Five), language.name),movie.original_language))", "score": -0.48677694596664445, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),has_genre.genre_id,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Fast Five), language.name),movie.original_language))", "score": -0.5018058102664035, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Fast Five), language.name),genre.name))", "score": -0.5116913857891454, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,genre.id),movie.id,spoken_language.movie_id),movie.title,=,Fast Five), language.name),movie.original_language))", "score": -0.5179114410026512, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Fast Five), genre.name),movie.original_language))", "score": -0.5375206338192933, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.iso_639_1),movie.title,=,Fast Five), language.name),movie.original_language))", "score": -0.544026021171099, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.title,=,Fast Five), language.name),movie.original_language))", "score": -0.5488763378898006, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(genre),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.title,=,Fast Five), language.name),movie.original_language))", "score": -0.5576166265298719, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}, {"orig_question": "Find the original language of the movie having the title Fast Five.", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,movie.id),movie.id,spoken_language.movie_id),movie.title,=,Fast Five), language.name),movie.original_language))", "score": -0.575003472666744, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,=,Fast Five), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 182, "beams": [{"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.10226116372364685, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.11362706445971482, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.status,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.24306815047811614, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.original_language,=,Released),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.25450533396946257, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Released),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2595676081909251, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.title,=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.2831611709242661, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.original_language,=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3088011034928643, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.title,=,Released), genre.name),genre.name))", "score": -0.3143882087115351, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id),movie.original_language,=,Released), genre.name),genre.name))", "score": -0.34070896090101993, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id),movie.original_language,=,Released), genre.name),genre.name))", "score": -0.34334045192704266, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.status,=,Released),getData(has_genre),movie.id,has_genre.movie_id),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.3471152538811227, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),language.name,=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.35145319673176995, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3878322378910141, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))", "score": -0.38912042347719117, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}, {"orig_question": "To which genres do unreleased movies belong to?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.original_language,=,Released),merge(getData(has_genre),getData(genre),has_genre.genre_id,genre.id),movie.id,has_genre.movie_id), genre.name),genre.name))", "score": -0.3893432971433599, "correct_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_genre),movie.id,has_genre.movie_id),movie.status,!=,Released),getData(genre),has_genre.genre_id,genre.id), genre.name),genre.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 183, "beams": [{"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)", "score": -0.1479321403814048, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.vote_average),movie.vote_average)", "score": -0.19857703745623664, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m), movie.id),movie.vote_average)", "score": -0.20659308920007, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_average)", "score": -0.23390674585013305, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.birth_day,!=,m), movie.id),movie.vote_average)", "score": -0.2614350183806756, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,!=,m), movie.id),movie.vote_average)", "score": -0.2821956734650619, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,!=,m), movie.vote_average),movie.vote_average)", "score": -0.2914319529052046, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),oscar.id,oscar_nominee.person_id),person.gender,!=,m), movie.id),movie.vote_average)", "score": -0.30631551731667, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.birth_day,!=,m), movie.vote_average),movie.vote_average)", "score": -0.3120799154555075, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.death_place,!=,m), movie.vote_average),movie.vote_average)", "score": -0.33284057053989374, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.name,!=,m), movie.id),movie.vote_average)", "score": -0.33886270351272985, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id),person.gender,!=,m), movie.id),movie.vote_average)", "score": -0.3416677047500396, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.gender,!=,m),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_average)", "score": -0.3624412066228491, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.release_date,!=,m), movie.id),movie.vote_average)", "score": -0.37598834208189935, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}, {"orig_question": "What is the average of the vote average from movies in which oscar nominated persons with gender other than m were involved?", "inferred_code": "avg(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),movie.status,!=,m),movie.vote_average)", "score": -0.3898950660956077, "correct_code": "avg(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.gender,!=,m), movie.id),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 184, "beams": [{"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.gender))", "score": -0.07718892866978422, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Marylebone, London), person.gender),person.gender))", "score": -0.21177240560064092, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Marylebone, London), person.gender),person.gender))", "score": -0.3671783889294602, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.gender,=,Marylebone, London), person.gender),person.gender))", "score": -0.40336099031329425, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Marylebone, London), person.gender),person.gender))", "score": -0.41268695244798437, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Marylebone, London),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id), person.gender),person.gender))", "score": -0.42196931022580625, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.gender,=,Marylebone, London), person.gender),person.gender))", "score": -0.4748507566833568, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Marylebone, London),getData(crew),person.id,cast.person_id),getData(person),crew.person_id,person.id), person.gender),person.gender))", "score": -0.5649954804004095, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Marylebone, London),getData(crew),person.id,crew.person_id),getData(person),crew.movie_id,person.id), person.gender),person.gender))", "score": -0.5773912282188047, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,=,Marylebone, London),getData(crew),person.id,crew.person_id),getData(person),cast.person_id,person.id), person.gender),person.gender))", "score": -0.5786066819034035, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),movie.release_date))", "score": -0.6083391667925753, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),movie.popularity))", "score": -0.6350425244891085, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Marylebone, London), person.gender),person.gender))", "score": -0.6411610926152207, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Marylebone, London), person.gender),person.death_place))", "score": -0.6622776152216829, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}, {"orig_question": "What are the genders of persons born in Marylebone, London?", "inferred_code": "done(extractValues(distinct(filter(getData(person),country.name,=,Marylebone, London), person.gender),person.gender))", "score": -0.6745994771481492, "correct_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Marylebone, London),person.gender), person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 185, "beams": [{"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,113020255),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.09127911383224611, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,!=,113020255),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.11641368134796697, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,=,113020255),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.22524274990534127, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,113020255),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.2530345706568, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.2878235989001253, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,=,113020255),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.32888341597553816, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,>,113020255),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3373507292057808, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,113020255),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.name), keyword.name),keyword.name))", "score": -0.351249512528421, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,<,113020255),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.3627296278981053, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,113020255),getData(production_company),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.37391334981188257, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,113020255),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.38567842985280565, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,113020255),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),production_company.company_id,keyword.id), keyword.name),keyword.name))", "score": -0.3948774527445912, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,>,113020255),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.39731552729463515, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,!=,113020255),getData(has_keyword),movie.id,production_company.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.4105977997308406, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}, {"orig_question": "What are the keyword names of movies without the movies with a revenue of 113020255.0?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.revenue,!=,113020255),merge(getData(production_company),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))", "score": -0.4130213773342881, "correct_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.revenue,!=,113020255), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 186, "beams": [{"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.16383949411269505, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.number),oscar.number)", "score": -0.17335902274687198, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.release_date,!=,2008-02-21), oscar.id),oscar.number)", "score": -0.23670041135430106, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,!=,2008-02-21), oscar.id),oscar.number)", "score": -0.2376316213590524, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_day,!=,2008-02-21), oscar.id),oscar.number)", "score": -0.27585342546294844, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),person.death_place,!=,2008-02-21), oscar.id),oscar.number)", "score": -0.2837245046569366, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.2961505240532365, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,>=,2008-02-21), oscar.id),oscar.number)", "score": -0.3083293474045549, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id),person.death_day,!=,2008-02-21), oscar.number),oscar.number)", "score": -0.31319155483561406, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.release_date,>=,2008-02-21), oscar.id),oscar.number)", "score": -0.3317406538086994, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id), oscar.sub_category),oscar.number)", "score": -0.33492578286534497, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.release_date,!=,2008-02-21), oscar.number),oscar.number)", "score": -0.33815738842396714, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)", "score": -0.35088630732286946, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),filter(merge(merge(getData(movie),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.release_date,>=,2008-02-21),oscar_winner.movie_id,oscar.id), oscar.id),oscar.number)", "score": -0.42393458392035727, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar number os oscars with an oscar winner that did not die in 2008-02-21 ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.death_day,!=,2008-02-21),getData(oscar_winner),person.id,oscar_winner.person_id),filter(merge(merge(getData(person),getData(oscar_nominee),movie.id,oscar_nominee.movie_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.release_date,>=,2008-02-21),oscar_winner.movie_id,oscar.id), oscar.id),oscar.number)", "score": -0.43102350533024597, "correct_code": "sum(distinct(merge(filter(getData(person),person.death_day,!=,2008-02-21),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.person_id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 187, "beams": [{"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))", "score": -0.016881588817341253, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.status),movie.popularity))", "score": -0.5796465661551338, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>=,177), movie.popularity),movie.popularity))", "score": -0.5923129236034583, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.status))", "score": -0.6079710875346791, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.revenue))", "score": -0.6563697014644276, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.vote_average))", "score": -0.6906761084392201, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.vote_average),movie.popularity))", "score": -0.749608197453199, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), person.gender),movie.popularity))", "score": -0.7770504739310127, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.runtime,>,177),movie.popularity), movie.popularity))", "score": -0.7779238093025924, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.revenue),movie.popularity))", "score": -0.779755034687696, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.release_date))", "score": -0.8147466932132374, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,!=,177), movie.popularity),movie.popularity))", "score": -0.8216262375644874, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,>,177), movie.popularity),movie.popularity))", "score": -0.8350380566844251, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),person.gender))", "score": -0.8391095553233754, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}, {"orig_question": "Are there popularities of movies with a runtime of more than 177 minutes?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.release_date),movie.popularity))", "score": -0.8518098976637702, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,>,177), movie.popularity),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 188, "beams": [{"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.gender,>,1982-08-23),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "score": -0.2262015438372477, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1982-08-23),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.2316682836377538, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_place,>,1982-08-23),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "score": -0.2380037249307267, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.gender,>,1982-08-23),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.24782019052696072, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.birth_day,>,1982-08-23),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "score": -0.2606836671637902, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(merge(getData(person),getData(crew),person.id,crew.person_id),person.birth_day,>,1982-08-23),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "score": -0.29312943730935487, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_place,>,1982-08-23),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.3322740999028438, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(person),person.name,>,af),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id), person.death_place),person.death_place))", "score": -0.3326087281587713, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1982-08-23),merge(filter(getData(crew),person.gender,>,1982-08-23),getData(person),crew.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.3371754295709897, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.gender,>,1982-08-23),merge(filter(getData(crew),person.gender,>,1982-08-23),getData(person),crew.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.35166093437461904, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1982-08-23),merge(merge(getData(crew),getData(movie),crew.movie_id,movie.id),getData(person),crew.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.3572220775410146, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.death_place,>,1982-08-23),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id), person.death_place),person.death_place))", "score": -0.3668778799051571, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),movie.original_language,>,af), person.death_place),person.death_place))", "score": -0.3718036361899898, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(person),getData(crew),person.id,crew.person_id),getData(person),crew.person_id,person.id),person.gender,>,1982-08-23), person.death_place),person.death_place))", "score": -0.3842690580933246, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}, {"orig_question": "How many death places are known of movie crew members born after 1982-08-23 and working for a movie with an original language of af?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(person),person.birth_day,>,1982-08-23),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.movie_id), person.death_place),person.death_place))", "score": -0.43476043754208354, "correct_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(crew),movie.id,crew.movie_id),filter(getData(person),person.birth_day,>,1982-08-23),crew.person_id,person.id),movie.original_language,=,af), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 189, "beams": [{"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.vote_average),movie.vote_average))", "score": -0.0700054079061374, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.vote_average),movie.vote_count))", "score": -0.2886639687931165, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.status),movie.vote_average))", "score": -0.3816596776014194, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.vote_average),movie.title))", "score": -0.5016793463146314, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.vote_average),movie.vote_average))", "score": -0.5099845843251387, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.vote_average),movie.runtime))", "score": -0.5258139226352796, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,1564), movie.vote_average),movie.vote_average))", "score": -0.5537925631506369, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.popularity),movie.vote_average))", "score": -0.5965458363061771, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.status),movie.vote_count))", "score": -0.6003182384883985, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,movie.revenue),movie.vote_count,>,1564), movie.vote_average),movie.vote_average))", "score": -0.6212629637331555, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.vote_average),movie.revenue))", "score": -0.6265855882083997, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.status),movie.vote_average))", "score": -0.6639666350420157, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.revenue,movie.id),movie.id,movie.revenue),movie.vote_count,>,1564), movie.vote_average),movie.vote_count))", "score": -0.6739162303979926, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.vote_average),movie.id))", "score": -0.6919958445942029, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}, {"orig_question": "Do movies exist with a higher vote count than 1564?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), person.name),movie.vote_average))", "score": -0.7177485435968265, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_count,>,1564), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 190, "beams": [{"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)", "score": -0.02280557153527856, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.id),movie.revenue)", "score": -0.22765424091684633, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.id),movie.revenue)", "score": -0.4970713556448988, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),language.name,=,nb), movie.id),movie.revenue)", "score": -0.5173215508684413, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.revenue),movie.revenue)", "score": -0.5212776640830349, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),language.name,=,nb), movie.id),movie.revenue)", "score": -0.5270594766769312, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.original_language,=,nb), movie.id),movie.revenue)", "score": -0.550139607842053, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(merge(getData(language),getData(spoken_language),language.iso_639_1,spoken_language.iso_639_1),getData(movie),spoken_language.movie_id,movie.id),movie.original_language,=,nb), movie.id),movie.revenue)", "score": -0.5812532404295935, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),movie.original_language,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.id),movie.revenue)", "score": -0.5832637940787765, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),genre.id,spoken_language.iso_639_1),language.name,=,nb), movie.id),movie.revenue)", "score": -0.587190630491268, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),has_genre.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.id),movie.revenue)", "score": -0.5928122954732353, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.id),movie.popularity)", "score": -0.6097569373315342, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.id),movie.revenue)", "score": -0.6100348975018677, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,nb), movie.id),movie.budget)", "score": -0.6187050030696687, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}, {"orig_question": "What is the sum of the revenue of all the movies that their original language is nb?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),spoken_language.movie_id,spoken_language.iso_639_1),language.name,=,nb), movie.id),movie.revenue)", "score": -0.6256312369300273, "correct_code": "sum(distinct(filter(getData(movie),movie.original_language,=,nb), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 191, "beams": [{"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,>,2001-11-17), country.name),country.name))", "score": -0.06714277272147733, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,>,2001-11-17), country.name),country.name))", "score": -0.11077692992339579, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))", "score": -0.19420587507135895, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,>,2001-11-17), country.name),movie.status))", "score": -0.2878595595124147, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.release_date,>,2001-11-17),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id), country.name),country.name))", "score": -0.3133924801553622, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,>,2001-11-17), country.name),movie.status))", "score": -0.35214557661281287, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,>,2001-11-17), country.name),production_country.iso_3166_1))", "score": -0.353406837850399, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,>,2001-11-17), movie.status),country.name))", "score": -0.3553085711584701, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,>,2001-11-17), country.name),production_country.iso_3166_1))", "score": -0.4032716803909005, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(filter(getData(movie),movie.release_date,>,2001-11-17),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,>,2001-11-17), country.name),country.name))", "score": -0.40736106526937993, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,>=,2001-11-17), country.name),country.name))", "score": -0.4313520039728962, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),movie.status))", "score": -0.43306065223496654, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,>,2001-11-17), country.name),country.iso_3166_1))", "score": -0.4383868088359605, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.release_date,!=,2001-11-17), country.name),country.name))", "score": -0.45033636627756113, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}, {"orig_question": "Are there any production countries when the movie release dates are after 2001-11-17?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),movie.release_date,>,2001-11-17), movie.status),country.name))", "score": -0.45216265514591253, "correct_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,>,2001-11-17),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 192, "beams": [{"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.05037124427963622, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(filter(getData(movie),movie.status,=,de),movie.vote_average)", "score": -0.4307595286456348, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.vote_average),movie.vote_average)", "score": -0.5246631003524945, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.original_language,=,de), movie.id),movie.vote_average)", "score": -0.5531950485181575, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,de), movie.id),movie.vote_average)", "score": -0.5723383119998973, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.popularity,=,de), movie.id),movie.vote_average)", "score": -0.6332052502382189, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.popularity)", "score": -0.7304580386894978, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.vote_average,=,de), movie.id),movie.vote_average)", "score": -0.7409630689710877, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.status,=,de), movie.id),movie.vote_average)", "score": -0.744562896404159, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,!=,de), movie.id),movie.vote_average)", "score": -0.7643044793098654, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.runtime)", "score": -0.8709869657537507, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,de), movie.vote_average),movie.vote_average))", "score": -0.877348225156311, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.status),movie.vote_average)", "score": -0.8923382237281073, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.title,=,de), movie.id),movie.vote_average)", "score": -0.8967983446488211, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}, {"orig_question": "What is the average rating of german movies?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,de), movie.id),movie.status)", "score": -0.9221635633100216, "correct_code": "avg(filter(getData(movie),movie.original_language,=,de),movie.vote_average)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 193, "beams": [{"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.05671579630143242, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1927-07-04), person.name),person.name))", "score": -0.24853191577858524, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.birth_place),person.name))", "score": -0.4659063229992171, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.5041962010436691, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.5187789683712811, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<=,1927-07-04), person.name),person.name))", "score": -0.5368610104269465, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.birth_day))", "score": -0.6037700456290622, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,crew.person_id),person.birth_day,>=,1927-07-04), person.name),person.name))", "score": -0.6180346495208782, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>=,1927-07-04), person.name),person.name))", "score": -0.6533550644016941, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.birth_place))", "score": -0.6547996085791965, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1927-07-04), person.birth_place),person.name))", "score": -0.6577224424763699, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(cast),getData(person),cast.person_id,person.id),person.id,cast.person_id),person.birth_day,>,1927-07-04), person.name),person.name))", "score": -0.679367838743339, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,>=,1927-07-04), person.name),person.name))", "score": -0.6837617778874119, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>,1927-07-04), person.name),person.name))", "score": -0.7371983980410732, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}, {"orig_question": "What are the names of people who were born on or after 1927-07-04?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.death_day))", "score": -0.7620354574828525, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1927-07-04), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 194, "beams": [{"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_average),movie.vote_count))", "score": -0.3328325508555281, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_average),movie.vote_average))", "score": -0.3474460674842703, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_average),movie.vote_count))", "score": -0.3733614632146782, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.revenue),movie.vote_count))", "score": -0.4162394760569441, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.revenue),movie.vote_average))", "score": -0.43085299268568633, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_average),movie.vote_average))", "score": -0.4622452282565064, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_count),movie.vote_count))", "score": -0.49526034876907943, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_count),movie.vote_average))", "score": -0.5098738653978216, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.revenue),movie.vote_count))", "score": -0.5605071061509079, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_count),movie.vote_count))", "score": -0.5702156895058579, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_average),movie.revenue))", "score": -0.5977948589643347, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.id),movie.vote_count))", "score": -0.6476569680889952, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(movie),movie.vote_average,=,Whipped),movie.revenue), movie.id))", "score": -0.6479949859058252, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.revenue),movie.vote_average))", "score": -0.6493908711927361, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}, {"orig_question": "Are there votes for Whipped?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,Whipped), movie.vote_count),movie.vote_average))", "score": -0.659099454547686, "correct_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.title,=,Whipped), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 195, "beams": [{"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,<,60), company.name),company.name))", "score": -0.08452751220482096, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))", "score": -0.15091732368344507, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<,60),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.1980982262632916, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,<=,60), company.name),company.name))", "score": -0.22023346099770438, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<=,60), company.name),company.name))", "score": -0.24414440885435684, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.runtime,<,60),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.29293500518120336, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.runtime,<,60),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,<,60), company.name),company.name))", "score": -0.3061989304165034, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.runtime,<,60),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))", "score": -0.311353014520686, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.title,<,60), company.name),company.name))", "score": -0.32006169871308154, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.title,<,60), company.name),company.name))", "score": -0.3444467023389898, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.runtime,<=,60),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.3514739492872498, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), movie.title),company.name))", "score": -0.3565119036421741, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,<,60), company.name),company.name))", "score": -0.3636530778737663, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,<,60), company.name),company.name))", "score": -0.36797699857414684, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}, {"orig_question": "Which companies produced movies which run for less than 60 minutes?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,<,60), company.name),movie.title))", "score": -0.36982253422352135, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.runtime,<,60), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 196, "beams": [{"orig_question": "Who was born on December 16th 1938?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.name))", "score": -0.23090600887371693, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,=,1938-12-16), person.name),person.name))", "score": -0.3162095596053405, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1938-12-16), person.name),person.name))", "score": -0.3226805847007199, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.name))", "score": -0.3455281305068638, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.birth_place))", "score": -0.5270305826707045, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.birth_day))", "score": -0.5374575808091322, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.name), person.name))", "score": -0.5585548217786709, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,1938-12-16), person.name),person.name))", "score": -0.5984862815457745, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_place,=,1938-12-16),person.name), person.name))", "score": -0.6017155583394924, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "isEmpty(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.id))", "score": -0.6074014260811964, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,1938-12-16), person.name),person.name))", "score": -0.6363627308019204, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.birth_place))", "score": -0.6398744705074932, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,1938-12-16),person.name), person.name))", "score": -0.6418250399583485, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,=,1938-12-16), person.birth_place),person.name))", "score": -0.6659752086707158, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}, {"orig_question": "Who was born on December 16th 1938?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.death_day,=,1938-12-16),person.name), person.birth_day))", "score": -0.6714608195179608, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1938-12-16), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 197, "beams": [{"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))", "score": -0.09058635335168219, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1980-03-27), person.gender),person.gender))", "score": -0.20587887268266059, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,<,1980-03-27), person.gender),person.gender))", "score": -0.23458971481522894, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,!=,1980-03-27), person.gender),person.gender))", "score": -0.5354230592747626, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_day,=,1980-03-27), person.gender),person.gender))", "score": -0.5765159939999758, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_day,<,1980-03-27), person.gender),person.gender))", "score": -0.5850886194940316, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,=,1980-03-27), person.gender),person.gender))", "score": -0.5900441881058214, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.birth_day,=,1980-03-27), person.gender),person.gender))", "score": -0.6013743343840026, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),movie.popularity))", "score": -0.6087656424169836, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.birth_day,<,1980-03-27), person.gender),person.gender))", "score": -0.6099469598780582, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.person_id),person.birth_day,>,1980-03-27), person.gender),person.gender))", "score": -0.6118706691810568, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(person),merge(getData(crew),getData(person),crew.person_id,person.id),person.id,crew.movie_id),person.birth_day,>,1980-03-27), person.gender),person.gender))", "score": -0.6367290095650836, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),movie.release_date))", "score": -0.6617100641851721, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.death_place))", "score": -0.6710092828398047, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}, {"orig_question": "What are the genders of people with birthday on 1980-03-27?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),crew.person_id))", "score": -0.6897113726263342, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,1980-03-27), person.gender),person.gender))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 198, "beams": [{"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.17889521561353236, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.id),oscar.number)", "score": -0.20790175920547066, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.2365438076696449, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.28010912468427945, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.284950209281814, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.number),oscar.number)", "score": -0.2963277561083847, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.id),oscar.number)", "score": -0.3067413135150292, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.sub_category),oscar.number)", "score": -0.31072633268446254, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.32341988724031084, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.oscar_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.3238249868947998, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(oscar_nominee),getData(oscar),oscar_nominee.oscar_id,oscar.id),movie.id,oscar_nominee.movie_id), oscar.category),oscar.number)", "score": -0.32635788612919175, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),oscar.category,=,f), oscar.id),oscar.number)", "score": -0.3281365448881688, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id),person.gender,=,f), oscar.category),oscar.number)", "score": -0.3301261802574268, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(genre),person.gender,=,f),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.category),oscar.number)", "score": -0.34124714273889634, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}, {"orig_question": "What is the sum of the oscar numbers of oscars people have been nominated for with gender f?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.gender,=,f),getData(oscar_nominee),oscar.id,oscar_nominee.person_id),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)", "score": -0.34259884401310553, "correct_code": "sum(distinct(merge(filter(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),person.gender,=,f),getData(oscar),oscar_nominee.oscar_id,oscar.id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 199, "beams": [{"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "sum(distinct(filter(getData(movie),movie.original_language,=,Panama), movie.id),movie.budget)", "score": -0.3382990795278863, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Panama), movie.id),movie.budget)", "score": -0.5012418086397716, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Panama),movie.popularity),movie.release_date))", "score": -0.5475278743784006, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),country.name,=,Panama),movie.popularity),movie.release_date))", "score": -0.559090402524941, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),country.iso_3166_1,spoken_language.iso_639_1),language.name,=,Panama), movie.id),movie.budget)", "score": -0.5649870499187385, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),language.name,=,Panama), movie.id),movie.budget)", "score": -0.5686906724608187, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "sum(distinct(filter(getData(movie),movie.status,=,Panama), movie.id),movie.budget)", "score": -0.5690569445440959, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),genre.id,spoken_language.iso_639_1),language.name,=,Panama), movie.id),movie.budget)", "score": -0.5742708459683803, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "sum(distinct(filter(getData(movie),movie.title,=,Panama), movie.id),movie.budget)", "score": -0.5747797477606702, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),oscar_winner.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Panama), movie.id),movie.budget)", "score": -0.5906979667821689, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Panama), movie.id),movie.budget)", "score": -0.5931583130615204, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "sum(distinct(filter(merge(getData(country),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),language.name,=,Panama), movie.id),movie.budget)", "score": -0.5939809385257391, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "done(extractValues(max(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity),movie.release_date))", "score": -0.6152442256235665, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "done(extractValues(max(filter(merge(getData(language),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),country.iso_3166_1,spoken_language.iso_639_1),language.name,=,Panama),movie.popularity),movie.release_date))", "score": -0.6213643917350111, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}, {"orig_question": "What's the most popular movie, which was shot in Panama?", "inferred_code": "done(extractValues(max(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),country.iso_3166_1,spoken_language.iso_639_1),movie.popularity),movie.release_date))", "score": -0.6457509342663178, "correct_code": "done(extractValues(max(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Panama),movie.popularity),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 200, "beams": [{"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))", "score": -0.11359072900833159, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_place))", "score": -0.2377125283479692, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_place),person.birth_day))", "score": -0.24594298741549167, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,<,212), person.birth_day),person.birth_day))", "score": -0.277681832972033, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.gender),person.birth_day))", "score": -0.27900892733572247, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),movie.vote_count,=,212), person.birth_place),person.birth_day))", "score": -0.28401288047185497, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.name))", "score": -0.29815471514468617, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,=,212),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_day))", "score": -0.327056876453748, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id),movie.vote_count,=,212), person.birth_day),person.birth_day))", "score": -0.3277187360825569, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,212),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_day),person.birth_place))", "score": -0.33459835457345305, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.id),person.birth_day))", "score": -0.33515016419714094, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,=,212),getData(cast),movie.id,cast.movie_id),getData(person),cast.person_id,person.id), person.birth_place),person.birth_place))", "score": -0.35249694760841194, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,212),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id), person.birth_place),person.birth_place))", "score": -0.35271121939731076, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,!=,212), person.birth_day),person.birth_day))", "score": -0.35668646423548733, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}, {"orig_question": "When are people born which were part of the cast of movies with a vote count of 212?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_place),person.birth_place))", "score": -0.37006478675512927, "correct_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(person),cast.person_id,person.id),movie.id,cast.movie_id),movie.vote_count,=,212), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 201, "beams": [{"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))", "score": -0.08488512723124586, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Farmington Hills, Michigan), person.death_place),person.death_place))", "score": -0.23629029779112898, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Farmington Hills, Michigan), person.death_place),person.death_place))", "score": -0.25739789693034254, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,=,Farmington Hills, Michigan), person.death_place),person.death_place))", "score": -0.3981589296308812, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))", "score": -0.45674981860793196, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_day),person.death_place))", "score": -0.6229732209758367, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))", "score": -0.6441289956273977, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.birth_place),person.death_place))", "score": -0.7381965691165533, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),country.name,=,Farmington Hills, Michigan), person.death_place),person.death_place))", "score": -0.7690792003122624, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan),person.death_place), person.death_place))", "score": -0.7695626516724587, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,Farmington Hills, Michigan), person.death_day),person.death_place))", "score": -0.7743783915357199, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),genre.name))", "score": -0.7844872685091104, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_day))", "score": -0.7889049859659281, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Farmington Hills, Michigan), person.death_day),person.death_place))", "score": -0.7954859906749334, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}, {"orig_question": "What is the place of death of the persons born in Farmington Hills, Michigan?", "inferred_code": "count(extractValues(distinct(filter(getData(person),person.gender,=,Farmington Hills, Michigan), person.death_place),person.death_place))", "score": -0.8096744440554176, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_place,=,Farmington Hills, Michigan), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 202, "beams": [{"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.06317596490407595, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.31782433049779873, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.38758818229172276, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.39033314240804523, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,movie.id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.4072900414904329, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "count(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.4470416616095463, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.46009699420196926, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),person.id,spoken_language.iso_639_1),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.46806058153177404, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_genre),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.47477151749195773, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(movie),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.4750801388853237, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,movie.id),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.47705389328435693, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.48458484487897385, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(movie),has_genre.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.popularity,=,10.4764), movie.title),movie.title))", "score": -0.49848296561854183, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,10.4764),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),language.iso_639_1,spoken_language.iso_639_1),movie.vote_average),movie.title))", "score": -0.5624883400316726, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}, {"orig_question": "What is the movie title of the movie with a popularity equal to 10.4764?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.popularity,=,10.4764),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.vote_average),movie.title))", "score": -0.566047130473924, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.popularity,=,10.4764), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 203, "beams": [{"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "score": -0.018474136872100644, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<=,69), movie.revenue),movie.revenue))", "score": -0.4535032277199207, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,<,69), movie.revenue),movie.revenue))", "score": -0.602961129436153, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,>=,69), movie.revenue),movie.revenue))", "score": -0.640633351096767, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.budget),movie.revenue))", "score": -0.6605736281926511, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.budget))", "score": -0.7007791746145813, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))", "score": -0.7045170048804721, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),movie.runtime,=,69),movie.revenue), movie.revenue))", "score": -0.7443002680920472, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.vote_count))", "score": -0.7664401877409546, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),cast.movie_id))", "score": -0.7821177590376465, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,!=,69), movie.revenue),movie.revenue))", "score": -0.787988669166225, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),cast.person_id))", "score": -0.7925411808973877, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,69), movie.revenue),movie.revenue))", "score": -0.7930022587388521, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.vote_count),movie.revenue))", "score": -0.7971616056020139, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}, {"orig_question": "What revenues did movies with a runtime of 69 minutes make?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_average,=,69), movie.revenue),movie.revenue))", "score": -0.8040374030679232, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.runtime,=,69), movie.revenue),movie.revenue))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 204, "beams": [{"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Crazy/Beautiful),getData(cast),movie.id,spoken_language.movie_id),getData(movie),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.3273428927396137, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,!=,Crazy/Beautiful),getData(spoken_language),movie.id,spoken_language.movie_id),getData(movie),cast.movie_id,movie.id), movie.vote_count),movie.vote_count))", "score": -0.3556411850140279, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))", "score": -0.3853202052516556, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))", "score": -0.3957257575844119, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))", "score": -0.40442432314752214, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Crazy/Beautiful),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.iso_639_1), movie.vote_count),movie.vote_count))", "score": -0.40650512554984825, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))", "score": -0.41482987548027844, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))", "score": -0.4181747525144601, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,cast.movie_id),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))", "score": -0.41876321280872353, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Crazy/Beautiful),merge(getData(cast),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.vote_count),movie.vote_count))", "score": -0.43535722098144397, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Crazy/Beautiful),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1), movie.vote_count),movie.vote_count))", "score": -0.436428504563776, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Crazy/Beautiful),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.iso_639_1), movie.vote_count),movie.vote_count))", "score": -0.44783601319095695, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Crazy/Beautiful),merge(getData(cast),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.vote_count),movie.vote_count))", "score": -0.4652806049792812, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Crazy/Beautiful),merge(getData(spoken_language),getData(movie),cast.movie_id,movie.id),movie.id,spoken_language.movie_id), movie.vote_count),movie.vote_count))", "score": -0.4766881136064621, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}, {"orig_question": "What is the vote count for movies which don't have the title Crazy/Beautiful?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.title,!=,Crazy/Beautiful),merge(getData(spoken_language),getData(movie),spoken_language.movie_id,movie.id),movie.id,spoken_language.iso_639_1), movie.vote_count),movie.vote_count))", "score": -0.477759432629928, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.title,!=,Crazy/Beautiful), movie.vote_count),movie.vote_count))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 205, "beams": [{"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), movie.release_date),movie.release_date))", "score": -0.15109946702068555, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,m), movie.release_date),movie.release_date))", "score": -0.19289942954128492, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.release_date,=,m), movie.release_date),movie.release_date))", "score": -0.3253205095643352, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.release_date,=,m), movie.release_date),movie.release_date))", "score": -0.3671204720849346, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.gender),movie.release_date))", "score": -0.45075181249922025, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,m), person.gender),movie.release_date))", "score": -0.4925517750198196, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), movie.runtime),movie.release_date))", "score": -0.5116556001121353, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.status,=,m), movie.release_date),movie.release_date))", "score": -0.5516327147597622, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,m), movie.runtime),movie.release_date))", "score": -0.5534555626327347, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), movie.popularity),movie.release_date))", "score": -0.5646037173682998, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.status,=,m), movie.release_date),movie.release_date))", "score": -0.5934326772803615, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.gender,=,m), movie.popularity),movie.release_date))", "score": -0.6064036798888992, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(person),movie.release_date,=,m), person.gender),movie.release_date))", "score": -0.6249728550428699, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), movie.status),movie.release_date))", "score": -0.6344356847221206, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}, {"orig_question": "Find the name of the male film personalities.", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), movie.release_date),person.gender))", "score": -0.6452514839584182, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,m), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 206, "beams": [{"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.020722863031551242, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,675),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.33751212143750875, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,675),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.original_language),movie.original_language))", "score": -0.4331260650784127, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_count,=,675), language.name),movie.original_language))", "score": -0.5003955978777953, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.vote_count,=,675), movie.original_language),movie.original_language))", "score": -0.5117656806676548, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<=,675), movie.original_language),movie.original_language))", "score": -0.5169344071764499, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,>=,675), movie.original_language),movie.original_language))", "score": -0.5477746252436191, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,=,675),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.5685883195232396, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,675),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), movie.popularity),movie.original_language))", "score": -0.5689469007367383, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,!=,675), movie.original_language),movie.original_language))", "score": -0.5760337237734348, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_count,=,675),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),movie.original_language))", "score": -0.5867435365020206, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,675),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.iso_639_1),movie.original_language))", "score": -0.5906471525677041, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,<,675), movie.original_language),movie.original_language))", "score": -0.593322527827695, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,675),merge(getData(spoken_language),getData(movie),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.6113889977818545, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}, {"orig_question": "What are the distinct original languages of movies with a vote count of 675 ?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.vote_count,=,675),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,has_genre.movie_id), language.name),movie.original_language))", "score": -0.6128198817828403, "correct_code": "done(extractValues(distinct(filter(getData(movie),movie.vote_count,=,675), movie.original_language),movie.original_language))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 207, "beams": [{"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.name),person.name))", "score": -0.19348853435076308, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.name),person.name))", "score": -0.2650997933742474, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.3570995943591697, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.name))", "score": -0.3571995754537056, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.name),person.birth_day))", "score": -0.36126382257498335, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.birth_place),person.name))", "score": -0.43201141226745676, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.name),person.birth_day))", "score": -0.4612368696180056, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.birth_day))", "score": -0.52487488258339, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.birth_place),person.name))", "score": -0.5385308597979019, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.name),person.birth_day))", "score": -0.5533366516974638, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.birth_day),person.name))", "score": -0.5614438520715339, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.birth_place),person.name))", "score": -0.5956224722758634, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "isEmpty(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.birth_place),person.birth_day))", "score": -0.599786700491677, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>,1957-08-15), person.birth_place),person.name))", "score": -0.6306306418773602, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}, {"orig_question": "Provide Names of Persons born after 15-08-1957", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.death_day,>,1957-08-15), person.birth_day),person.name))", "score": -0.6331697438654373, "correct_code": "done(extractValues(distinct(filter(getData(person),person.birth_day,>=,1957-08-15), person.name),person.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 208, "beams": [{"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.05972829923518194, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.revenue,<,773328629),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.20077371680585093, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.22574639966704443, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(spoken_language),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id),movie.revenue,<,773328629), language.name),language.name))", "score": -0.29717613250298863, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.34451942087443244, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1),movie.revenue,<,773328629), language.name),language.name))", "score": -0.3455714965692708, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), movie.original_language),language.name))", "score": -0.349435630000504, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.movie_id,language.iso_639_1), language.name),language.name))", "score": -0.34971605741814277, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.revenue,<,773328629),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),movie.original_language))", "score": -0.36317994594480807, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,>,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.37306229033675825, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),spoken_language.iso_639_1))", "score": -0.3737835194867677, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),has_genre.genre_id,language.iso_639_1), language.name),language.name))", "score": -0.38292984002813313, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.3837104286212033, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.revenue,<,773328629),getData(language),spoken_language.movie_id,language.iso_639_1), language.name),language.name))", "score": -0.38591260907951014, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "What are the names of the languages that movie with a revenue smaller than 773328629 were translated in ?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))", "score": -0.40907229589431326, "correct_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.revenue,<,773328629),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 209, "beams": [{"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,TRON: Legacy), keyword.name),keyword.name))", "score": -0.10815950254993431, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,TRON: Legacy),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.13878613831135495, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.title,=,TRON: Legacy), keyword.name),keyword.name))", "score": -0.14076566845358768, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.original_language,=,TRON: Legacy), keyword.name),keyword.name))", "score": -0.24376820246908637, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.title,!=,TRON: Legacy), keyword.name),keyword.name))", "score": -0.32025889443199895, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(has_keyword),movie.id,has_keyword.movie_id),movie.title,=,TRON: Legacy),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.3518401708901688, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,spoken_language.movie_id),movie.title,=,TRON: Legacy), keyword.name),keyword.name))", "score": -0.36025044175395865, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),spoken_language.iso_639_1,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,TRON: Legacy), keyword.name),keyword.name))", "score": -0.38350266664977206, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,TRON: Legacy), keyword.name),language.name))", "score": -0.3899221604755609, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,!=,TRON: Legacy), keyword.name),keyword.name))", "score": -0.39436324922259514, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,TRON: Legacy),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),language.name))", "score": -0.39773004880328433, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(merge(getData(movie),getData(has_keyword),movie.id,spoken_language.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id),movie.title,=,TRON: Legacy), keyword.name),keyword.name))", "score": -0.3982560566434154, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,TRON: Legacy),getData(has_keyword),movie.id,spoken_language.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.4096328893620447, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(movie),movie.vote_average,=,TRON: Legacy),getData(has_keyword),movie.id,has_keyword.movie_id),getData(keyword),has_keyword.keyword_id,keyword.id), keyword.name),keyword.name))", "score": -0.4143857890660475, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}, {"orig_question": "Are there any keywords associated to the movie TRON: Legacy?", "inferred_code": "isEmpty(extractValues(distinct(filter(merge(getData(movie),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id),movie.title,=,TRON: Legacy), keyword.name),oscar.number))", "score": -0.4201945416247088, "correct_code": "isEmpty(extractValues(distinct(merge(filter(getData(movie),movie.title,=,TRON: Legacy),merge(getData(has_keyword),getData(keyword),has_keyword.keyword_id,keyword.id),movie.id,has_keyword.movie_id), keyword.name),keyword.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 210, "beams": [{"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)", "score": -0.03482051079301491, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.popularity),movie.popularity)", "score": -0.40275467264025994, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(filter(getData(movie),movie.runtime,=,127),movie.popularity)", "score": -0.563671838157597, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(filter(getData(movie),movie.runtime,>,127),movie.popularity)", "score": -0.6460016568712643, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.revenue)", "score": -0.7787173644840063, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,<,127), movie.id),movie.popularity)", "score": -0.8300270524905036, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>,127), movie.id),movie.popularity)", "score": -0.8511170800469008, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.id)", "score": -0.858029576398137, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,<=,127), movie.id),movie.popularity)", "score": -0.8728429746273618, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.release_date),movie.popularity)", "score": -0.8914678723113237, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,>=,127), movie.id),movie.popularity)", "score": -0.8940252792263106, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.release_date,=,127), movie.id),movie.popularity)", "score": -0.9283993358925599, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.runtime,!=,127), movie.id),movie.popularity)", "score": -0.9298314618467111, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_average,=,127), movie.id),movie.popularity)", "score": -0.9322826666466638, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}, {"orig_question": "What is the average movie popularity for movies with a runtime of 127 minutes?", "inferred_code": "avg(distinct(filter(getData(movie),movie.status,=,127), movie.id),movie.popularity)", "score": -0.9561255153508496, "correct_code": "avg(distinct(filter(getData(movie),movie.runtime,=,127), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 211, "beams": [{"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.1940789658497895, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.20734664218586782, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar_nominee.movie_id,production_country.movie_id), country.name),country.name))", "score": -0.2636098030066767, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar_nominee.movie_id,country.iso_3166_1), country.name),country.name))", "score": -0.27597223088282646, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar_nominee.movie_id,production_country.movie_id), country.name),country.name))", "score": -0.27687747934275503, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))", "score": -0.28580559053121496, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar_nominee.movie_id,country.iso_3166_1), country.name),country.name))", "score": -0.28923990721890475, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_winner.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.2971590145193724, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,movie.id), country.name),country.name))", "score": -0.2990732668672933, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3066624678507546, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_winner.movie_id,production_country.iso_3166_1), country.name),country.name))", "score": -0.3104266908554507, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar.id,production_country.iso_3166_1), country.name),country.name))", "score": -0.31993014418683297, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.runtime,production_country.movie_id), country.name),country.name))", "score": -0.3356453199356914, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar.id,oscar_nominee.oscar_id), country.name),country.name))", "score": -0.3362319389305524, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}, {"orig_question": "In which countries are movies produced that were nominated for an oscar in the subcategory of art direction (black-and-white)?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.sub_category,=,art direction (black-and-white)),getData(oscar_nominee),oscar.id,oscar_nominee.oscar_id),merge(getData(movie),merge(getData(production_country),getData(country),production_country.iso_3166_1,country.iso_3166_1),movie.id,production_country.movie_id),oscar_nominee.movie_id,production_country.movie_id), country.name),country.name))", "score": -0.33691700107500877, "correct_code": "done(extractValues(distinct(filter(merge(getData(oscar),merge(merge(merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),getData(production_country),movie.id,production_country.movie_id),getData(country),production_country.iso_3166_1,country.iso_3166_1),oscar.id,oscar_nominee.oscar_id),oscar.sub_category,=,art direction (black-and-white)), country.name),country.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 212, "beams": [{"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,=,Original Sin), company.name),company.name))", "score": -0.07320991254258694, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(movie),movie.release_date,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,=,Original Sin), company.name),company.name))", "score": -0.1420625380592141, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.release_date,=,Original Sin), company.name),company.name))", "score": -0.2265044420423499, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,Original Sin), company.name),company.name))", "score": -0.2686419544855346, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.budget,=,Original Sin), company.name),company.name))", "score": -0.30141204954114403, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(movie),movie.status,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,=,Original Sin), company.name),company.name))", "score": -0.30715145412619127, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(movie),movie.release_date,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.popularity,=,Original Sin), company.name),company.name))", "score": -0.3157315248584804, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.runtime,=,Original Sin), company.name),company.name))", "score": -0.3185681100750728, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.revenue,=,Original Sin), company.name),company.name))", "score": -0.3202283499892011, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,=,Original Sin), company.name),company.name))", "score": -0.32957267095760606, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(movie),movie.popularity,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,=,Original Sin), company.name),company.name))", "score": -0.3363426956636016, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(getData(movie),movie.release_date,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.budget,=,Original Sin), company.name),company.name))", "score": -0.34857163122081386, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.release_date,=,Original Sin),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.34996186748659264, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.popularity,=,Original Sin), company.name),company.name))", "score": -0.35466024869730056, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}, {"orig_question": "How many different companies produced the movie called Original Sin?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.release_date,=,Original Sin), company.name),movie.title))", "score": -0.3909532659312097, "correct_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Original Sin),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 213, "beams": [{"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(movie),production_country.movie_id,movie.id),movie.status,=,Philippines), movie.title),movie.title))", "score": -0.1706265007235125, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(movie),production_country.movie_id,movie.id),movie.title,=,Philippines), movie.title),movie.title))", "score": -0.2189338913857836, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(merge(filter(getData(movie),movie.title,=,Philippines),getData(production_country),movie.id,production_country.movie_id),getData(movie),production_country.movie_id,movie.id), movie.title),movie.title))", "score": -0.23177539248086657, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.status,=,Philippines), movie.title),movie.title))", "score": -0.25602707850409695, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,=,Philippines), movie.title),movie.title))", "score": -0.25767342549376504, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.title,=,Philippines), movie.title),movie.title))", "score": -0.2616715398007948, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.2887151716168457, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(movie),production_country.movie_id,movie.id),movie.original_language,=,Philippines), movie.title),movie.title))", "score": -0.2954776054999723, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3376241489449806, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),oscar.sub_category,=,Philippines), movie.title),movie.title))", "score": -0.3380298170425169, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),person.name,=,Philippines), movie.title),movie.title))", "score": -0.34567787195785943, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),person.id,production_country.iso_3166_1), movie.title),movie.title))", "score": -0.3662682403621454, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(merge(filter(getData(movie),movie.title,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),movie.id,production_country.movie_id), movie.title),movie.title))", "score": -0.370074582694037, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(movie),production_country.movie_id,movie.id),movie.title,=,Philippines),getData(movie),production_country.movie_id,movie.id),movie.status,=,Philippines), movie.title),movie.title))", "score": -0.38718411269108893, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}, {"orig_question": "How many movies were produced in the Philippines?", "inferred_code": "count(extractValues(distinct(filter(merge(filter(merge(merge(getData(movie),getData(production_country),movie.id,production_country.movie_id),getData(movie),production_country.movie_id,movie.id),movie.title,=,Philippines),merge(getData(movie),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),movie.title,=,Philippines), movie.title),movie.title))", "score": -0.44230060153382117, "correct_code": "count(extractValues(distinct(merge(filter(getData(country),country.name,=,Philippines),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.title),movie.title))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 214, "beams": [{"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.17545361701922957, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,movie.id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.36996770229741227, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,movie.id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.39248717593679033, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(movie),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,movie.id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.42470724231597085, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.42714555688213823, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),movie.id,movie.id),movie.id,movie.id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.42719583899075536, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),crew.movie_id,movie.id),movie.id,movie.id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.4366964728535056, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.runtime,>=,59),merge(getData(movie),getData(movie),movie.id,movie.id),movie.id,movie.id),movie.runtime),movie.popularity))", "score": -0.4412400717661809, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.movie_id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.4496650305215163, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,movie.id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.4497153126301334, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),movie.runtime,movie.id),movie.id,movie.id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.45887206117135976, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(cast),getData(movie),crew.movie_id,movie.id),movie.id,movie.id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.45921592323463956, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),movie.id,oscar_nominee.oscar_id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.4605995226716552, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(filter(merge(getData(movie),merge(getData(oscar_nominee),getData(movie),movie.revenue,movie.id),movie.id,movie.id),movie.runtime,>=,59),movie.runtime),movie.popularity))", "score": -0.48002133544491515, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}, {"orig_question": "What is the popularity of the movie with the maxiumum runtime among all movies with runtimes of at least 59 minutes?", "inferred_code": "done(extractValues(max(merge(filter(getData(movie),movie.runtime,>=,59),merge(getData(cast),getData(movie),movie.id,movie.id),movie.id,movie.id),movie.runtime),movie.popularity))", "score": -0.4828425174043044, "correct_code": "done(extractValues(max(filter(getData(movie),movie.runtime,>=,59),movie.runtime),movie.popularity))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 215, "beams": [{"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),person.death_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.2715989570342477, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.release_date,>,2008-05-22), oscar.id),oscar.number)", "score": -0.309214742574194, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),person.death_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.32308663473422883, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id),person.death_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.3246971194278407, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),person.birth_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.3256171656620457, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id),person.death_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.3761847971278218, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),person.birth_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.3771048433620269, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id),person.birth_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.3787153280556387, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(movie),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.oscar_id),person.death_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.3883669711042898, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.oscar_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.release_date,>,2008-05-22), oscar.id),oscar.number)", "score": -0.3945074841706617, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.person_id),person.death_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.4142000280161154, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.release_date,>,2008-05-22), oscar.number),oscar.number)", "score": -0.41725641809237163, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),person.id,oscar_winner.oscar_id),person.birth_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.43020294776841655, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(merge(getData(oscar),getData(oscar_winner),person.id,oscar_winner.person_id),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.release_date,>=,2008-05-22), oscar.id),oscar.number)", "score": -0.4302335369374973, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}, {"orig_question": "What is the average oscar number from movies that have won the oscar and were released after 2008-05-22?", "inferred_code": "avg(distinct(filter(merge(getData(oscar),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),oscar.id,oscar_winner.movie_id),person.death_day,>,2008-05-22), oscar.id),oscar.number)", "score": -0.440939491976463, "correct_code": "avg(distinct(merge(filter(getData(movie),movie.release_date,>,2008-05-22),merge(getData(oscar_winner),getData(oscar),oscar_winner.oscar_id,oscar.id),movie.id,oscar_winner.movie_id), oscar.id),oscar.number)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 216, "beams": [{"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.4256098460325976, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(movie),spoken_language.movie_id,movie.id),merge(getData(spoken_language),getData(genre),spoken_language.iso_639_1,genre.id),movie.id,spoken_language.movie_id), language.name),genre.name))", "score": -0.4536739824458568, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.4619363702649172, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,>=,4.5),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.47885538720538545, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(movie),spoken_language.movie_id,movie.id),merge(getData(spoken_language),getData(genre),spoken_language.iso_639_1,genre.id),movie.id,spoken_language.movie_id), language.name),movie.original_language))", "score": -0.48996735924293705, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), genre.name),genre.name))", "score": -0.49428713911551014, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(movie),spoken_language.movie_id,movie.id),merge(getData(spoken_language),getData(genre),spoken_language.iso_639_1,genre.id),oscar.id,spoken_language.movie_id), language.name),genre.name))", "score": -0.4982608887708713, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,person.id), language.name),genre.name))", "score": -0.5038526745545812, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,genre.id), language.name),genre.name))", "score": -0.5047225683240827, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(oscar),getData(spoken_language),oscar.id,oscar_winner.oscar_id),oscar.number,=,4.5),merge(getData(movie),getData(genre),movie.id,genre.id),spoken_language.movie_id,movie.id), movie.title),movie.original_language))", "score": -0.506120923865043, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(movie),spoken_language.movie_id,movie.id),merge(getData(spoken_language),getData(genre),has_genre.genre_id,genre.id),movie.id,spoken_language.movie_id), language.name),genre.name))", "score": -0.5080282526493134, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,<=,4.5),getData(spoken_language),movie.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.5126971778465077, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(filter(getData(oscar),oscar.number,>=,4.5),getData(spoken_language),oscar.id,spoken_language.movie_id),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),genre.name))", "score": -0.5151819911802561, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(movie),spoken_language.movie_id,movie.id),merge(getData(spoken_language),getData(genre),spoken_language.iso_639_1,language.iso_639_1),movie.id,spoken_language.movie_id), language.name),genre.name))", "score": -0.5306633324233944, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}, {"orig_question": "Are there films that have been translated into different languages with an average number of votes of 4.5?", "inferred_code": "isEmpty(extractValues(distinct(merge(merge(merge(filter(getData(oscar),oscar.number,=,4.5),getData(spoken_language),oscar.id,oscar_winner.oscar_id),getData(movie),spoken_language.movie_id,movie.id),merge(getData(has_genre),getData(genre),spoken_language.iso_639_1,genre.id),movie.id,spoken_language.movie_id), language.name),genre.name))", "score": -0.5330138011053345, "correct_code": "isEmpty(extractValues(distinct(merge(filter(merge(getData(movie),getData(spoken_language),movie.id,spoken_language.movie_id),movie.vote_average,=,4.5),getData(language),spoken_language.iso_639_1,language.iso_639_1), language.name),language.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 217, "beams": [{"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_day),person.birth_day))", "score": -0.04121040903555695, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))", "score": -0.37955067471193615, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.name),person.birth_day))", "score": -0.46754247300850693, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_day),person.name))", "score": -0.48850066286104266, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.death_day),person.birth_day))", "score": -0.5013724600576097, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), oscar.year),person.birth_day))", "score": -0.5366556083463365, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,>,f), person.birth_day),person.birth_day))", "score": -0.5554380805842811, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_day),person.death_day))", "score": -0.5571825585939223, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_day),movie.revenue))", "score": -0.5714715204812819, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,>=,f), person.birth_day),person.birth_day))", "score": -0.6374272497050697, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_day),movie.popularity))", "score": -0.6732713065721327, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_day),oscar.year))", "score": -0.6864742718316847, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_day),cast.person_id))", "score": -0.68694789033907, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), movie.popularity),person.birth_day))", "score": -0.7321795856259996, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}, {"orig_question": "What are the birth dates of female persons?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.gender,!=,f), person.birth_day),person.id))", "score": -0.7386736951448256, "correct_code": "done(extractValues(distinct(filter(getData(person),person.gender,=,f), person.birth_day),person.birth_day))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 218, "beams": [{"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.runtime)", "score": -0.04758661549905538, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.vote_average)", "score": -0.4164224569935312, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.title)", "score": -0.4731353017386552, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>,1115), movie.id),movie.runtime)", "score": -0.5068086495909104, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.popularity)", "score": -0.5908259735749297, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.status)", "score": -0.670364780369143, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.id)", "score": -0.6717349849697969, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(filter(getData(movie),movie.vote_count,!=,1115),movie.runtime)", "score": -0.7072222342336153, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.vote_count)", "score": -0.7152417024313021, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,>=,1115), movie.id),movie.runtime)", "score": -0.755862729578855, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.release_date)", "score": -0.7573535663736686, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.runtime),movie.runtime)", "score": -0.7664451765315384, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,<,1115), movie.id),movie.runtime)", "score": -0.8193994459804906, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),production_company.movie_id)", "score": -0.8613765693117996, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}, {"orig_question": "Whats the average budet of movies with a vote count other than 1115?", "inferred_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),oscar.number)", "score": -0.864253048050429, "correct_code": "avg(distinct(filter(getData(movie),movie.vote_count,!=,1115), movie.id),movie.budget)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 219, "beams": [{"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_day),person.name))", "score": -0.25692118751612725, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.name),person.name))", "score": -0.287424333866511, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,Atsuko Maeda),person.name), person.death_day))", "score": -0.3440927775518503, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_day),person.death_day))", "score": -0.4082826529702288, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Atsuko Maeda), person.death_day),person.name))", "score": -0.43495144556072773, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.name),person.death_day))", "score": -0.43878579932061257, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Atsuko Maeda), person.name),person.name))", "score": -0.4654545919111115, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(distinct(extractValues(filter(getData(movie),person.name,=,Atsuko Maeda),person.name), person.death_day))", "score": -0.49314492809935473, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(distinct(extractValues(filter(getData(person),person.name,=,Atsuko Maeda),person.name), person.name))", "score": -0.5828808942751493, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Atsuko Maeda), person.death_day),person.death_day))", "score": -0.5863129110148293, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(movie),person.name,=,Atsuko Maeda), person.name),person.death_day))", "score": -0.616816057365213, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_day),movie.vote_count))", "score": -0.6231625084838015, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), oscar.number),person.name))", "score": -0.6398673285802943, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.name),movie.vote_count))", "score": -0.6536656548341853, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}, {"orig_question": "Is Atsuko Maeda still alive?", "inferred_code": "done(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), movie.runtime),person.name))", "score": -0.665892802651797, "correct_code": "isEmpty(extractValues(distinct(filter(getData(person),person.name,=,Atsuko Maeda), person.death_place),person.death_place))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 220, "beams": [{"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,<=,116000000),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.08108676799396848, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))", "score": -0.14334877572349752, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.budget,<=,116000000), company.name),company.name))", "score": -0.1652068512129318, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,=,116000000),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.23252742836921367, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(filter(merge(filter(getData(movie),movie.budget,<=,116000000),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.budget,<=,116000000), company.name),company.name))", "score": -0.24848649936048156, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,<=,116000000),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.250735018544076, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(merge(filter(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),movie.budget,<=,116000000),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.32526187616005237, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,<=,116000000),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), movie.title),company.name))", "score": -0.3822670217516973, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), movie.title),company.name))", "score": -0.40872279715275167, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,>=,116000000),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4091554779053611, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,<=,116000000),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),movie.title))", "score": -0.42573451926282274, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,=,116000000), company.name),company.name))", "score": -0.4261093795577491, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(merge(merge(filter(getData(movie),movie.budget,=,116000000),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id), company.name),company.name))", "score": -0.43401078813301397, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(filter(merge(getData(movie),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id),movie.budget,=,116000000), company.name),company.name))", "score": -0.43536232876288594, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}, {"orig_question": "Which companies produced a movie with a budget of at most 116000000 Dollars?", "inferred_code": "done(extractValues(distinct(merge(filter(getData(movie),movie.budget,<,116000000),merge(getData(production_company),getData(company),production_company.company_id,company.id),movie.id,production_company.movie_id), company.name),company.name))", "score": -0.4462917703005285, "correct_code": "done(extractValues(distinct(filter(merge(merge(getData(movie),getData(production_company),movie.id,production_company.movie_id),getData(company),production_company.company_id,company.id),movie.budget,<=,116000000), company.name),company.name))"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 221, "beams": [{"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(filter(getData(country),country.name,!=,Tunisia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.08329683046488212, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)", "score": -0.1717100802825383, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(merge(filter(getData(country),country.name,!=,Tunisia),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id), movie.id),movie.revenue)", "score": -0.2469497772955784, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(filter(getData(movie),country.name,!=,Tunisia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.2803733679534765, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(filter(merge(merge(getData(country),getData(production_country),country.iso_3166_1,production_country.iso_3166_1),getData(movie),production_country.movie_id,movie.id),country.name,!=,Tunisia), movie.id),movie.revenue)", "score": -0.29777013971989214, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(filter(getData(language),country.name,!=,Tunisia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.2992894844112733, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(filter(getData(country),production_country.iso_3166_1,!=,Tunisia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3346508505525681, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(filter(merge(getData(language),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)", "score": -0.3492031136887966, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(filter(getData(genre),country.name,!=,Tunisia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.3536238421070047, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.revenue),movie.revenue)", "score": -0.355476949687557, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(filter(getData(country),movie.status,!=,Tunisia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.36763524665550384, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(filter(getData(country),country.name,!=,Tunisia),merge(getData(spoken_language),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.37406235715215563, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(filter(getData(country),country.name,!=,Tunisia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),language.iso_639_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.37849018698021575, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(filter(getData(country),country.name,!=,Tunisia),merge(getData(crew),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.38176303095390735, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}, {"orig_question": "What is the summed revenue of movies that were not produced in Tunisia ?", "inferred_code": "sum(distinct(merge(filter(getData(company),country.name,!=,Tunisia),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1), movie.id),movie.revenue)", "score": -0.38599797705444044, "correct_code": "sum(distinct(filter(merge(getData(country),merge(getData(production_country),getData(movie),production_country.movie_id,movie.id),country.iso_3166_1,production_country.iso_3166_1),country.name,!=,Tunisia), movie.id),movie.revenue)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 222, "beams": [{"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,=,1920-05-11), movie.id),movie.popularity)", "score": -0.1570769830458346, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1920-05-11), movie.id),movie.popularity)", "score": -0.16234185588503372, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<=,1920-05-11), movie.id),movie.popularity)", "score": -0.1835628516692496, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.1997163353366885, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<=,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.2564600888343281, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)", "score": -0.2904043296703082, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.popularity),movie.popularity)", "score": -0.30450121813602543, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,=,1920-05-11), movie.popularity),movie.popularity)", "score": -0.33273724369843044, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,>=,1920-05-11), movie.popularity),movie.popularity)", "score": -0.33800211653762957, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(filter(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id),person.birth_day,<=,1920-05-11), movie.id),movie.popularity)", "score": -0.34224116117440057, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,<=,1920-05-11), movie.popularity),movie.popularity)", "score": -0.35922311232184545, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,=,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.3606929266529368, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<=,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.popularity),movie.popularity)", "score": -0.36124495717230864, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,>,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id), movie.id),movie.popularity)", "score": -0.36364657673429895, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}, {"orig_question": "Whats the sum of movie popularities with an oscar nomineed person born before 1920-05-11?", "inferred_code": "sum(distinct(merge(filter(getData(person),person.birth_day,<,1920-05-11),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.oscar_id), movie.id),movie.popularity)", "score": -0.38075241039952024, "correct_code": "sum(distinct(merge(merge(filter(getData(person),person.birth_day,<,1920-05-11),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.popularity)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
{"index": 223, "beams": [{"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,=,Didsbury, Manchester, England), movie.id),movie.vote_count)", "score": -0.14525724775150028, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,=,Didsbury, Manchester, England), movie.id),movie.vote_count)", "score": -0.1841970549647562, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,=,Didsbury, Manchester, England), movie.id),movie.vote_count)", "score": -0.18673172807871366, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.22660538120234186, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.25621476214782535, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)", "score": -0.2614391337594727, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_day,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_count)", "score": -0.26682427553347926, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_count),movie.vote_count)", "score": -0.2947829103301807, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(merge(merge(getData(person),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.vote_average),movie.vote_count)", "score": -0.30708663259936125, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,=,Didsbury, Manchester, England), movie.vote_count),movie.vote_count)", "score": -0.362936218341391, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.name,=,Didsbury, Manchester, England), movie.id),movie.vote_count)", "score": -0.37447908694596355, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.death_place,=,Didsbury, Manchester, England), movie.id),movie.vote_count)", "score": -0.3871816156838911, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.gender,=,Didsbury, Manchester, England), movie.vote_average),movie.vote_count)", "score": -0.39989656360778436, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_place,=,Didsbury, Manchester, England), movie.vote_count),movie.vote_count)", "score": -0.40187602045063875, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}, {"orig_question": "Whats the average vote count for movies for which people born in Didsbury, Manchester, England were nominated for an oscar?", "inferred_code": "avg(distinct(filter(merge(getData(person),merge(getData(oscar_nominee),getData(movie),oscar_nominee.movie_id,movie.id),person.id,oscar_nominee.person_id),person.birth_day,=,Didsbury, Manchester, England), movie.vote_count),movie.vote_count)", "score": -0.40441069356459625, "correct_code": "avg(distinct(merge(merge(filter(getData(person),person.birth_place,=,Didsbury, Manchester, England),getData(oscar_nominee),person.id,oscar_nominee.person_id),getData(movie),oscar_nominee.movie_id,movie.id), movie.id),movie.vote_count)"}], "gold_nubia_score": -1, "db_name": "moviedata_beta"}
